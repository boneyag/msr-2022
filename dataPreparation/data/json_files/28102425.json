{"tags": ["ruby-on-rails", "json", "postgresql", "ruby-on-rails-4", "activerecord"], "answers": [{"score": 32, "last_activity_date": 1469562961, "last_edit_date": 1495542374, "answer_id": 29113638, "question_id": 28102425, "body": "<p>Yes, ActiveRecord allows to use Postgres' <code>json</code>-fields simply as Hashes in their models. However, there are a couple of things to consider:</p>\n\n<ol>\n<li><p>Hash may be NULL on initialization <br>\nIn your <code>create_table</code> migration you allow the field <code>:game_board</code> to be <code>NULL</code>. Thus, on first usage the field <code>:game_board</code> of your model-instance will be <code>NULL</code> and you have to initialize the Hash first before using it. (See example below)</p></li>\n<li><p>In JSON all keys are Strings <br>\nThus, on save (and reload) all keys will be transformed into Strings if you have used Symbols or Numbers before. Thus, to prevent unwanted behavior it is recommended to use String-keys unless your ORM is configured to symbolize all keys.</p></li>\n</ol>\n\n<p><br>\nYour examples:</p>\n\n<pre><code>self.game_board         ||= {}\nself.game_board[:player1] = 1\nself.game_board[:cards]   = cards.to_hash\n\n# after reload from database (access via String-key):\nself.game_board['player1']  # And retrieve value 1 (that we put here before)\n</code></pre>\n\n<p><br>\n@ Performance:</p>\n\n<ol>\n<li><p>Yes, every time ActiveRecord reads an entry from the database and creates a model-instance, JSON-fields get unserialized into Hashes. But if you think that is a performance-hit to your application than you should either use a text-field and serialize/deserialize the JSON/Hashes when you need to or, even better, don't use ActiveRecord at all. By creating heaps of classes and using magic-methods, ActiveRecord creates so much overhead that you shouldn't worry about the deserialization of JSON. Convenience has its costs.</p></li>\n<li><p>Yes, every time you change a value in the Hash, the (whole) JSON-field gets replaced and updated with the new serialized version.<br>\nTwo notes on this:</p>\n\n<ul>\n<li>Even in Postgres itself (not only in ActiveRecord) the possibility of performing updates on certain JSON-elements is missing until now. <a href=\"https://stackoverflow.com/questions/27288768/update-certain-array-elements-of-a-json-array-in-postgresql-9-4\">Compare this Stackoverflow-question</a></li>\n<li>In general, JSON-fields should be used with a fixed structure or, at least, in manageable sizes and the field-type is not supposed to be a document-store like eg. in MongoDB. <a href=\"http://www.postgresql.org/docs/9.4/static/datatype-json.html#JSON-DOC-DESIGN\" rel=\"noreferrer\">Compare the Postgres documentation</a></li>\n</ul></li>\n</ol>\n"}, {"score": 0, "last_activity_date": 1578068100, "answer_id": 59581810, "question_id": 28102425, "body": "<p>Just to further clarify - when you're saving the JSON object to an attribute of your model instance <strong>make sure to save it as a hash</strong>.</p>\n\n<p>Active Record will not complain if you forget to parse a JSON <em>string</em>:</p>\n\n<pre><code>  game = Game.create(game_board: '\"key\":\"value\"')\n</code></pre>\n\n<p>When you retrieve a string from a <code>json</code> attribute, it won't complain and just return the String.</p>\n\n<pre><code>  game.game_board\n  =&gt; '\"key\":\"value\"'\n</code></pre>\n\n<p>Thus <code>game.game_board['key']</code> would lead to an error because you're trying to treat a String like a Hash.</p>\n\n<p>So make sure you use <code>JSON.parse(string)</code> before saving.</p>\n\n<pre><code>  game = Game.create(game_board: JSON.parse('\"key\":\"value\"'))\n</code></pre>\n\n<p>So now you have the expected behavior</p>\n\n<pre><code>game.game_board['key']\n=&gt; 'value'\n</code></pre>\n\n<p>Probably not useful for this case, but came across this issue when saving a JSON payload from an API I was integrating with. Anyway, hope this helps.</p>\n"}], "is_answered": true, "answer_count": 2, "score": 20, "last_activity_date": 1578068100, "creation_date": 1421982674, "question_id": 28102425, "title": "How to use the ActiveRecord json field type", "body": "<p>I have a Rails model which has a database column of type \"json\":</p>\n\n<pre><code>create_table \"games\", force: true do |t|\n  t.json     \"game_board\"\n  t.datetime \"created_at\", null: false\n  t.datetime \"updated_at\", null: false\nend\n</code></pre>\n\n<p>Great!  Now how do I use it?  Is it really just as simple as <a href=\"http://blog.arkency.com/2014/10/how-to-persist-hashes-in-rails-applications-with-postgresql/\" rel=\"noreferrer\">treating the field like a <code>Hash</code></a>?</p>\n\n<pre><code>self.game_board[:player1] = 1\nself.game_board[:cards] = cards.to_hash\n</code></pre>\n\n<p>If I were to write that, would everything just work as expected, so in a future API call from a client I could do this?:</p>\n\n<pre><code>self.game_board[:player] # And get back the 1 that I put here before\n</code></pre>\n\n<p>What about performance as well?  Will the entire <code>game_board</code> be de-serialized every time even if that field is never read?  Will the field be re-written (IOW a database write) each time I change part of the \"Hash?\"</p>\n"}