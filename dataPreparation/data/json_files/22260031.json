{"tags": ["javascript", "json", "angularjs", "angularjs-scope"], "comments": [{"score": 0, "creation_date": 1394224183, "post_id": 22260031, "comment_id": 33810188, "body": "I only say this because <code>bags</code> is plural, so I just want to make sure. What is returned in the JSON? Is it a list? A hash? Also, are you sure the content-type header is being returned properly? Your angular code might be parsing the response as a string, which won&#39;t have an <code>id</code> property"}, {"score": 0, "creation_date": 1394224478, "post_id": 22260031, "comment_id": 33810375, "body": "Hey Ian, I just updated my post with the full paste of the .json file. It&#39;s small, and I think it&#39;s a list of key-value pairs? How can I check for the content-type header or modify it? It&#39;s strange because I didn&#39;t have to use any of that with my other controllers.."}, {"score": 2, "creation_date": 1394224572, "post_id": 22260031, "comment_id": 33810441, "body": "if it is in an array you have to say <code>bags[1].id</code>"}, {"score": 0, "creation_date": 1394224865, "post_id": 22260031, "comment_id": 33810588, "body": "Thanks, Nick. That seemed to solve the problem. I guess since this .json file only has one item in focus, I didn&#39;t need to make it into an array.  I feel really silly, but thanks a bunch!"}], "answers": [{"comments": [{"score": 0, "creation_date": 1394224986, "post_id": 22260193, "comment_id": 33810672, "body": "Hey kadjar, it turned out that I needed to specify the array index. Thanks for the input I really appreciate it!"}], "score": 3, "last_activity_date": 1394224573, "answer_id": 22260193, "question_id": 22260031, "body": "<p>Just a guess, but you probably need to parse the JSON before you can use it.</p>\n\n<p>Try this:</p>\n\n<pre><code>$http({method: 'GET', url: 'handbags/n1-black-details.json'}).success(function(data) {\n    $scope.bags = JSON.parse(data);\n    console.log($scope.bags);\n    $scope.message = \"it works!\";\n}); \n</code></pre>\n"}, {"comments": [{"score": 1, "creation_date": 1394225598, "post_id": 22260294, "comment_id": 33811014, "body": "If you&#39;re going to answer yourself, provide a complete explanation/solution! (or let Nick answer)"}], "score": 0, "last_activity_date": 1394227219, "last_edit_date": 1394227219, "answer_id": 22260294, "question_id": 22260031, "body": "<p>I found the solution, with the help of Nick. It still doesn't make sense to me why it worked this way but it did.</p>\n\n<p>I had to state which part of the .json object I was using by stating {{bags[0].something}} instead of {{bags.something}}. I'm still a little unsure why, as my json file only has one object in it. I'm guessing I just have to write it like that regardless of the number of objects in it.</p>\n\n<p>Also, the real reason why I was having trouble was because of where I was putting the <strong>ng-controller</strong> in my html page.</p>\n\n<p>What I did was put it inside a div called <strong>A</strong>, and was trying to access data that was fetched using that controller from another div called <strong>B</strong>. It makes sense to me now why this doesn't work, and I think I just took another step closer into wrapping my head around the whole MVC idea.</p>\n\n<p>Thanks for the help everyone!</p>\n"}, {"score": 1, "last_activity_date": 1452188209, "last_edit_date": 1452188209, "answer_id": 22510865, "question_id": 22260031, "body": "<p>Just in case someone comes across this with a similar problem I will provide an explanation.</p>\n\n<p>If you take a look at his JSON file you will see that it contains a JSON array with one item in it.</p>\n\n<pre><code>[\n    {\n        \"id\": \"n1-black\",\n        \"title\": \"n&amp;deg;1 (Black)\",\n        \"description\": \"TOTE IN TEXTURED CALFSKIN\\\\nBLACK\\\\n001\",\n        \"images\": [\n            \"images/handbags/details/n1-black-1.jpg\",\n            \"images/handbags/details/n1-black-2.jpg\",\n            \"images/handbags/details/n1-black-3.jpg\",\n            \"images/handbags/details/n1-black-4.jpg\"\n        ]\n    }\n]\n</code></pre>\n\n<p>In the success block he assigned the response of a get request for the JSON file to the bags variable on his $scope.</p>\n\n<p>When he tried to use the expression <code>{{bags.id}}</code> it didn't work because <code>bags</code> was not an object but an array of objects. When he used <code>{{bags[0].id}}</code> it worked because <code>bags[0]</code> was the actual object he was expecting.</p>\n"}], "is_answered": true, "answer_count": 3, "score": 1, "last_activity_date": 1452188209, "creation_date": 1394223983, "question_id": 22260031, "title": "AngularJS - Can&#39;t access retrieved JSON data in the view", "body": "<p>I just spent the last hour searching and reading a bunch of similar stackoverflow pages and was unable to find a solution. I'll try to be as descriptive as possible, but please let me know if I need to provide any other details.</p>\n\n<p>Basically, I'm trying to grab a .json file using $http GET. Once I get it, I'll store it in $scope.bags and then on my html (view) page, I am trying to access the contents to use such as title, details, images, etc.</p>\n\n<p>Lets start with the <strong>controller:</strong></p>\n\n<pre><code>munyApp.controller('productController', ['$scope', '$location', '$http',\n    function ($scope, $location, $http) {\n        var $url2parse = $location.path();\n        var $urlSplit = $url2parse.split(\"/\");\n        var $bag2show = $urlSplit.pop();        \n        var $bag2showString = String($bag2show);\n        console.log($bag2showString);\n\n        $http({method: 'GET', url: 'handbags/n1-black-details.json'}).success(function(data) {\n            $scope.bags = data;\n            console.log($scope.bags);\n            $scope.message = \"it works!\";\n        });     \n</code></pre>\n\n<p>For now, please ignore the random var lines. I'll get to that later, as I'm guessing it's not related to my issue here.</p>\n\n<p>And here's a small block of the <strong>HTML</strong> where the controller is to be used:</p>\n\n<pre><code>&lt;div id=\"detail_large_container\" ng-controller=\"productController\"&gt;\n    {{bags.id}}\n    {{bags['id']}}\n&lt;/div&gt;\n</code></pre>\n\n<p>For some reason, I cannot get the id value to show up, which is supposed to be \"n1-black\". </p>\n\n<p>This may seem really simple (it probably is, I'm a beginner with all of this), but the reason this is all perplexing to me is that I was able to do this same thing for another controller and it works out fine. I copy and pasted the working controller to modify as this newer one, and for whatever reason it doesn't seem to work.</p>\n\n<p>Here's an example of <strong>another controller</strong> that <strong>IS</strong> working:</p>\n\n<pre><code>munyApp.controller('handbagsController', ['$scope', '$http',\n    function ($scope, $http) {\n        $http.get('handbags/bagsfull.json').success(function(data) {\n            $scope.bags = data;\n        });\n}]);\n</code></pre>\n\n<p>With this above controller, it grabs the json file fine and I'm able to use its contents in the html page by using {{bags.somekey}}.</p>\n\n<p><strong>Some curious things that I ran into:</strong></p>\n\n<ol>\n<li>On my new controller, it failed to fetch the .json file when I used the <strong>$http.get()</strong> syntax. It only started to fetch it successfully when I changed the syntax to use the <strong>$http({method: 'GET', url: ''})</strong> style. Why I had to change it is really confusing to me.\nI have all my controllers stored in the same .js file and my older ones use the $http.get() fine, while my newer one fails.</li>\n<li>I included a $console.log($scope.bags) after setting $scope.bags to the data that was fetched from the .json file. In my chrome console, it shows that it fetched the .json file fine. It correctly returned my .json file with all the data intact. But when I try to use the data in my html, it's just blank.</li>\n<li>For testing, I set a $scope.message = \"it works\" inside the $http.success function. When I use {{$scope.message}} in the html, it displays the message correctly. This leads me to believe I'm using the $scope correctly (my understanding of $scope is still pretty limited). So what is boggling is that the .json is being correctly fetched (as I can see in my console), and the html can display the $scope.message but can't use the $scope.data from the .json.</li>\n<li>Lastly, all those random var lines in the controller's code was just a way for me to grab the part of the URL after the last \"/\". It's using just standard JS code, which I think is okay. Maybe it's not?</li>\n</ol>\n\n<p>Any help or insight regarding this would be greatly appreciated. Please let me know if you need any other information that'd be helpful for this!</p>\n\n<p>Here's the .json file contents below (as requested):</p>\n\n<pre><code>[\n    {\n        \"id\": \"n1-black\",\n        \"title\": \"n&amp;deg;1 (Black)\",\n        \"description\": \"TOTE IN TEXTURED CALFSKIN\\\\nBLACK\\\\n001\",\n        \"images\": [\n            \"images/handbags/details/n1-black-1.jpg\",\n            \"images/handbags/details/n1-black-2.jpg\",\n            \"images/handbags/details/n1-black-3.jpg\",\n            \"images/handbags/details/n1-black-4.jpg\"\n        ]\n    }\n]\n</code></pre>\n"}