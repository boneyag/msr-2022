{"tags": ["php", "regex"], "comments": [{"score": 2, "creation_date": 1533389854, "post_id": 51686131, "comment_id": 90334270, "body": "Check encoding of the input and your PHP file."}, {"score": 0, "creation_date": 1533391171, "post_id": 51686131, "comment_id": 90334622, "body": "The php file is UTF-8. I&#39;m not sure how to check the input but I tried the following but the result was false.  echo mb_detect_encoding($str, &#39;UTF-8&#39;, true) ;"}, {"score": 0, "creation_date": 1533391582, "post_id": 51686131, "comment_id": 90334745, "body": "UTF-8 has possible 2 modes of saving; one <i>with</i> a BOM (byte order mark) and one <i>without</i>. It could make a difference. @user3052443"}, {"score": 0, "creation_date": 1533391794, "post_id": 51686131, "comment_id": 90334788, "body": "Based on some guesswork I found that the character&#39;s <a href=\"https://www.fileformat.info/info/unicode/char/2020/index.htm\" rel=\"nofollow noreferrer\">HEX code is <code>2020</code></a>, which just so happens to be the hex code of the space character twice. I would suggest reading the file as ASCII-encoded. If you open the file in Notepad++ you should be able to see the encoding in the Encoding menu."}, {"score": 0, "creation_date": 1533393245, "post_id": 51686131, "comment_id": 90335172, "body": "I checked the file for a BOM but it wasn&#39;t there. I tried  $text = preg_replace(&quot;/2020/&quot;,&#39;&#39;, $text);  but it didn&#39;t help. I found a post that said to use $text = str_replace(chr(0), &quot;&quot;, $text); to convert to ascii but that didn&#39;t help either."}, {"score": 1, "creation_date": 1533399191, "post_id": 51686131, "comment_id": 90336770, "body": "long shot (will also remove other symbols e.g. &amp;euro; ): $cleaned = filter_var($yourString, FILTER_UNSAFE_RAW, FILTER_FLAG_STRIP_HIGH)"}, {"score": 0, "creation_date": 1533402557, "post_id": 51686131, "comment_id": 90337568, "body": "That seems to have done it. I will have to run it on the full file and check that nothing I need has been deleted but the ones I checked now look fine. Thank you for this fix. I&#39;ve been fighting it for weeks."}, {"score": 0, "creation_date": 1533409355, "post_id": 51686131, "comment_id": 90339231, "body": "I&#39;ve added it as an answer. Could you mark it as accepted answer if it works on your full file. Thanks"}], "answers": [{"score": 0, "last_activity_date": 1533409234, "answer_id": 51688705, "question_id": 51686131, "body": "<p>Try using PHPs built in filters e.g.</p>\n\n<p><code>$cleaned = filter_var($yourString, FILTER_UNSAFE_RAW, FILTER_FLAG_STRIP_HIGH);</code></p>\n\n<p>This should enable you to remove non ASCII characters (simplistically those above Hex 7E) such as dagger symbol without knowing their numeric code. However; it will also remove other non-ASCII characters such as the Euro currency symbol. If these are used and needed you would have to find some way of storing and reapplying these to your string.</p>\n"}], "is_answered": false, "answer_count": 1, "score": -2, "last_activity_date": 1533409234, "creation_date": 1533389768, "question_id": 51686131, "title": "How to remove this character", "body": "<p>I have an Excel file I'm extracting data from. Part of the text contains the character shown below. I've tried both preg_match and str_replace but they don't catch it. I'm assuming it is because I need the code for that character but I can't find that anywhere.</p>\n\n<pre><code>    \u2020\n</code></pre>\n\n<p>The actual line is below. Note that the missing closing span is how the file has it.</p>\n\n<pre><code>    &lt;p&gt;&lt;span style=\"font-size:11px\"&gt;\u2020Combined weight of 1/2 of total weight&lt;/p&gt;\n</code></pre>\n\n<p>These are the commands I've tried.</p>\n\n<pre><code>    $text = preg_replace(\"\u2020\",'',$text);\n    $text = str_replace(\"\u2020\",'',$text);\n</code></pre>\n\n<p>Would someone explain how to remove that character, please?</p>\n"}