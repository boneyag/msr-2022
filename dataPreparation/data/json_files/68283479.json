{"tags": ["python", "regex", "string", "extract", "re"], "comments": [{"score": 0, "creation_date": 1625650537, "post_id": 68283479, "comment_id": 120681106, "body": "The data you provided does not look like a string."}, {"score": 1, "creation_date": 1625650565, "post_id": 68283479, "comment_id": 120681116, "body": "That doesn&#39;t look like a string at all. Do you mean you have a string which contains <code>&quot;data=POLYGON ((1280 16068, 1294 16059, 1297 16060, 1300 16063, 1303 16065, 1308 16066, 1311 16068, 1314 16071, 1316 16074, 1316 16078, 1313 16081))&quot;</code>? And what&#39;s <code>data.extract</code>?"}, {"score": 1, "creation_date": 1625650660, "post_id": 68283479, "comment_id": 120681150, "body": "<code>re.search(r&#39;(\\([^()]+\\))&#39;, strn)</code> would trivially match the partenthesized list of numbers, but it probably not precise enough if you can have other input which contains parentheses which should not be extracted."}], "answers": [{"score": 2, "last_activity_date": 1625650774, "answer_id": 68283568, "question_id": 68283479, "body": "<p>Pretty sure regex isn't necessary here.</p>\n<p>Let's say your string is : <code>string = &quot;data=POLYGON ((1280 16068, 1294 16059, 1297 16060, 1300 16063, 1303 16065, 1308 16066, 1311 16068, 1314 16071, 1316 16074, 1316 16078, 1313 16081))&quot;</code></p>\n<p>In this case, the easier way would be to do :</p>\n<pre><code>res = &quot;(&quot;+string.split(&quot;(&quot;)[2][:-1]\n</code></pre>\n<p>output :</p>\n<pre><code>(1280 16068, 1294 16059, 1297 16060, 1300 16063, 1303 16065, 1308 16066, 1311 16068, 1314 16071, 1316 16074, 1316 16078, 1313 16081)\n</code></pre>\n"}, {"score": 0, "last_activity_date": 1625650993, "answer_id": 68283618, "question_id": 68283479, "body": "<p>if you want to use regex use package &quot;re&quot;</p>\n<pre><code> import re\n\n  data='POLYGON ((1280 16068, 1294 16059, 1297 16060, 1300 16063, 1303 16065, 1308 16066, 1311 16068, 1314 16071, 1316 16074, 1316 16078, 1313 16081))'\n  x = re.search(&quot;your regex here&quot;, txt)\n</code></pre>\n"}], "is_answered": true, "answer_count": 2, "score": 0, "last_activity_date": 1625650993, "creation_date": 1625650409, "question_id": 68283479, "title": "How to use regular expression using python", "body": "<p>I have the following string:</p>\n<pre><code>data='POLYGON ((1280 16068, 1294 16059, 1297 16060, 1300 16063, 1303 16065, 1308 16066, 1311 16068, 1314 16071, 1316 16074, 1316 16078, 1313 16081))'\n</code></pre>\n<p>I would like to extract only the numbers in the parenthesis (with one parenthesis, not two). How do I write an optimal regular expression for that?</p>\n<p>What I tried so far?</p>\n<pre><code>print(data.extract('.........(.*)'))\n</code></pre>\n<p>This does extract only the numbers, but I am not sure how to replace the (.)s.</p>\n<p>Required Output:</p>\n<pre><code>(1280 16068, 1294 16059, 1297 16060, 1300 16063, 1303 16065, 1308 16066, 1311 16068, 1314 16071, 1316 16074, 1316 16078, 1313 16081)\n</code></pre>\n"}