{"tags": ["java", "json", "serialization", "deserialization", "spring-integration"], "answers": [{"answer_id": 67938397, "question_id": 67938032, "body": "<p>You can create a new message from transformed and remove headers you don't need</p>\n<pre><code>Message&lt;?&gt; serialized = MessageBuilder.fromMessage(Transformers.toJson()\n                .transform(MessageBuilder\n                        .withPayload(new CustomObject())\n                        .build()))\n                .removeHeaders(&quot;json_resolvableType&quot;, &quot;json__TypeId__&quot;)\n                .build();\n</code></pre>\n"}, {"answer_id": 67938526, "question_id": 67938032, "body": "<p>See Header Filter component: <a href=\"https://docs.spring.io/spring-integration/docs/current/reference/html/message-transformation.html#header-filter\" rel=\"nofollow noreferrer\">https://docs.spring.io/spring-integration/docs/current/reference/html/message-transformation.html#header-filter</a>.</p>\n<p>It is not clear why you use that <code>transform()</code> API direct, and not as a configuration of an integration flow, but you definitely can get a gain from the <code>HeaderFilter</code> functionality.</p>\n<p>Consider to learn what is message flow and how to compose them with channels in between. All the info is present in the docs and in the EIP Book: <a href=\"https://www.enterpriseintegrationpatterns.com/\" rel=\"nofollow noreferrer\">https://www.enterpriseintegrationpatterns.com/</a></p>\n"}], "is_answered": true, "answer_count": 2, "last_activity_date": 1623420585, "question_id": 67938032, "title": "Spring Integration: how to configure ObjectToJsonTransformer to add json__TypeId__ with class name instead of canonical name", "body": "<p>I am trying to serialize a message (then deserialize it) and I do not want any of the headers json__TypeId__ or json_resolvableType to contain the canonical name of the class.\nThis is because I am sending the message over the network and I consider including the canonical name in the header a security concern.</p>\n<p>Here is just the relevant parts of the code that I am using:</p>\n<pre><code>package com.test;\n\n@Getter\n@ToString\nclass CustomObject {\n  String field;\n}\n</code></pre>\n<p>Serializing it with:</p>\n<pre><code>    Message&lt;?&gt; serialized = Transformers.toJson().transform(MessageBuilder.withPayload(new CustomObject()).build());\n</code></pre>\n<p>The serialized message looks like this:</p>\n<pre><code>GenericMessage [payload={&quot;field&quot;:null}, headers={id=496c110d-fdde-b03b-42c0-21f9671e29ed, json_resolvableType=com.test.CustomObject, json__TypeId__=class com.test.CustomObject, contentType=application/json, timestamp=1623417277287}]\n</code></pre>\n<p>I would prefer to have it like below, containing only the class name:</p>\n<pre><code>GenericMessage [payload={&quot;field&quot;:null}, headers={id=496c110d-fdde-b03b-42c0-21f9671e29ed, json__TypeId__=CustomObject, contentType=application/json, timestamp=1623417277287}]\n</code></pre>\n<p>or even without the json__TypeId__ header at all:</p>\n<pre><code>GenericMessage [payload={&quot;field&quot;:null}, headers={id=496c110d-fdde-b03b-42c0-21f9671e29ed, contentType=application/json, timestamp=1623417277287}]\n</code></pre>\n<p>I have a temporary solution, but I want to know if there is a more elegant one, like an annotation or configuration.\nBelow is the current programatic way of solving this.</p>\n<p>Make a class that extends the jackson mapper and the override the populateJavaTypes (which was adding the headers in the first place)</p>\n<pre><code>class JsonObjectMapperCustom extends Jackson2JsonObjectMapper {\n  @Override\n  public void populateJavaTypes(Map&lt;String, Object&gt; map, Object object) {\n  }\n}\n</code></pre>\n<p>And then serialize with:</p>\n<pre><code>    Message&lt;?&gt; serialized = new ObjectToJsonTransformer(new JsonObjectMapperCustom()).transform(message);\n</code></pre>\n<p>Note: I am using spring-integration-core 5.2.3.RELEASE</p>\n"}