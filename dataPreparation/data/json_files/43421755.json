{"tags": ["regex", "powershell"], "answers": [{"score": 11, "last_activity_date": 1622117573, "last_edit_date": 1622117573, "answer_id": 43421819, "question_id": 43421755, "body": "\n<p><strong>PowerShell's <code>-match</code> operator only ever looks for the <em>first</em> match (if any) per input string</strong>, because its purpose is to <em>test</em> for <em>a</em> (any) match, irrespective of whether there is more than one.</p>\n<p><sup>Note that a single <code>-match</code> expression can have <em>multiple</em> input strings, if the LHS is an <em>array</em>, in which case an <em>array of the elements that match</em> is returned; e.g.: <code>'foo', 'bar', 'baz' -match 'b'</code> yields array <code>'bar', 'baz'</code>. However, for each array <em>element</em> only a <em>single</em> match is again tested for, and the automatic <code>$Matches</code> variables is <em>not</em> populated in this case - see bottom.</sup></p>\n<p><sup>All commands below assume PSv3+, but could be made to work in v2 too.</sup></p>\n<p>You need to <strong>use the .NET framework's <a href=\"https://msdn.microsoft.com/en-US/library/System.Text.RegularExpressions.Regex.aspx\" rel=\"nofollow noreferrer\"><code>[regex]</code></a> class to get <em>multiple</em> matches</strong>:</p>\n<pre class=\"lang-powershell prettyprint-override\"><code>PS&gt; ([regex]::Matches('test20001231 20170415.txt', '(?&lt;=\\b|\\D)20\\d{6,6}(?=\\b|\\D)')).Value\n20001231\n20170415\n</code></pre>\n<p><code>[regex]::Matches()</code> outputs a collection of <a href=\"https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.match.aspx\" rel=\"nofollow noreferrer\"><code>[System.Text.RegularExpressions.Match]</code></a> instances<sup>[1]</sup> whose <code>.Value</code> properties contain the matches.</p>\n<p><sup>Note how <code>.Value</code> is applied to the entire <em>collection</em>, which in PSv3+\nautomatically returns the property values of the collection <em>members</em> as an array.</sup></p>\n<p>To get just the <em>count</em> of matches:</p>\n<pre class=\"lang-powershell prettyprint-override\"><code>PS&gt; ([regex]::Matches('test20001231 20170415.txt', '(?&lt;=\\b|\\D)20\\d{6,6}(?=\\b|\\D)')).Count\n2\n</code></pre>\n<hr />\n<p><strong>Another option is to use <code>Select-String -AllMatches</code></strong>, which outputs <code>[Microsoft.PowerShell.Commands.MatchInfo]</code> instances\nwhose <code>.Matches</code> property contains each line's collection of <code>[System.Text.RegularExpressions.Match]</code> instances:</p>\n<pre class=\"lang-powershell prettyprint-override\"><code>PS&gt; ('test20001231 20170415.txt' |\n    Select-String -AllMatches '(?&lt;=\\b|\\D)20\\d{6,6}(?=\\b|\\D)').Matches.Value\n20001231\n20170415\n</code></pre>\n<p>As above, substituting <code>.Count</code> for <code>.Value</code> outputs the number of matches.</p>\n<p>Note that use of <strong><code>Select-String</code> is a bit heavy-handed for use with a single input string</strong>, but it's <strong>the right tool to use for large input collections</strong>, such as a file's lines.</p>\n<hr />\n<p><strong>Optional reading: The automatic <code>$Matches</code> variable:</strong></p>\n<p>The automatic <code>$Matches</code> variable is populated (as of PSv5.1):</p>\n<ul>\n<li><em>only</em> when you use the <code>-match</code> operator</li>\n<li><em>and</em> the LHS is a <em>scalar</em>\n<ul>\n<li>by contrast, with an <em>array</em> on the LHS, <code>$Matches</code> is neither populated nor reset.</li>\n</ul>\n</li>\n<li><em>and</em> a match is found (<code>-match</code> returns <code>$true</code>)\n<ul>\n<li>if <em>no</em> match is found (<code>-match</code> returns <code>$false</code>), a preexisting <code>$Matches</code> value, if any, is left untouched.</li>\n</ul>\n</li>\n</ul>\n<p><code>$Matches</code> is a <code>[hashtable]</code> instance with the following entries:</p>\n<ul>\n<li>key <code>0</code>'s entry is the entire match - this key is by definition always present.</li>\n<li>key <code>&lt;n&gt;</code>'s entry is what the - unnamed - capture group with index <code>&lt;n&gt;</code> matched.</li>\n<li>key <code>&lt;name&gt;</code>'s entry is what <em>named</em> capture group <code>&lt;name&gt;</code> matched.</li>\n</ul>\n<p>The fact that <code>$Matches</code> (potentially) also contains capture-group values justifies its <em>plural</em> name - despite only relating to a <em>single</em> match of the given regex.</p>\n<hr />\n<p><sup>[1] To inspect the type of a single object or the type of the elements of a collection, pipe to <a href=\"https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.utility/get-member\" rel=\"nofollow noreferrer\">Get-Member</a>: <code>([regex]::Matches('foo', 'o')) | Get-Member</code><br />\nTo inspect the type of a collection <em>itself</em>, pass it to <code>Get-Member -InputObject</code>:<br />\n<code>Get-Member -InputObject ([regex]::Matches('foo', 'o'))</code></sup></p>\n"}], "is_answered": true, "answer_count": 1, "score": 3, "last_activity_date": 1622117573, "creation_date": 1492225505, "question_id": 43421755, "title": "PowerShell regex -match only matching once", "body": "<p>I'm trying to run through files named using alphabetical dates, and set file date-times accordingly. My code works fine, and I was ready to consider it complete, when I noticed this issue. My code should detect two dates and generate an error, but it doesn't. I've extracted the relevant code, and recreated the issue:</p>\n\n<pre><code>$str = \"test20001231 20170415.txt\"\n$match = ($str -match \"(?&lt;=\\b|\\D)20\\d{6,6}(?=\\b|\\D)\")\n\"$match\"\n\"$($Matches.length)\"\n\"$($Matches[0].ToString())\"\n</code></pre>\n\n<p>Gives this output:</p>\n\n<pre><code>True\n1\n20001231\n</code></pre>\n\n<p>My understanding of the regex code is that it should match everything that is an 8 digit number beginning with 20, wherever it is in the string, unless it is following or preceding another digit. So I am expecting $Matches.length to be 2.</p>\n\n<p>I've tested the regex code in a number of places online, and it matches the two dates as I expect: \n<a href=\"http://regexstorm.net/tester?p=%28%3f%3c%3d%5cb%7c%5cD%2920%5cd%7b6%2c6%7d%28%3f%3d%5cb%7c%5cD%29&amp;i=test20001231+20170415.txt\" rel=\"nofollow noreferrer\">http://regexstorm.net/tester?p=%28%3f%3c%3d%5cb%7c%5cD%2920%5cd%7b6%2c6%7d%28%3f%3d%5cb%7c%5cD%29&amp;i=test20001231+20170415.txt</a>\n<a href=\"http://www.phpliveregex.com/p/jLA\" rel=\"nofollow noreferrer\">http://www.phpliveregex.com/p/jLA</a></p>\n\n<p>The issue applies to PS and PS ISE. I've searches lots (I think), and not turned up anything helpful.\nAny suggestions?\nMany thanks in advance,\nDave</p>\n"}