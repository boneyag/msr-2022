{"tags": ["django", "session", "random", "django-queryset", "data-persistence"], "answers": [{"comments": [{"score": 1, "creation_date": 1553780588, "post_id": 55391036, "comment_id": 97518480, "body": "Thanks for the quick response. This sounds like what I&#39;m looking for. I&#39;m going to implement something similar tonight and update you. Much appreciated, Hybrid."}, {"score": 0, "creation_date": 1553961671, "post_id": 55391036, "comment_id": 97584008, "body": "I&#39;ve updated the view to reflect the above changes. Now I keep getting a &#39;str&#39; object has no attribute &#39;session&#39; error. Is there a specific way to activate the session or assign it? I&#39;ve checked my settings.py and Middleware and everything is default to Django 2.1 and working normally."}], "score": 1, "last_activity_date": 1553753615, "last_edit_date": 1553753615, "answer_id": 55391036, "question_id": 55390053, "body": "<p>Your issue is that your variable is not carried over from one request to the next. The best way to do this would be to use <code>request.session = ...</code> to set a variable, and then check it later and perform actions. Here is an example that you can expand on to make it to your liking:</p>\n\n<pre><code>import random\nfrom django.shortcuts import redirect\n\nclass TestView(View):\n    def get(self, request, *args, **kwargs):\n\n        gallery = request.session.get('gallery', None)\n        if (type(gallery) is list) and (len(gallery) == 0):  # When list is empty, clear session &amp; then redirect\n            del request.session['gallery']\n            request.session.modified = True\n            return redirect('&lt;your_redirect_url&gt;')\n        if gallery is None:  # If first visit to page, create gallery list\n            gallery = list(models.Photos.objects.all().values_list(\"partof__category\", flat=True))\n\n        # select random photo from list\n        last = len(gallery) -1\n        randomInt = random.randint(0, last)\n        randomPic = gallery[randomInt]\n        gallery.remove(randomPic)\n\n        request.session['gallery'] = gallery\n\n        return render(request, 'test.html', {})\n</code></pre>\n"}], "is_answered": true, "answer_count": 1, "score": 1, "last_activity_date": 1553948704, "creation_date": 1553746357, "question_id": 55390053, "title": "How can I return a new non-repeating item from a list in Django while keeping track of previous items?", "body": "<p>I'm working on an app where a user can select a category, which will return a random selection from that category. The main functionality I'm trying to implement is once an item is selected, it can no longer be randomly selected in session.</p>\n\n<p>For example, we have <strong>3 categories</strong> of photos: landscape, urban, and portraits, each with <strong>5 photos</strong>. A user selects urban, is then redirected to a details page with a random photo from urban category. He can either refresh the page or click a button to get a new photo from that category. When that category is out of new photos, he is redirected home.</p>\n\n<p>I am able to get my random item from the selected category through converting a queryset to a list, but the data isn't persisting. On every refresh the list I have resets, thus a previously selected photo can come up again, ignoring the the fact that I removed the item from the list after it was selected.</p>\n\n<p>Here's the views.py with the function responsible for this:</p>\n\n<pre><code>def randomPhoto(request, pk, **kwargs):\n\n    # queryset to get all photos from selected category\n    gallery = list(Photos.objects.filter(id=pk)\n    .values_list(\"partof__category\", flat=True))\n\n    # select random photo from list\n    last = len(gallery) -1\n    randomInt = random.randint(0, last)\n    randomPic = gallery[randomInt]\n\n    gallery.remove(randomPic)\n\n    if len(gallery) == 0:\n        return render(request, 'gallery/category_select.html')\n\n        photoDetails = {\n        'category' : Category.objects.get(id=pk),\n        'author' : Author.objects.get(tookin__category=randomPic),\n        'uploadedPhoto' : 'http://localhost:8000/media/' + \n    str(Photo.objects.get(category=randomPic).photoUpload),\n        'randomPic' : randomPic,\n        }\n\n        return render(request, 'gallery/random_photo.html', {'photoDetails': photoDetails})\n</code></pre>\n\n<p>The functionality I'm looking for is (where each number is an object/item in list):</p>\n\n<ul>\n<li>User selects urban category:\n\n<ul>\n<li>urban has the following items: [1, 2, 3, 4, 5]</li>\n<li>random [3] selected from urban</li>\n<li>urban now has [1, 2, 4, 5]</li>\n</ul></li>\n<li>User refreshes:\n\n<ul>\n<li>random [4] selected</li>\n<li>urban now has [1, 2, 5]    </li>\n</ul></li>\n<li>User refreshes:\n\n<ul>\n<li>random [2] selected</li>\n<li>urban now has [1, 5]</li>\n</ul></li>\n<li>User refreshes:\n\n<ul>\n<li>random [5] selected</li>\n<li>urban now has [1]</li>\n</ul></li>\n<li>User refreshes:\n\n<ul>\n<li>random [1] selected</li>\n<li>urban now has []</li>\n</ul></li>\n<li>User is redirected home</li>\n</ul>\n\n<p>I believe my problem lies in having to configure either sessions or cookies to have the data persist in an anonymous session. Eventually I will be adding a Users module so each user will have their browsing history saved but for now I want it to work just as an anonymous user.</p>\n\n<p>I've tried adding <code>SESSION_SAVE_EVERY_REQUEST = True</code> to <code>settings.py</code> and placing <code>request.session.modified = True</code> in my <code>views.py</code>, though I doubt I'm implementing them properly. I've read some SO questions on sessions and cookies but wasn't able to find something to work with my issue. The <a href=\"https://docs.djangoproject.com/en/2.1/topics/http/sessions/#using-sessions-in-views\" rel=\"nofollow noreferrer\">Django Sessions Doc</a> seemed interesting but overwhelming. I'm not sure where to begin trying to experiment with wiring the sessions aspect together.</p>\n\n<p>I am wondering if there's an easy/Pythonic way to achieve having my web app give me a non-repeating item from a list until none are left within the session.</p>\n"}