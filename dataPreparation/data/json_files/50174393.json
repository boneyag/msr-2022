{"tags": ["python", "django", "django-models"], "answers": [{"answer_id": 50174540, "question_id": 50174393, "body": "<p>You need to have a <code>Prospect</code> object instance. Model field attributes are &quot;Deferred Attributes&quot;.</p>\n<p>i.e</p>\n<pre><code>def get_context_data(self, *args, **kwargs):\n    context = super().get_context_data(*args, **kwargs)\n    prospect = Prospect.objects.filter(owner=self.request.user).first()\n    if prospect:\n        graphs = MakeGraphs(prospect.psuccess, prospect.hc_type)  # This should return a dict.\n        context.update(graphs)\n    return context\n</code></pre>\n"}], "is_answered": true, "answer_count": 1, "last_activity_date": 1626943974, "question_id": 50174393, "title": "Django, Deferred Attribute Error", "body": "<p>I am in a ListView that is named <code>PortfolioView</code>.  I am trying to retrieve all the items that a user has entered into the model, which is named \"Prospect\".  To do this, I try the following:</p>\n\n<pre><code>def get_context_data(self, **kwargs):\n    Prospect.objects.all().filter(owner__username=self.request.user)\n    context = MakeGraphs(Prospect.psuccess, Prospect.hc_type)\n    return super(PortfolioView, self).get_context_data(**context)\n</code></pre>\n\n<p>However, when I run the function <code>MakeGraphs</code> I get an error saying that the operation cannot be ran on a Deferred Attribute.  I don't understand why it is getting returned as a Deferred Attribute.  </p>\n\n<p>Suggestions?</p>\n\n<p>Edit: For clarity, here is an approximation of what I am doing in the <code>MakeGraphs</code> function:</p>\n\n<pre><code>def MakeGraphs(psuccess, hctype):\n    #This isn't what I am really doing, but this should give you a flavor for it...\n    newoutput1 = []\n    newoutput1 = []\n    for i in range(len(psuccess)):\n        newoutput1.append(psuccess[i]**2 + hctype[i])\n        newoutput2.append(psuccess[i]***3 + hctype[i]**2)\n\n    aaa = sum(newoutput1)\n    bbb = sum(newoutput2)\n\n    return {'aaa':aaa, 'bbb':bbb}\n</code></pre>\n\n<p>So, It takes in a list for both variables, and returns a single value for each of the returned variables.</p>\n\n<p>Edit 2:\nWhen I use the query:</p>\n\n<pre><code>def get_context_data(self, *args, **kwargs):\n    a = Prospect.objects.filter(owner=self.request.user).first()\n</code></pre>\n\n<p>I get the values for the first record where owner=user, as expected.  However, I would like to get all the values of psuccess and hc_type...</p>\n\n<p>if I try this:</p>\n\n<pre><code>def get_context_data(self, *args, **kwargs):\n    a = Prospect.objects.filter(owner=self.request.user)\n</code></pre>\n\n<p>I get a 'QuerySet' object has no attribute 'psuccess' error...</p>\n\n<p>Edit 3:\nFor attributes that have a single value returned, or where you have multiple attributes returned, and you can use them one at a time instead of all at once, the answer marked as the solution will work.</p>\n\n<p>However, if you need all of the values for each attribute in the form of a list you should use this for the query:\nyourvar = list(MyModel.objects.filter(owner=self.request.user).values_list('yourvar'))</p>\n"}