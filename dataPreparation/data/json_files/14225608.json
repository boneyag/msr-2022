{"tags": ["python", "regex"], "comments": [{"post_id": 14225608, "comment_id": 19733391, "body": "For future reference, you might find this useful: <a href=\"http://docs.python.org/2/howto/regex.html\" rel=\"nofollow noreferrer\">Regular Expression HOWTO</a> for Python 2.7."}], "answers": [{"answer_id": 14225633, "question_id": 14225608, "body": "<p>First you compile the regex, then you have to use it with <code>match</code>, <code>find</code>, or some other method to actually run it against some input.</p>\n\n<pre><code>import os\nimport re\nimport shutil\n\ndef test():\n    os.chdir(\"C:/Users/David/Desktop/Test/MyFiles\")\n    files = os.listdir(\".\")\n    os.mkdir(\"C:/Users/David/Desktop/Test/MyFiles2\")\n    pattern = re.compile(regex_txt, re.IGNORECASE)\n    for x in (files):\n        with open((x), 'r') as input_file:\n            for line in input_file:\n                if pattern.search(line):\n                    shutil.copy(x, \"C:/Users/David/Desktop/Test/MyFiles2\")\n                    break\n</code></pre>\n"}, {"answer_id": 14225639, "question_id": 14225608, "body": "<p>The REPL makes it easy to learn APIs.  Just run <code>python</code>, create an object and then ask for <code>help</code>:</p>\n\n<pre><code>$ python\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; help(re.compile(r''))\n</code></pre>\n\n<p>at the command line shows, among other things:</p>\n\n<blockquote>\n  <h1><code>search(...)</code></h1>\n  \n  <p><code>search(string[, pos[, endpos]])</code> --> match object or <code>None</code>.\n  Scan through string looking for a match, and return a corresponding\n  <code>MatchObject</code> instance. Return <code>None</code> if no position in the string matches.</p>\n</blockquote>\n\n<p>so you can do</p>\n\n<pre><code>regex = re.compile(regex_txt, re.IGNORECASE)\n\nmatch = regex.search(content)  # From your file reading code.\nif match is not None:\n  # use match\n</code></pre>\n\n<p>Incidentally,</p>\n\n<pre><code>regex_txt = \"facebook.com\"\n</code></pre>\n\n<p>has a <code>.</code> which matches any character, so <code>re.compile(\"facebook.com\").search(\"facebookkcom\") is not None</code> is true because <code>.</code> matches any character.  Maybe</p>\n\n<pre><code>regex_txt = r\"(?i)facebook\\.com\"\n</code></pre>\n\n<p>The <code>\\.</code> matches a literal <code>\".\"</code> character instead of treating <code>.</code> as a special regular expression operator.</p>\n\n<p>The <code>r\"...\"</code> bit means that the regular expression compiler gets the escape in <code>\\.</code> instead of the python parser interpreting it.</p>\n\n<p>The <code>(?i)</code> makes the regex case-insensitive like <code>re.IGNORECASE</code> but self-contained.</p>\n"}, {"answer_id": 14225664, "question_id": 14225608, "body": "<pre><code>if re.match(regex, content):\n  blah..\n</code></pre>\n<p>You could also use <code>re.search</code> depending on how you want it to match.</p>\n"}, {"answer_id": 14225745, "question_id": 14225608, "body": "<p>Regex's shouldn't really be used in this fashion - unless you want something more complicated than what you're trying to do - for instance, you could just normalise your content string and comparision string to be:</p>\n\n<pre><code>if 'facebook.com' in content.lower():\n    shutil.copy(x, \"C:/Users/David/Desktop/Test/MyFiles2\")\n</code></pre>\n"}, {"answer_id": 45089771, "question_id": 14225608, "body": "<h1 id=\"if-re.searchrpattern-string\"><code>if re.search(r'pattern', string):</code></h1>\n<p>Simple if-regex example:</p>\n<pre><code>if re.search(r'ing\\b', &quot;seeking a great perhaps&quot;):     # any words end with ing?\n    print(&quot;yes&quot;)\n</code></pre>\n<p>Complex if-regex example (pattern check, extract a substring, case insensitive):</p>\n<pre><code>match_object = re.search(r'^OUGHT (.*) BE$', &quot;ought to be&quot;, flags=re.IGNORECASE)\nif match_object:\n    assert &quot;to&quot; == match_object.group(1)     # what's between ought and be?\n</code></pre>\n<p>Notes:</p>\n<ul>\n<li><p>Use <code>re.search()</code> not re.match.  Match <a href=\"https://stackoverflow.com/a/8687988/673991\">restricts to the start</a> of strings, a <a href=\"https://stackoverflow.com/a/37363575/673991\">confusing</a> convention if you ask me. If you do want a string-starting match, use caret or <code>\\A</code> instead, <code>re.search(r'^...', ...)</code></p>\n</li>\n<li><p>Use <a href=\"https://stackoverflow.com/a/9576583/673991\">raw string</a> syntax <code>r'pattern'</code> for the first parameter. Otherwise you would need to double up backslashes, as in <code>re.search('ing\\\\b', ...)</code></p>\n</li>\n<li><p>In these examples, <code>'\\\\b'</code> or <code>r'\\b'</code> is a <a href=\"https://docs.python.org/library/re.html#regular-expression-syntax\" rel=\"nofollow noreferrer\">special sequence</a> meaning <a href=\"https://stackoverflow.com/a/44002041/673991\">word-boundary</a> for regex purposes. Not to be confused with <code>'\\b'</code> or <code>'\\x08'</code> backspace.</p>\n</li>\n<li><p><code>re.search()</code> returns <code>None</code> if it doesn't find anything, which is always <a href=\"https://stackoverflow.com/a/39984051/673991\">falsy</a>.</p>\n</li>\n<li><p><code>re.search()</code> returns a <a href=\"https://docs.python.org/library/re.html#match-objects\" rel=\"nofollow noreferrer\">Match object</a> if it finds anything,  which is always truthy.</p>\n</li>\n<li><p>a group is what matched inside parentheses</p>\n</li>\n<li><p>group numbering starts at 1</p>\n</li>\n<li><p><a href=\"https://docs.python.org/library/re.html\" rel=\"nofollow noreferrer\">Specs</a></p>\n</li>\n<li><p><a href=\"https://docs.python.org/howto/regex.html\" rel=\"nofollow noreferrer\">Tutorial</a></p>\n</li>\n</ul>\n"}], "is_answered": true, "answer_count": 5, "last_activity_date": 1626269641, "question_id": 14225608, "title": "Python: How to use RegEx in an if statement?", "body": "<p>I have the following code which looks through the files in one directory and copies files that contain a certain string into another directory, but I am trying to use Regular Expressions as  the string could be upper and lowercase or a mix of both. </p>\n\n<p>Here is the code that works, before I tried to use RegEx's</p>\n\n<pre><code>import os\nimport re\nimport shutil\n\ndef test():\n    os.chdir(\"C:/Users/David/Desktop/Test/MyFiles\")\n    files = os.listdir(\".\")\n    os.mkdir(\"C:/Users/David/Desktop/Test/MyFiles2\")\n    for x in (files):\n        inputFile = open((x), \"r\")\n        content = inputFile.read()\n        inputFile.close()\n        if (\"Hello World\" in content)\n            shutil.copy(x, \"C:/Users/David/Desktop/Test/MyFiles2\")\n</code></pre>\n\n<p>Here is my code when I have tried to use RegEx's</p>\n\n<pre><code>import os\nimport re\nimport shutil\n\ndef test2():\n    os.chdir(\"C:/Users/David/Desktop/Test/MyFiles\")\n    files = os.listdir(\".\")\n    os.mkdir(\"C:/Users/David/Desktop/Test/MyFiles2\")\n    regex_txt = \"facebook.com\"\n    for x in (files):\n        inputFile = open((x), \"r\")\n        content = inputFile.read()\n        inputFile.close()\n        regex = re.compile(regex_txt, re.IGNORECASE)\n</code></pre>\n\n<p>Im guessing that I need a line of code that is something like</p>\n\n<pre><code>if regex = re.compile(regex_txt, re.IGNORECASE) == True\n</code></pre>\n\n<p>But I cant seem to get anything to work, if someone could point me in the right direction it would be appreciated. </p>\n"}