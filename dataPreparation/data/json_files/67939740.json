{"tags": ["java", "json", "spring", "jackson"], "comments": [{"score": 0, "creation_date": 1623426851, "post_id": 67939740, "comment_id": 120084778, "body": "How does OptionTypeIdResolver looks like?"}, {"score": 0, "creation_date": 1623428750, "post_id": 67939740, "comment_id": 120085518, "body": "@notescrew - added the definition"}], "answers": [{"comments": [{"score": 0, "creation_date": 1623584812, "post_id": 67940539, "comment_id": 120115651, "body": "Thanks for responding. Issue actually was with the extra field &#39;titleName&#39; I was sending in my POST. It was mistake on my part and actually the error message did say that too, however I kept thinking that it had something to do with Option."}, {"score": 0, "creation_date": 1623584932, "post_id": 67940539, "comment_id": 120115681, "body": "For reference only, I added below code to my service layer to get a json view of the post object and that helped with the troubleshooting: <code>import com.fasterxml.jackson.databind.ObjectMapper;</code> <code>ObjectMapper mapper = new ObjectMapper();</code> <code>String projectString = mapper.writeValueAsString(project);</code> <code>log.info(projectString);</code>"}], "score": 0, "last_activity_date": 1623429082, "answer_id": 67940539, "question_id": 67939740, "body": "<p>Map&lt;String,Option&gt;</p>\n<pre><code>String = key\nOption = Object\nwould be in this json format\n{\n  &quot;String&quot;:{\n       //option object definition here\n  }\n}\n</code></pre>\n<p>Your <strong>&quot;options&quot;</strong> field in this case is  taking a <strong>List&lt;Map&lt;String,Option&gt;&gt;</strong>  but not <strong>Map&lt;String,Option&gt;</strong> which is defined in your <strong>[Project entity table]</strong></p>\n"}], "is_answered": false, "answer_count": 1, "score": 0, "last_activity_date": 1623429082, "creation_date": 1623425482, "question_id": 67939740, "title": "JSON representation of Map&lt;String, Object&gt;", "body": "<p>I have been provided an API endpoint and I am trying to test it out using Postman.\nAPI has a Map&lt;String,Object&gt; which I am not sure how to represent in JSON format for Postman to be able to use.</p>\n<p>Here is the Entity:</p>\n<pre><code>import java.util.Map;\nimport com.abcd.xyz.option.Option;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport lombok.ToString;\n\n@Getter @Setter @NoArgsConstructor @ToString\npublic class Project {\n\n    private String name;\n    private String shortName;\n    private String idName;\n\n    private String language;\n    private String buildTool;\n    private String k8sid;\n    private String dnsId;\n    private String jenkinsUrl;\n\n    private Map&lt;String, Option&gt; options;\n\n}\n</code></pre>\n<p>..............</p>\n<p>Option definition:</p>\n<pre><code>import java.util.List;\n\nimport com.abcd.xyz.bundling.ResourceFile;\nimport com.abcd.xyz.project.Project;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;\n\n@JsonTypeInfo(use=JsonTypeInfo.Id.CUSTOM, include=JsonTypeInfo.As.PROPERTY, property=&quot;option&quot;)\n@JsonTypeIdResolver(OptionTypeIdResolver.class)\npublic interface Option {\n    @JsonIgnore\n    public List&lt;ResourceFile&gt; getFiles(Project project);\n}\n</code></pre>\n<p>......................</p>\n<p>OptionTypeIdResolver:</p>\n<pre><code>import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\nimport com.fasterxml.jackson.databind.DatabindContext;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\n\n// Handles the conversion of the &quot;option&quot; property of an Option class into JSON, or from\n// JSON into the correct Option type.\npublic class OptionTypeIdResolver implements TypeIdResolver {\n    private static final String OPTION_PACKAGE = Option.class.getPackage().getName();\n    private JavaType baseType;\n\n    @Override\n    public void init(JavaType baseType) {\n        this.baseType = baseType;\n    }\n\n    @Override\n    public Id getMechanism() {\n        return Id.CUSTOM;\n    }\n\n    @Override\n    public String idFromValue(Object obj) {\n        return idFromValueAndType(obj, obj.getClass());\n    }\n\n    @Override\n    public String idFromBaseType() {\n        return idFromValueAndType(null, baseType.getRawClass());\n    }\n\n    @Override\n    public String idFromValueAndType(Object obj, Class&lt;?&gt; clazz) {\n        // Convert java class name to simple name, ie package.GradleOption -&gt; gradle\n        String simpleName = clazz.getSimpleName().substring(0, 1).toLowerCase() + clazz.getSimpleName().substring(1).replaceAll(&quot;Option$&quot;,&quot;&quot;);\n        if ( clazz.getName().startsWith(OPTION_PACKAGE) ) {\n            return simpleName;\n        }\n        throw new IllegalStateException(&quot;class &quot; + clazz + &quot; is not in the package &quot; + OPTION_PACKAGE);\n    }\n\n    @Override\n    public JavaType typeFromId(DatabindContext context, String type) {\n        Class&lt;?&gt; clazz;\n        // Convert simple name to java class name, ie gradle -&gt; package.GradleOption\n        String javaType = type.substring(0, 1).toUpperCase() + type.substring(1) + &quot;Option&quot;;\n        String clazzName = OPTION_PACKAGE + &quot;.&quot; + javaType;\n        try {\n            clazz = TypeFactory.defaultInstance().findClass(clazzName);\n        } catch (ClassNotFoundException e) {\n            throw new IllegalStateException(&quot;cannot find class '&quot; + clazzName + &quot;'&quot;);\n        }\n        return TypeFactory.defaultInstance().constructSpecializedType(baseType, clazz);\n    }\n\n    @Override\n    public String getDescForKnownTypeIds() {\n        return &quot;&quot;;\n    }\n}\n</code></pre>\n<p>.................</p>\n<p>Here is the POST body I am using:</p>\n<pre><code>{\n  &quot;buildTool&quot;: &quot;gradle&quot;,\n  &quot;dnsId&quot;: &quot;demo005&quot;,\n  &quot;idName&quot;: &quot;demo005&quot;,\n  &quot;jenkinsUrl&quot;: &quot;&quot;,\n  &quot;k8sid&quot;: &quot;er5t-eks-oGWFNxUs&quot;,\n  &quot;language&quot;: &quot;java&quot;,\n  &quot;name&quot;: &quot;demo005&quot;,\n  &quot;shortName&quot;: &quot;f&quot;,\n  &quot;titleName&quot;: &quot;demo004&quot;,\n  &quot;options&quot;: [\n      {&quot;java&quot;: {\n          &quot;JavaOption&quot;: {\n              &quot;group&quot;: &quot;com.example&quot;,\n              &quot;name&quot;: &quot;f&quot;\n          }\n        }\n      }\n  ]\n}\n</code></pre>\n<p>..................</p>\n<p>Error I get is :</p>\n<pre><code>o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Missing type id when trying to resolve subtype of [simple type, class com.abcd.xyz.option.Option]: missing type id property 'option'; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [simple type, class com.abcd.xyz.option.Option]: missing type id property 'option'\n at [Source: (PushbackInputStream); line: 10, column: 16] (through reference chain: com.abcd.xyz.project.Project[&quot;titleName&quot;])]\n</code></pre>\n<p>What am I getting wrong in the formatting..?</p>\n"}