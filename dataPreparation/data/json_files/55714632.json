{"tags": ["django", "unique-constraint"], "comments": [{"score": 0, "creation_date": 1593629338, "post_id": 55714632, "comment_id": 110851223, "body": "Please pay special attention to the &quot;Minimal&quot; section here: <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">stackoverflow.com/help/minimal-reproducible-example</a>"}], "answers": [{"comments": [{"score": 0, "creation_date": 1555443914, "post_id": 55715132, "comment_id": 98111616, "body": "Excuse my ignorance, but where do I put this code? Also, should it be SkillGroup.save()? Thank you."}, {"score": 0, "creation_date": 1555444130, "post_id": 55715132, "comment_id": 98111704, "body": "You should put this code around the statement that rise the target excepion."}, {"score": 0, "creation_date": 1555445759, "post_id": 55715132, "comment_id": 98112400, "body": "I assumed the exception is risen when the app tries to write the data to the DB. (Postgres) I am using a generic class-based CreateView so I am not exactly sure where the exception is specifically raised. Thanks."}, {"score": 0, "creation_date": 1555466593, "post_id": 55715132, "comment_id": 98117865, "body": "Modified, but still getting default message. I tried removing the If clause in the event the text was not an exact match and still got default message. Also added from django.db import IntegrityError at top of views.py."}, {"score": 0, "creation_date": 1555517430, "post_id": 55715132, "comment_id": 98142406, "body": "I have posted related above."}, {"score": 0, "creation_date": 1555519345, "post_id": 55715132, "comment_id": 98143369, "body": "Can you show the stack trace of such exception? I needed to recommend a more accurate place to put that code. Perhaps you need to put that code in the save method of the form"}, {"score": 0, "creation_date": 1555534534, "post_id": 55715132, "comment_id": 98149844, "body": "I tried adding it with no change. How would I get a &quot;stack trace&quot;? Should I make it so the system errors out instead of handling it with current message? Thanks again!!"}, {"score": 0, "creation_date": 1555535812, "post_id": 55715132, "comment_id": 98150264, "body": "Yes, copy the system error an paste it in your question, please."}, {"score": 0, "creation_date": 1555557300, "post_id": 55715132, "comment_id": 98154703, "body": "Copied. Tried changing to see if err == &#39;duplicate key value violates unique constraint &quot;unique_skillgroup&quot;&#39; and the longer text beginning with that. Hope this is what you were looking for."}, {"score": 0, "creation_date": 1555595436, "post_id": 55715132, "comment_id": 98171855, "body": "Ok, by your stack trace I can see the lowest point where you can put this code is in the model save method. Just copy and paste the method <code>save</code> from the answer&#39;s Update 2 to your model."}, {"score": 0, "creation_date": 1555640217, "post_id": 55715132, "comment_id": 98187576, "body": "I had tried something similar earlier without luck. I just moved the def save() to the model and still no change. I really appreciate the effort. I do not understand why this is so elusive."}, {"score": 0, "creation_date": 1555680364, "post_id": 55715132, "comment_id": 98199701, "body": "Based on some reading in the Django documentation, I tried changing it to with no success: ```     def save(self, *args, **kwargs):         try:             result = super().save(*args, **kwargs)         except IntegrityError as err:             if str(err) == &quot;Skill group with this User and Skill group already exists.&quot;:                 raise IntegrityError(&quot;Skill Group already in use.&quot;)             raise         else:             return result ```"}, {"score": 0, "creation_date": 1594804828, "post_id": 55715132, "comment_id": 111252113, "body": "This will raise the original error anyway! cause you are raising another error, right inside the exception handling section! So it will show the original error AND the overrode one! saying &quot;during handling of the above exception, another exception occurred&quot;"}, {"score": 0, "creation_date": 1594919257, "post_id": 55715132, "comment_id": 111302747, "body": "@Hamidreza I&#39;ve updated the answer with a section related to your comment."}], "score": 2, "last_activity_date": 1598970244, "last_edit_date": 1598970244, "answer_id": 55715132, "question_id": 55714632, "body": "<p>You could catch the exception and re-raise it with your custom message:</p>\n<pre><code>try:\n    # This is the statement that raises the exception\nexcept IntegrityError as err:\n    if str(err) == &quot;Skill group with this User and Skill group already exists.&quot;:\n        raise IntegrityError(&quot;Skill Group already in use.&quot;)\n    # Propagate the exception if the condition is not matched.\n    raise\n</code></pre>\n<hr />\n<h3>Update</h3>\n<p><code>CreateView</code> inherits (among others) form <code>ModelFormMixin</code> which has a method that, according to the <a href=\"https://docs.djangoproject.com/en/2.2/ref/class-based-views/mixins-editing/#django.views.generic.edit.ModelFormMixin\" rel=\"nofollow noreferrer\">docs</a>:</p>\n<blockquote>\n<p><strong>form_valid(form)</strong></p>\n<p>Saves the form instance, sets the current object for the view, and redirects to get_success_url().</p>\n</blockquote>\n<p>So you could:</p>\n<pre><code>class YourView(CreateView):\n\n    def form_valid(self, form):\n        try:\n            result = super().form_valid(form)\n        except IntegrityError as err:\n            if str(err) == &quot;Skill group with this User and Skill group already exists.&quot;:\n                raise IntegrityError(&quot;Skill Group already in use.&quot;)\n            # Propagate exception is candition is not matched.\n            raise\n         else:\n            return result\n</code></pre>\n<hr />\n<h2>Update 2</h2>\n<p>Perhaps you could instead put that code in your form's save method.</p>\n<pre><code>class SkillGroupForm(forms.ModelForm):\n\n    # ...\n\n    def save(**kwargs):\n        try:\n            result = super().save(**kwargs)\n        except IntegrityError as err:\n            if str(err) == &quot;Skill group with this User and Skill group already exists.&quot;:\n                raise IntegrityError(&quot;Skill Group already in use.&quot;)\n            raise\n        else:\n            return result\n    \n</code></pre>\n<hr />\n<h2>Update 3: Answering @Hamidreza's comment:</h2>\n<blockquote>\n<p>This will raise the original error anyway! cause you are raising another error, right inside the exception handling section! So it will show the original error AND the overrode one! saying &quot;during handling of the above exception, another exception occurred&quot;</p>\n</blockquote>\n<p>Of course if you look at the stack trace you will see both exceptions as you  pointed out. BUT ...   this only will happen if you do not handle the exception.</p>\n<p>The point here is that the OP wants to change the error message that it's propagated and for that purpose, the solution is good enough. For instance:</p>\n<pre><code>def foo(): \n   try: \n       1 / 0 \n   except ZeroDivisionError: \n       raise ZeroDivisionError(&quot;My very own error message&quot;)\n\ntry: \n   foo() \nexcept ZeroDivisionError as err: \n   print(err)  # Prints: &quot;My very own error message&quot;\n</code></pre>\n<p>So:</p>\n<pre><code>try:\n   form.valid_form()\nexcept IntegrityError as err:\n   # Here err will contains the error the OP wants if it is the case.\n</code></pre>\n"}, {"score": 0, "last_activity_date": 1594999241, "answer_id": 62956998, "question_id": 55714632, "body": "<p>I had a similar problem in Django and I solved it with this solution: 1)catch the error  2)change the error message and 3)raise it:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def save(self, *args, **kwargs):\n    try:\n      result = super().save(*args, **kwargs)\n    except IntegrityError as err:\n      if str(err) == &quot;Skill group with this User and Skill group already exists.&quot;:\n        err.agrs = (&quot;Skill Group already in use.&quot;,)  # You can add '+ err.args[1:]' at the end of this line but for more assurance, you can check the content of args and be sure that you are not missing anything here!\n      raise\n    else:\n      return result\n</code></pre>\n<p>Just remember that <code>err.args</code> is a tuple.</p>\n"}], "is_answered": true, "answer_count": 2, "score": 5, "last_activity_date": 1598970244, "creation_date": 1555439830, "question_id": 55714632, "title": "Is it possible to override the error message that Django shows for UniqueConstraint error? (IntegrityError)", "body": "<p>Using UniqueConstraint on multiple fields and it is working properly, but I want to override the error message.</p>\n\n<p>Have gone through many postings, some of them quite dated, and none seem to specify how to override this particular instance. (IntegrityError)</p>\n\n<p>Fields are User and Skill Group. I would like error message to simply say \"Skill Group already in use.\" It currently reads \"Skill group with this User and Skill group already exists.\" Thanks.</p>\n\n<p><strong>Updated:</strong>\nThought I should post related code:</p>\n\n<pre><code>models.py\nclass SkillGroup(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    skill_group = models.CharField(max_length=35)\n    sequence = models.IntegerField(default=999)\n\n    class Meta:\n        constraints = [\n            models.UniqueConstraint(fields=['user', 'skill_group'], name='unique_skillgroup'),\n        ]\n\n    def __str__(self):\n        return self.skill_group\n\n    def get_absolute_url(self):\n        return reverse('skillgroup-list')\n\nforms.py\nclass SkillGroupForm(forms.ModelForm):\n\n    class Meta:\n        model = SkillGroup\n        fields = ('user', 'skill_group')\n        widgets = {\n            'user': forms.HiddenInput,\n        }\n\nviews.py\nclass SkillGroupCreateView(LoginRequiredMixin, CreateView):\n    model = SkillGroup\n    form_class = SkillGroupForm\n\n    def get_initial(self):\n        return {'user': self.request.user}\n\n    def form_valid(self, form):\n        try:\n            result = super().form_valid(form)\n        except IntegrityError as err:\n            if str(err) == \"Skill group with this User and Skill group already exists.\":\n                raise IntegrityError(\"Skill Group already in use.\")\n            raise\n        else:\n            return result\n</code></pre>\n\n<pre><code>IntegrityError at /skillgroup/create/\nduplicate key value violates unique constraint \"unique_skillgroup\"\nDETAIL:  Key (user_id, skill_group)=(1, Quality Assurance) already exists.\nRequest Method: POST\nRequest URL:    http://localhost:8000/skillgroup/create/\nDjango Version: 2.2\nException Type: IntegrityError\nException Value:    \nduplicate key value violates unique constraint \"unique_skillgroup\"\nDETAIL:  Key (user_id, skill_group)=(1, Quality Assurance) already exists.\nException Location: C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\backends\\utils.py in _execute, line 84\nPython Executable:  C:\\Users\\CHRIST~1\\Envs\\bcs\\Scripts\\python.exe\nPython Version: 3.7.2\nPython Path:    \n['C:\\\\Users\\\\Christopher George\\\\bcs\\\\basicrecruiter',\n 'C:\\\\Users\\\\CHRIST~1\\\\Envs\\\\bcs\\\\Scripts\\\\python37.zip',\n 'C:\\\\Users\\\\CHRIST~1\\\\Envs\\\\bcs\\\\DLLs',\n 'C:\\\\Users\\\\CHRIST~1\\\\Envs\\\\bcs\\\\lib',\n 'C:\\\\Users\\\\CHRIST~1\\\\Envs\\\\bcs\\\\Scripts',\n 'c:\\\\users\\\\christopher '\n 'george\\\\appdata\\\\local\\\\programs\\\\python\\\\python37-32\\\\Lib',\n 'c:\\\\users\\\\christopher '\n 'george\\\\appdata\\\\local\\\\programs\\\\python\\\\python37-32\\\\DLLs',\n 'C:\\\\Users\\\\CHRIST~1\\\\Envs\\\\bcs',\n 'C:\\\\Users\\\\CHRIST~1\\\\Envs\\\\bcs\\\\lib\\\\site-packages']\nServer time:    Thu, 18 Apr 2019 02:53:51 +0000\n</code></pre>\n\n<pre><code>Traceback:\nEnvironment:\n\n\nRequest Method: POST\nRequest URL: http://localhost:8000/skillgroup/create/\n\nDjango Version: 2.2\nPython Version: 3.7.2\nInstalled Applications:\n['recruiter.apps.RecruiterConfig',\n 'crispy_forms',\n 'phone_field',\n 'django.contrib.admin',\n 'django.contrib.auth',\n 'django.contrib.contenttypes',\n 'django.contrib.sessions',\n 'django.contrib.messages',\n 'django.contrib.staticfiles']\nInstalled Middleware:\n['django.middleware.security.SecurityMiddleware',\n 'django.contrib.sessions.middleware.SessionMiddleware',\n 'django.middleware.common.CommonMiddleware',\n 'django.middleware.csrf.CsrfViewMiddleware',\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\n 'django.contrib.messages.middleware.MessageMiddleware',\n 'django.middleware.clickjacking.XFrameOptionsMiddleware']\n\n\n\nTraceback:\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\backends\\utils.py\" in _execute\n  84.                 return self.cursor.execute(sql, params)\n\nThe above exception (duplicate key value violates unique constraint \"unique_skillgroup\"\nDETAIL:  Key (user_id, skill_group)=(1, Quality Assurance) already exists.\n) was the direct cause of the following exception:\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\core\\handlers\\exception.py\" in inner\n  34.             response = get_response(request)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\core\\handlers\\base.py\" in _get_response\n  115.                 response = self.process_exception_by_middleware(e, request)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\core\\handlers\\base.py\" in _get_response\n  113.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\views\\generic\\base.py\" in view\n  71.             return self.dispatch(request, *args, **kwargs)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\contrib\\auth\\mixins.py\" in dispatch\n  52.         return super().dispatch(request, *args, **kwargs)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\views\\generic\\base.py\" in dispatch\n  97.         return handler(request, *args, **kwargs)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\views\\generic\\edit.py\" in post\n  172.         return super().post(request, *args, **kwargs)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\views\\generic\\edit.py\" in post\n  142.             return self.form_valid(form)\n\nFile \"C:\\Users\\Christopher George\\bcs\\basicrecruiter\\recruiter\\views.py\" in form_valid\n  104.         return super().form_valid(form)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\views\\generic\\edit.py\" in form_valid\n  125.         self.object = form.save()\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\forms\\models.py\" in save\n  458.             self.instance.save()\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\models\\base.py\" in save\n  741.                        force_update=force_update, update_fields=update_fields)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\models\\base.py\" in save_base\n  779.                 force_update, using, update_fields,\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\models\\base.py\" in _save_table\n  870.             result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\models\\base.py\" in _do_insert\n  908.                                using=using, raw=raw)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\models\\manager.py\" in manager_method\n  82.                 return getattr(self.get_queryset(), name)(*args, **kwargs)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\models\\query.py\" in _insert\n  1186.         return query.get_compiler(using=using).execute_sql(return_id)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py\" in execute_sql\n  1332.                 cursor.execute(sql, params)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\backends\\utils.py\" in execute\n  99.             return super().execute(sql, params)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\backends\\utils.py\" in execute\n  67.         return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\backends\\utils.py\" in _execute_with_wrappers\n  76.         return executor(sql, params, many, context)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\backends\\utils.py\" in _execute\n  84.                 return self.cursor.execute(sql, params)\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\utils.py\" in __exit__\n  89.                 raise dj_exc_value.with_traceback(traceback) from exc_value\n\nFile \"C:\\Users\\CHRIST~1\\Envs\\bcs\\lib\\site-packages\\django\\db\\backends\\utils.py\" in _execute\n  84.                 return self.cursor.execute(sql, params)\n\nException Type: IntegrityError at /skillgroup/create/\nException Value: duplicate key value violates unique constraint \"unique_skillgroup\"\nDETAIL:  Key (user_id, skill_group)=(1, Quality Assurance) already exists.\n</code></pre>\n\n<p><strong>Update 2:</strong>\n Based on some reading in the Django documentation, I tried changing it to with no success:</p>\n\n<pre><code>def save(self, *args, **kwargs):\n    try:\n      result = super().save(*args, **kwargs)\n    except IntegrityError as err:\n      if str(err) == \"Skill group with this User and Skill group already exists.\":\n        raise IntegrityError(\"Skill Group already in use.\")\n      raise\n    else:\n      return result\n</code></pre>\n"}