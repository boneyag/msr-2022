{"tags": ["javascript", "django", "django-rest-framework", "cors", "axios"], "comments": [{"score": 0, "creation_date": 1552333185, "post_id": 55108410, "comment_id": 96961283, "body": "Does it work with CORS_ORIGIN_ALLOW_ALL = False?"}], "answers": [{"comments": [{"score": 0, "creation_date": 1552332676, "post_id": 55108847, "comment_id": 96961056, "body": "Thanks for the idea! I just tried this, it seems to break my login function and causes it to require me to hit login twice? Then once I have my token, I get a 401, unauthorized. Thoughts?"}, {"score": 0, "creation_date": 1552335630, "post_id": 55108847, "comment_id": 96962343, "body": "This edit is causing the following error:  code 400, message Bad request syntax (&#39;{&quot;headers&quot;:{&quot;Authorization&quot;:&quot;Bearer \\\\&quot;TOKEN\\\\&quot;&quot;}}OPTIONS /api/TestConnection/ HTTP/1.1&#39;)  Where token is the JWT Token"}], "score": 0, "last_activity_date": 1552333079, "last_edit_date": 1552333079, "answer_id": 55108847, "question_id": 55108410, "body": "<p>I Have had a similar issue with a <code>ReactNative</code> app which was happening due to ReactNative using IP <code>10.0.2.2</code> for localhost (I do not remember the details or why).  I solved it by adding to my class.</p>\n\n<pre><code>  componentWillMount() {\n    axios.defaults.baseURL = 'http://10.0.2.2:8000/api/';\n    axios.defaults.timeout = 1500;\n  }\n</code></pre>\n\n<p>I do not know if this is the right IP but may be worth looking at.</p>\n\n<p><strong>EDIT</strong></p>\n\n<pre><code>handleRequest() {\n    const payload = { username: this.state.username, password: this.state.password } \n    axios\n      .post('login/', payload)\n      .then(response =&gt; {\n        const { token, user } = response.data;\n\n        // We set the returned token as the default authorization header\n        axios.defaults.headers.common.Authorization = `Token ${token}`;\n\n        // Navigate to the home screen\n        Actions.main();\n      })\n      .catch(error =&gt; {\n            console.log(error)\n      });\n}\n</code></pre>\n\n<p>By saving the Token within my headers it is always sent.</p>\n"}, {"comments": [{"score": 0, "creation_date": 1552333734, "post_id": 55109212, "comment_id": 96961507, "body": "Thank you for the idea, unfortunately it just changed the error to blocking <a href=\"http://localhost:3000\" rel=\"nofollow noreferrer\">localhost:3000</a>"}, {"score": 0, "creation_date": 1552333826, "post_id": 55109212, "comment_id": 96961546, "body": "get rid of the whitelist for now and see if that works. its a bit contradicting to have allow all on in addition to whitelist"}, {"score": 0, "creation_date": 1552334294, "post_id": 55109212, "comment_id": 96961778, "body": "Unfortunately,  this had no effect either."}], "score": 0, "last_activity_date": 1552333367, "answer_id": 55109212, "question_id": 55108410, "body": "<p>The error says \"from origin '<a href=\"http://localhost:3000\" rel=\"nofollow noreferrer\">http://localhost:3000</a>'\" and to \"check the cors policy\"</p>\n\n<p>I see your CORS policy is </p>\n\n<pre><code>CORS_ORIGIN_WHITELIST = (\n    'localhost:8000',\n    'localhost:3000',\n    'localhost'\n)\n</code></pre>\n\n<p>maybe try providing the full http url. so</p>\n\n<pre><code>CORS_ORIGIN_WHITELIST = (\n    'localhost:8000',\n    'http://localhost:3000',\n    'localhost'\n)\n</code></pre>\n"}, {"score": 0, "last_activity_date": 1552350482, "answer_id": 55112350, "question_id": 55108410, "body": "<p>I solved it! The solution was very simple(of course),</p>\n\n<p>For the request I needed to use part of @HenryM 's solution.</p>\n\n<p>First I needed to establish the default url:</p>\n\n<pre><code>axios.defaults.baseURL = 'http://127.0.0.1:8000/api/';\n</code></pre>\n\n<p>Then I save the payload and header to const variables:</p>\n\n<pre><code>const header = {\n  headers:{\n    'Authorization': \"Bearer \" + localStorage.getItem('JWTAccess')\n  }\n}\nconst payload = {\n  testValue: \"Hello API\"\n}\n</code></pre>\n\n<p>Finally, the main issue was that my parameters were in the wrong order:</p>\n\n<pre><code>axios.post(\"TestConnection/\", payload, header)\n    .then(response =&gt; {\n      console.log(response)\n      })\n    .catch(error =&gt; {\n      console.log(error);\n</code></pre>\n\n<p>Apparently the propper order, at least when using Django Rest Framework, is payload then header!!!</p>\n\n<p>Thank you to everyone who tired to help!\nThis was the article that ended up helping me: <a href=\"https://www.techiediaries.com/django-vuejs-api-views/\" rel=\"nofollow noreferrer\">https://www.techiediaries.com/django-vuejs-api-views/</a></p>\n"}], "is_answered": true, "answer_count": 3, "score": 1, "last_activity_date": 1552350482, "creation_date": 1552329877, "question_id": 55108410, "title": "Django Rest Framework CORS blocking XMLHttpRequest", "body": "<p>I have set up my CORS policy using Django-cors-headers with the following settings:</p>\n\n<pre><code>APPEND_SLASH=False\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True\nCORS_ORIGIN_WHITELIST = (\n    'localhost:8000',\n    'localhost:3000',\n    'localhost'\n)\n</code></pre>\n\n<p>I have also added it to installed_apps and middleware.</p>\n\n<p>Now I am making a React app for the front end and using AXIOS for my API requests. When I make an API request to log in to my app the CORS policy allows it. But, if I make an API request that requires a Token, I get:</p>\n\n<blockquote>\n  <p>Access to XMLHttpRequest at 'localhost:8000/api/TestConnection/' from origin '<a href=\"http://localhost:3000\" rel=\"nofollow noreferrer\">http://localhost:3000</a>' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.</p>\n</blockquote>\n\n<p>It seems that I need to allow XMLHttpRequest for supported protocol schemes but I cannot find anything in the pypi documentation about this.</p>\n\n<p>EDIT:\nHere is the AXIOS Request:</p>\n\n<pre><code>axios.post(\"localhost:8000/api/TestConnection/\",\n    {headers:\n      {\n          'Authorization': \"Bearer \" + localStorage.getItem('JWTAccess')\n      }\n    },\n    { \n      testString: 'Hello API'\n    })\n    .then(response =&gt; {\n      console.log(response)\n      })\n    .catch(error =&gt; {\n      console.log(error);\n})\n</code></pre>\n\n<p>Thank you!</p>\n"}