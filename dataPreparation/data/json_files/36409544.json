{"tags": ["json", "postgresql", "psql", "jsonb"], "answers": [{"score": 1, "last_activity_date": 1459797248, "answer_id": 36410992, "question_id": 36409544, "body": "<p>It depends a bit if you want a true foreign key or not. You can't actually create a foreign get to <code>json-&gt;userId</code>. If you want to be able to index against it for fast joins, you can absolutely create a functional index on <code>json-&gt;userId</code> or you can create a GIN index on the entire document. </p>\n\n<p>If you do actually want to create a foreign key and have appropriate constraints there then it's worth materializing it out to an actual column. </p>\n"}], "is_answered": true, "answer_count": 1, "score": 0, "last_activity_date": 1459797248, "creation_date": 1459792413, "question_id": 36409544, "title": "Postgres JSONB table querying structure?", "body": "<p>So I'm building a table/database in Postgres using its JSONB feature. My question is about how to structure the table/query against it.  Is it faster to include a separate relational column featuring a foreign key relating to something like users? Or just store a user in the JSON data and include that in your JSON query.</p>\n\n<p>An example:</p>\n\n<pre><code>|   userID   |           json         |\n|     1      |     { 'userID': 1,     |\n|            |       'something': 5 } |\n</code></pre>\n\n<p>Or simply:</p>\n\n<pre><code>|         json        |\n|   { 'userID': 1,    |\n|    'something': 5 } |\n</code></pre>\n"}