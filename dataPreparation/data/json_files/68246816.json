{
  "tags": [
    "r",
    "regex",
    "data-cleaning",
    "gsub"
  ],
  "comments": [
    {
      "post_id": 68246816,
      "comment_id": 120616618,
      "body": "How can you explain the rules for extracting <code>2g</code> in <code>Product 200g (10x2g)</code>? Why not <code>200g</code>?"
    },
    {
      "post_id": 68246816,
      "comment_id": 120616757,
      "body": "Actually, I would like to extract size of the single product. for the case of 10x2g, single product size is 2g which in a pack contain 10 units.  the ideal output, I will have another column for pack size------ single product size : (1237ml, 370ML, 850g, 2400g, 11.2kg, 11.2kg, 2g, 200g, 300g).  and pack size : (1,1,1,1,1,1,10,1,1)"
    },
    {
      "post_id": 68246816,
      "comment_id": 120616793,
      "body": "Sorry, there is almost no information about pack size. Regex can only extract what is present in the input string. So, any number with specific UOM preferably after <code>&lt;num&gt;x</code>?"
    },
    {
      "post_id": 68246816,
      "comment_id": 120616822,
      "body": "Try this crazy one, <code>regmatches(strings, regexpr(&quot;(?:.*\\\\d+(?:\\\\.\\\\d+)?x)?\\\\K(?&lt;!\\\\d)(\\\\d+(?:\\\\.\\\\d+)&zwnj;&#8203;?(?:k?g|m?l))\\\\b&quot;, strings, perl=TRUE, ignore.case=TRUE))</code>"
    },
    {
      "post_id": 68246816,
      "comment_id": 120616848,
      "body": "got your point @WiktorStribi\u017cew. But it can be either 20g x 10 or 10 x 20g."
    },
    {
      "post_id": 68246816,
      "comment_id": 120617526,
      "body": "Ok, this is too complex now, <code>regmatches(strings, regexpr(&quot;(?:.*(?:\\\\d(?:\\\\.\\\\d+)?\\\\s*x\\\\s*)?\\\\K(?&lt;!\\\\d)\\\\d+(?&zwnj;&#8203;:\\\\.\\\\d+)?(?:k?g|m?l&zwnj;&#8203;)\\\\b|(?&lt;!\\\\d)\\\\d+(?:&zwnj;&#8203;\\\\.\\\\d+)?(?:k?g|m?l)&zwnj;&#8203;(?=\\\\s*x\\\\s*\\\\d))&quot;, strings, perl=TRUE, ignore.case=TRUE))</code>"
    }
  ],
  "answers": [
    {
      "answer_id": 68247743,
      "question_id": 68246816,
      "body": "<p>Your requirements are quite complex, but if you plan to use a single regex to extract those values, you can use</p>\n<pre class=\"lang-r prettyprint-override\"><code>regmatches(strings, regexpr(&quot;.*(?:\\\\d(?:\\\\.\\\\d+)?\\\\s*x\\\\s*)?\\\\K(?&lt;!\\\\d)\\\\d+(?:\\\\.\\\\d+)?(?:k?g|m?l)\\\\b|(?&lt;!\\\\d)\\\\d+(?:\\\\.\\\\d+)?(?:k?g|m?l)(?=\\\\s*x\\\\s*\\\\d)&quot;, strings, perl=TRUE, ignore.case=TRUE))\n</code></pre>\n<p>See the <a href=\"https://regex101.com/r/1ZCGjM/2\" rel=\"nofollow noreferrer\">regex demo online</a>.</p>\n<p>The main idea is to match the rightmost number that is followed with specified UOM abbreviation giving priority to the numbers around <code>x</code>.</p>\n<p><em>Details</em>:</p>\n<ul>\n<li><code>.*</code> - any zero or more chars other than line break chars, as many as possible</li>\n<li><code>(?:\\d(?:\\.\\d+)?\\s*x\\s*)?</code> - an optional group matching a digit, then an optional sequence of <code>.</code> and one or more digits, and then an <code>x</code> enclosed with zero or more whitespaces</li>\n<li><code>\\K</code> - match reset operator that discards the text matched so far</li>\n<li><code>(?&lt;!\\d)\\d+(?:\\.\\d+)?(?:k?g|m?l)\\b</code> - one or more digits, then an optional sequence of <code>.</code> and one or more digits and then <code>kg</code> or <code>g</code> or <code>ml</code> or <code>l</code> as a whole word</li>\n<li><code>|</code> - or</li>\n<li><code>(?&lt;!\\d)</code> - no digit immediately to the left is allowed</li>\n<li><code>\\d+(?:\\.\\d+)?(?:k?g|m?l)</code> - one or more digits, then an optional sequence of <code>.</code> and one or more digits, and then <code>kg</code>/<code>g</code>/<code>ml</code> or <code>l</code></li>\n<li><code>(?=\\s*x\\s*\\d)</code> - followed with an <code>x</code> enclosed with zero or more whitespace chars and then a digit.</li>\n</ul>\n"
    }
  ],
  "is_answered": true,
  "answer_count": 1,
  "last_activity_date": 1625424048,
  "question_id": 68246816,
  "title": "Regular expression to get product attribute from product name in R",
  "body": "<p>I have a set of product name and would like to extract product size <br>\n(1237ml, 370ML, 850g, 2400g, 11.2kg, 11.2kg, 2g, 200g, 300g) <br></p>\n<p>The product name are a bit messy. There is no specific position of product size/formatting. For example,</p>\n<pre><code>strings &lt;- c(&quot;product brand A 1237ml Bundle of 6&quot; \n            , &quot;product milk choc370ML&quot; \n            , &quot;brand milk Vanilla Flavor 850g&quot; \n            , &quot;One 2400g, For 0-6 Month-Old Infants&quot; \n            , &quot;a+...two...6-12months...11.2kg...milk&quot; \n            , &quot;a+...two...11.2kg 6-12months ..milk&quot; \n            , &quot;Product 200g (10x2g)&quot;\n            , &quot;[200g] Product&quot; \n            , &quot;Product A brand(300g)&quot;\n)\n</code></pre>\n<p>I am very new to regular expression and trying to use it in R. So, not sure how to write the expression to cover all the cases here.</p>\n<p>Below is the code that I'm using. As mentioned, they work for only some cases.\nCould someone please guide me on what should be the proper/applicable expression for the case?</p>\n<pre><code>extract1&lt;-trimws(gsub(&quot;.* ([a-zA-Z0-9]+).*&quot;, &quot;\\\\1&quot;, product))\nextract2&lt;-trimws(gsub(&quot;.*(...[0-9][Mm][Ll]).*&quot;, &quot;\\\\1&quot;, product))\nextract3&lt;-trimws(gsub(&quot;.*(..[0-9][Mm][Ll]).*&quot;, &quot;\\\\1&quot;, product))\nextract4&lt;-trimws(gsub(&quot;.*(...[0-9][Gg]).*&quot;, &quot;\\\\1&quot;, product))\nextract5&lt;-trimws(gsub(&quot;.*(..[0-9][Gg]).*&quot;, &quot;\\\\1&quot;, product))\nextract6&lt;-trimws(gsub(&quot;.*(...[0-9].[Gg]).*&quot;, &quot;\\\\1&quot;, product))\nextract7&lt;-trimws(gsub(&quot;.*(..[0-9].[Gg]).*&quot;, &quot;\\\\1&quot;, product))\n</code></pre>\n"
}