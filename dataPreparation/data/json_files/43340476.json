{"tags": ["regex"], "comments": [{"score": 2, "creation_date": 1491899174, "post_id": 43340476, "comment_id": 73744170, "body": "The question has been asked already. Add <code>(?!.)</code>. Can&#39;t find the other question now."}, {"score": 1, "creation_date": 1491899653, "post_id": 43340476, "comment_id": 73744491, "body": "The question is not practical, thus closed. The <code>$</code> is actually a construct supported in all regex flavors, and should not be replaced with any other &quot;alternatives&quot; (the <code>\\z</code> or <code>\\Z</code> are specific cases that are language dependent)."}, {"score": 1, "creation_date": 1491899702, "post_id": 43340476, "comment_id": 73744530, "body": "The reason <code>fu[^tsn]</code> doesn&#39;t match &quot;tofu&quot; is that there is not one character which isn&#39;t t, s, or n after &quot;fu&quot; in that word.  The approach to exclude alphabetics is flawed anyway -- <code>fu[^a-z]</code> would still match <code>fu-bar</code> for example; but even if your input consists solely of alphabetics, prohibiting any alphabetic after the match still doesn&#39;t solve the problem of matching only an empty string after the match."}], "answers": [{"comments": [{"score": 0, "creation_date": 1491899194, "post_id": 43340543, "comment_id": 73744187, "body": "But what is your actual full regex?"}, {"score": 0, "creation_date": 1491899257, "post_id": 43340543, "comment_id": 73744223, "body": "@TimBiegeleisen Replace <code>&#47;fu$&#47;</code> with <code>fu</code> plus one of these."}, {"score": 1, "creation_date": 1491899450, "post_id": 43340543, "comment_id": 73744353, "body": "<code>\\b</code> does not match the end of string only. <code>\\z</code> is not supported in a lot of regex flavors. <code>(?![tsn])</code> only fails the match before <code>t</code>, <code>s</code>, <code>n</code>."}, {"score": 0, "creation_date": 1491899607, "post_id": 43340543, "comment_id": 73744464, "body": "@WiktorStribi\u017cew Fixed."}, {"score": 0, "creation_date": 1491899729, "post_id": 43340543, "comment_id": 73744544, "body": "Yeah, but a lookahead is not supported in RE2, Go, POSIX. No sense using all these &quot;alternatives&quot;."}, {"score": 1, "creation_date": 1491900286, "post_id": 43340543, "comment_id": 73744938, "body": "@WiktorStribi\u017cew I agree it is impractical, but have you checked OP&#39;s linked page? The question totally makes sense. <a href=\"https://i.stack.imgur.com/vyqJE.png\" rel=\"nofollow noreferrer\">i.stack.imgur.com/vyqJE.png</a>"}, {"score": 0, "creation_date": 1491900439, "post_id": 43340543, "comment_id": 73745060, "body": "@kennytm: No, sorry, I do not see any <i>practical</i> sense. Who will use <code>(?!.)</code> in real life scenarios? Would you? <code>\\z</code> only makes sense in the context of Ruby regex (or strict validation). <code>\\Z</code> is important in Python/Ruby. <code>\\b</code> is a commonly used construct and is not a good choice even for the current question."}, {"score": 0, "creation_date": 1491900676, "post_id": 43340543, "comment_id": 73745236, "body": "BTW, the <code>(?!.)</code> is from my comment, and it is the best choice for the current question."}, {"score": 0, "creation_date": 1491900892, "post_id": 43340543, "comment_id": 73745389, "body": "@WiktorStribi\u017cew OP&#39;s question about how to solve the RegexGolf problem, and the best choice is actually <code>u\\b</code> (3 chars)."}, {"score": 0, "creation_date": 1491901001, "post_id": 43340543, "comment_id": 73745452, "body": "<i>Regex matching <b>end of string</b> without using <code>$</code></i> - <code>\\b</code> does not only match the end of string, and not always does it match the end of string."}, {"score": 0, "creation_date": 1491901409, "post_id": 43340543, "comment_id": 73745792, "body": "@WiktorStribi\u017cew Yes they are not equivalent, but you are missing the whole point, the &quot;no <code>$</code>&quot; restriction comes from RegexGolf, the &quot;<code>\\b</code> works&quot; result also comes from RegexGolf matching only a single word (which is clearly stated in the answer). There&#39;s no point extending the discussion if we keep ignoring that the whole question stems from an attempt to solve a RegexGolf problem."}, {"score": 0, "creation_date": 1491901462, "post_id": 43340543, "comment_id": 73745830, "body": "Yes, there was no point answering the question, as there is no real problem."}, {"score": 0, "creation_date": 1491901540, "post_id": 43340543, "comment_id": 73745885, "body": "Let us <a href=\"http://chat.stackoverflow.com/rooms/141412/discussion-between-kennytm-and-wiktor-stribizew\">continue this discussion in chat</a>."}], "score": 8, "last_activity_date": 1506265493, "last_edit_date": 1506265493, "answer_id": 43340543, "question_id": 43340476, "body": "<p>You can find a list of available regex elements in <a href=\"https://stackoverflow.com/a/22944075/224671\">https://stackoverflow.com/a/22944075/224671</a>. Some that you can try to pass the RegexGolf test:</p>\n\n<ul>\n<li><code>\\b</code>: matches the word boundary, assuming the input is always a single word</li>\n<li><code>\\z</code> or <code>\\Z</code>: matches the end of string <em>(Note: not supported in JavaScript)</em></li>\n<li><code>(?!.)</code>: negative look-ahead, matches as long as there is no next character, semantically equivalent to <code>$</code>.</li>\n</ul>\n\n<p>The reason your regex \"works\" in regex101 is because <code>[^tsn]</code> matched the newline next to <code>fu</code>. But in the RegexGolf it expects <code>fu</code> to be the whole input, thus the match failed. So be careful when you are testing with regex101. Perhaps it is better to switch to the \"Unit Tests\" mode in your case.</p>\n"}], "is_answered": true, "answer_count": 1, "score": 1, "last_activity_date": 1506265493, "creation_date": 1491898947, "question_id": 43340476, "title": "Regex matching end of string without using `$`", "body": "<p>I was doing a <a href=\"https://alf.nu/RegexGolf\" rel=\"nofollow noreferrer\">regex golf</a> the other day, and the task was to match 'u' at the end of the string without using <code>$</code>. The goal was to match \"fu\", \"tofu\" and \"snafu\" but not \"futz\", \"fusillade\", \"functional\" or \"discombobulated\". </p>\n\n<p>I came up with <code>fu[^tsn]</code>, which worked on <a href=\"https://regex101.com/r/tTlyhh/1\" rel=\"nofollow noreferrer\">regex101</a>; however, it does not pass the test as it does not match any of \"fu\", \"tofu\" and \"snafu\" for some reason. I'd like to know why it is not working, and if there is a smarter way to work around this (bonus: is there any real-life situation where not using <code>$</code> would be better).</p>\n"}