{"tags": ["python", "sql", "json", "pandas", "dataframe"], "answers": [{"comments": [{"score": 0, "creation_date": 1598253974, "post_id": 63524265, "comment_id": 112386657, "body": "yes thats what I was trying to do. thanks! just wondering do u know why does sql database not accept lists as a variable?"}], "score": 2, "last_activity_date": 1598018339, "answer_id": 63524265, "question_id": 63521604, "body": "<p>I think the  <strong>tagIDs</strong> field is a list and your database does not seem to be happy with it.</p>\n<p>Not sure this is the best way but you can try to convert it from list to string</p>\n<pre class=\"lang-py prettyprint-override\"><code>df['tagIDs'] = df['tagIDs'].apply(lambda x: str(x))\n</code></pre>\n"}], "is_answered": true, "answer_count": 1, "score": 2, "last_activity_date": 1598018339, "creation_date": 1598007620, "question_id": 63521604, "title": "Converting from json to dataframe to sql", "body": "<p>I'm trying to save all the json data to the sql database and I'm using python so I decided to use pandas.<br />\nPart of the JSON:</p>\n<pre><code>{\n&quot;stores&quot;: [\n    {\n        &quot;ID&quot;: &quot;123456&quot;,\n        &quot;name&quot;: &quot;Store 1&quot;,\n        &quot;status&quot;: &quot;Active&quot;,\n        &quot;date&quot;: &quot;2019-03-28T15:20:00Z&quot;,\n        &quot;tagIDs&quot;: null,\n        &quot;location&quot;: {\n            &quot;cityID&quot;: 2,\n            &quot;countryID&quot;: 4,\n            &quot;geoLocation&quot;: {\n                &quot;latitude&quot;: 1.13121,\n                &quot;longitude&quot;: 103.4324231\n            },\n            &quot;postcode&quot;: &quot;123456&quot;,\n            &quot;address&quot;: &quot;&quot;\n        },\n        &quot;new&quot;: false\n    },\n    {\n        &quot;ID&quot;: &quot;223456&quot;,\n        &quot;name&quot;: &quot;Store 2&quot;,\n        &quot;status&quot;: &quot;Active&quot;,\n        &quot;date&quot;: &quot;2020-03-28T15:20:00Z&quot;,\n        &quot;tagIDs&quot;: [\n            12,\n            35\n        ],\n        &quot;location&quot;: {\n            &quot;cityID&quot;: 21,\n            &quot;countryID&quot;: 5,\n            &quot;geoLocation&quot;: {\n                &quot;latitude&quot;: 1.12512,\n                &quot;longitude&quot;: 103.23342\n            },\n            &quot;postcode&quot;: &quot;223456&quot;,\n            &quot;address&quot;: &quot;&quot;\n        },\n        &quot;new&quot;: true\n    }\n]\n</code></pre>\n<p>}</p>\n<p>My Code:</p>\n<pre><code>response = requests.get(.....)\nresult = response.text\ndata = json.loads(result)\ndf = pd.json_normalize(data[&quot;store&quot;])\n.....\n\ndb_connection = sqlalchemy.create_engine(.....)\ndf.to_sql(con=db_connection, name=&quot;store&quot;, if_exists=&quot;append&quot; )\n\n</code></pre>\n<p><code>Error: _mysql_connector.MySQLInterfaceError: Python type list cannot be converted</code><br />\nHow I want the dataframe to actually look like:</p>\n<pre><code>     ID          tagIDs             date\n0   123456        []         2020-04-23T09:32:26Z               \n1   223456      [12,35]      2019-05-24T03:21:39Z                 \n2   323456     [709,1493]    2019-03-28T15:38:39Z \n</code></pre>\n<hr />\n<p>I tried using different dataframes &amp; json objects so far and they all work.\nSo I discovered the issue is with the json object.\nWithout the &quot;tagIDs&quot;, everything else works fine.<br />\nI was thinking maybe if I converted the object to a string it can be parsed to sql but it didn't work either. How do I change the tagIDs such that I can parse everything to sql? Or is there another more efficient way to do this?</p>\n"}