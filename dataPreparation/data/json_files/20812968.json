{"tags": ["python", "django", "django-queryset", "django-mptt"], "answers": [{"score": 1, "last_activity_date": 1388224032, "answer_id": 20813121, "question_id": 20812968, "body": "<p>You can get descendants list if you know location id with function <code>get_descendants</code>:</p>\n\n<pre><code>location = Location.objects.get(pk=\"some_location_id\")\ndescendants = location.get_descendants().values_list('id', flat=True)\nbuilding_list = Building.objects.filter(title__icontains='house',\n                                        location__in=descendants)\n</code></pre>\n"}], "is_answered": true, "answer_count": 1, "score": 1, "last_activity_date": 1388224032, "creation_date": 1388223027, "question_id": 20812968, "title": "Query with difficult conditions in the project using mptt", "body": "<p>I have some mptt model:</p>\n\n<pre><code>class Locations(MPTTModel):\n    parent = TreeForeignKey('self', null=True, blank=True, related_name='children')\n    type = models.ForeignKey('LocationTypes')\n    title = models.CharField(max_length=100)\n</code></pre>\n\n<p>Some models related with it:</p>\n\n<pre><code>class Building(models.Model):\n    title = models.CharField(max_length=100)\n    location = models.ForeignKey('Locations')\n</code></pre>\n\n<p>And QuerySet like this:</p>\n\n<pre><code>building_list = Building.objects.filter(title__icontains='house')\n</code></pre>\n\n<p>I know some \"Location\" \"id\", but not directly related to Building, one of ancestors.\nWhat better way to left in building_list, only those elements the is location one of descendants(not necessarily direct) of this \"Location\"?</p>\n"}