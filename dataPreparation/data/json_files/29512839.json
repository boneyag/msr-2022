{"tags": ["json", "swift", "object"], "comments": [{"post_id": 29512839, "comment_id": 47181571, "body": "Try to follow this tutorial <a href=\"https://medium.com/swift-programming/4-json-in-swift-144bf5f88ce4\" rel=\"nofollow noreferrer\">medium.com/swift-programming/4-json-in-swift-144bf5f88ce4</a>"}, {"post_id": 29512839, "comment_id": 47181892, "body": "Yes, red that article. That article nsdictionary only has string values. In my case var transfer, hourly, custom have many values. it is not string ... so how should I include them ?"}, {"post_id": 29512839, "comment_id": 47181964, "body": "let jsonObject: [AnyObject]  = [             [&quot;type_id&quot;: singleStructDataOfCar.typeID, &quot;model_id&quot;: singleStructDataOfCar.modelID, &quot;transfer&quot;:[                 &quot;startDate&quot;:savedDataTransfer[&quot;ServiceDataStartDate&quot;] as String, &quot;EndPoint&quot;: savedDataTransfer[&quot;ServiceDataAddressOfDel&quot;] as String, &quot;CommentText&quot;: savedDataTransfer[&quot;ServiceDataDetailedText&quot;] as String, &quot;StartPoint&quot;:savedDataTransfer[&quot;ServiceDataAddressOfReq&quot;] as String                 ]             ]//, &quot;hourly&quot;: savedDataHourly, &quot;custom&quot;: savedDataReis, &quot;device_type&quot;:&quot;ios&quot;]         ]"}, {"post_id": 29512839, "comment_id": 47181983, "body": "I know this is messy code. but it also doesnt work"}, {"post_id": 29512839, "comment_id": 47182100, "body": "You can convert the dictionary into JSON <a href=\"http://stackoverflow.com/questions/26855074/nsdictionary-to-json-string-to-json-object-using-swiftyjson\" title=\"nsdictionary to json string to json object using swiftyjson\">stackoverflow.com/questions/26855074/&hellip;</a>"}, {"post_id": 29512839, "comment_id": 47182108, "body": "I guess indeed one of the  <code>singleStructdata.*</code> items is not json convertible. Try each of these individually with <code>NSJSONSerialization.isValidJSONObject</code> and you&#39;ll find your culprit."}, {"post_id": 29512839, "comment_id": 47182259, "body": "I already found ... some of vars were nil value. how to handle them?"}], "answers": [{"answer_id": 29516706, "question_id": 29512839, "body": "<p>One problem is that this code is not of type <code>Dictionary</code>.</p>\n\n<pre><code>let jsonObject: [Any]  = [\n    [\n         \"type_id\": singleStructDataOfCar.typeID,\n         \"model_id\": singleStructDataOfCar.modelID, \n         \"transfer\": savedDataTransfer, \n         \"hourly\": savedDataHourly, \n         \"custom\": savedDataReis, \n         \"device_type\":\"iOS\"\n    ]\n]\n</code></pre>\n\n<p>The above is an <code>Array</code> of <code>AnyObject</code> with a <code>Dictionary</code> of type <code>[String: AnyObject]</code> inside of it.</p>\n\n<p>Try something like this to match the JSON you provided above:</p>\n\n<pre><code>let savedData = [\"Something\": 1]\n\nlet jsonObject: [String: Any] = [ \n    \"type_id\": 1,\n    \"model_id\": 1,\n    \"transfer\": [\n        \"startDate\": \"10/04/2015 12:45\",\n        \"endDate\": \"10/04/2015 16:00\"\n    ],\n    \"custom\": savedData\n]\n\nlet valid = JSONSerialization.isValidJSONObject(jsonObject) // true\n</code></pre>\n"}, {"answer_id": 32692823, "question_id": 29512839, "body": "<p>Creating a JSON String:</p>\n\n<pre><code>let para:NSMutableDictionary = NSMutableDictionary()\npara.setValue(\"bidder\", forKey: \"username\")\npara.setValue(\"day303\", forKey: \"password\")\npara.setValue(\"authetication\", forKey: \"action\")\nlet jsonData = try! NSJSONSerialization.dataWithJSONObject(para, options: NSJSONWritingOptions.allZeros)\nlet jsonString = NSString(data: jsonData, encoding: NSUTF8StringEncoding) as! String\nprint(jsonString)\n</code></pre>\n"}, {"answer_id": 34097660, "question_id": 29512839, "body": "<p>This worked for me... Swift 2</p>\n\n<pre><code>static func checkUsernameAndPassword(username: String, password: String) -&gt; String?{\n    let para:NSMutableDictionary = NSMutableDictionary()\n        para.setValue(\"demo\", forKey: \"username\")\n        para.setValue(\"demo\", forKey: \"password\")\n       // let jsonError: NSError?\n    let jsonData: NSData\n    do{\n        jsonData = try NSJSONSerialization.dataWithJSONObject(para, options: NSJSONWritingOptions())\n        let jsonString = NSString(data: jsonData, encoding: NSUTF8StringEncoding) as! String\n        print(\"json string = \\(jsonString)\")\n        return jsonString\n\n    } catch _ {\n        print (\"UH OOO\")\n        return nil\n    }\n}\n</code></pre>\n"}, {"answer_id": 34828565, "question_id": 29512839, "body": "<p>Check out <a href=\"https://github.com/peheje/JsonSerializerSwift\" rel=\"nofollow\">https://github.com/peheje/JsonSerializerSwift</a></p>\n\n<p>Use case:</p>\n\n<pre><code>//Arrange your model classes\nclass Object {\n  var id: Int = 182371823\n  }\nclass Animal: Object {\n  var weight: Double = 2.5\n  var age: Int = 2\n  var name: String? = \"An animal\"\n  }\nclass Cat: Animal {\n  var fur: Bool = true\n}\n\nlet m = Cat()\n\n//Act\nlet json = JSONSerializer.toJson(m)\n\n//Assert\nlet expected = \"{\\\"fur\\\": true, \\\"weight\\\": 2.5, \\\"age\\\": 2, \\\"name\\\": \\\"An animal\\\", \\\"id\\\": 182371823}\"\nstringCompareHelper(json, expected) //returns true\n</code></pre>\n\n<p>Currently supports standard types, optional standard types, arrays, arrays of nullables standard types, array of custom classes, inheritance, composition of custom objects.</p>\n"}, {"answer_id": 40901241, "question_id": 29512839, "body": "<p>For Swift 3.0, as of December 2016, this is how it worked for me:</p>\n\n<pre><code>let jsonObject: NSMutableDictionary = NSMutableDictionary()\n\njsonObject.setValue(value1, forKey: \"b\")\njsonObject.setValue(value2, forKey: \"p\")\njsonObject.setValue(value3, forKey: \"o\")\njsonObject.setValue(value4, forKey: \"s\")\njsonObject.setValue(value5, forKey: \"r\")\n\nlet jsonData: NSData\n\ndo {\n    jsonData = try JSONSerialization.data(withJSONObject: jsonObject, options: JSONSerialization.WritingOptions()) as NSData\n    let jsonString = NSString(data: jsonData as Data, encoding: String.Encoding.utf8.rawValue) as! String\n    print(\"json string = \\(jsonString)\")                                    \n\n} catch _ {\n    print (\"JSON Failure\")\n}\n</code></pre>\n\n<p>EDIT 2018: I now use SwiftyJSON library to save time and make my development life easier and better. Dealing with JSON natively in Swift is an unnecessary headache and pain, plus wastes too much time, and creates code which is hard to read and write, and hence prone to lots of errors.</p>\n"}, {"answer_id": 49918845, "question_id": 29512839, "body": "<p>\u2022 Swift 4.1, April 2018</p>\n\n<p>Here is a <strong>more general approach</strong> that can be used to create a JSON string by using values from a dictionary:</p>\n\n<pre><code>struct JSONStringEncoder {\n    /**\n     Encodes a dictionary into a JSON string.\n     - parameter dictionary: Dictionary to use to encode JSON string.\n     - returns: A JSON string. `nil`, when encoding failed.\n     */\n    func encode(_ dictionary: [String: Any]) -&gt; String? {\n        guard JSONSerialization.isValidJSONObject(dictionary) else {\n            assertionFailure(\"Invalid json object received.\")\n            return nil\n        }\n\n        let jsonObject: NSMutableDictionary = NSMutableDictionary()\n        let jsonData: Data\n\n        dictionary.forEach { (arg) in\n            jsonObject.setValue(arg.value, forKey: arg.key)\n        }\n\n        do {\n            jsonData = try JSONSerialization.data(withJSONObject: jsonObject, options: .prettyPrinted)\n        } catch {\n            assertionFailure(\"JSON data creation failed with error: \\(error).\")\n            return nil\n        }\n\n        guard let jsonString = String.init(data: jsonData, encoding: String.Encoding.utf8) else {\n            assertionFailure(\"JSON string creation failed.\")\n            return nil\n        }\n\n        print(\"JSON string: \\(jsonString)\")\n        return jsonString\n    }\n}\n</code></pre>\n\n<p><strong>How to use it</strong>:</p>\n\n<pre><code>let exampleDict: [String: Any] = [\n        \"Key1\" : \"stringValue\",         // type: String\n        \"Key2\" : boolValue,             // type: Bool\n        \"Key3\" : intValue,              // type: Int\n        \"Key4\" : customTypeInstance,    // type: e.g. struct Person: Codable {...}\n        \"Key5\" : customClassInstance,   // type: e.g. class Human: NSObject, NSCoding {...}\n        // ... \n    ]\n\n    if let jsonString = JSONStringEncoder().encode(exampleDict) {\n        // Successfully created JSON string.\n        // ... \n    } else {\n        // Failed creating JSON string.\n        // ...\n    }\n</code></pre>\n\n<p>Note: If you are adding instances of your custom types (structs) into the dictionary make sure your types conform to the <code>Codable</code> protocol and if you are adding objects of your custom classes into the dictionary make sure your classes inherit from <code>NSObject</code> and conform to the <code>NSCoding</code> protocol.</p>\n"}, {"answer_id": 68196716, "question_id": 29512839, "body": "<p><strong>Swift 5</strong> - 6/30/21</p>\n<p>Adopt the Codable protocol (similar to interface in other programming languages)</p>\n<pre><code>struct ConfigRequestBody: Codable {\nvar systemid: String\nvar password: String\nvar request: String = &quot;getconfig&quot;\n\ninit(systemID: String, password: String){\n    self.systemid = systemID\n    self.password = password\n}\n</code></pre>\n<p>}</p>\n<p>Create instance of struct/class that you want to turn into JSON:</p>\n<pre><code>let requestBody = ConfigRequestBody(systemID: systemID, password: password)\n</code></pre>\n<p>Encode the object into JSON using a <code>JSONEncoder</code>. Here I print the string representation so you can see the result:</p>\n<pre><code>    let encoder = JSONEncoder()\n    encoder.outputFormatting = .prettyPrinted\n    do {\n        let result = try encoder.encode(requestBody)\n        // RESULT IS NOW JSON-LIKE DATA OBJECT\n        if let jsonString = String(data: result, encoding: .utf8){\n            // JSON STRING\n            print(&quot;JSON \\(jsonString)&quot;)\n        }\n    } catch {\n        print(&quot;Your parsing sucks \\(error)&quot;)\n        return nil\n    }\n}\n</code></pre>\n"}], "is_answered": true, "answer_count": 7, "last_activity_date": 1625063313, "question_id": 29512839, "title": "Create JSON in swift", "body": "<p>I need to create JSON like this:</p>\n\n<pre><code>Order = {   type_id:'1',model_id:'1',\n\n   transfer:{\n     startDate:'10/04/2015 12:45',\n     endDate:'10/04/2015 16:00',\n     startPoint:'\u0423\u043b. \u041c\u043e\u043c\u044b\u0448\u0443\u043b\u044b, 45',\n     endPoint:'\u0410\u044d\u0440\u043e\u043f\u043e\u0440\u0442 \u0410\u0441\u0442\u0430\u043d\u044b'\n   },\n   hourly:{\n     startDate:'10/04/2015',\n     endDate:'11/04/2015',\n     startPoint:'\u0416\u0414 \u0412\u043e\u043a\u0437\u0430\u043b',\n     endPoint:'',\n     undefined_time:'1'\n   },\n   custom:{\n     startDate:'12/04/2015',\n     endDate:'12/04/2015',\n     startPoint:'\u0410\u0441\u0442\u0430\u043d\u0430',\n     endPoint:'\u041f\u0430\u0432\u043b\u043e\u0434\u0430\u0440',\n     customPrice:'50 000'\n   },\n    commentText:'',\n    device_type:'ios'\n};\n</code></pre>\n\n<p>The problem is that I can not create valid JSON. \nHere is how I create object: </p>\n\n<pre><code>let jsonObject: [AnyObject]  = [\n        [\"type_id\": singleStructDataOfCar.typeID, \"model_id\": singleStructDataOfCar.modelID, \"transfer\": savedDataTransfer, \"hourly\": savedDataHourly, \"custom\": savedDataReis, \"device_type\":\"ios\"]\n    ]\n</code></pre>\n\n<p>where <code>savedData</code> are dictionaries:</p>\n\n<pre><code>let savedData: NSDictionary = [\"ServiceDataStartDate\": singleStructdata.startofWork, \n\"ServiceDataAddressOfReq\": singleStructdata.addressOfRequest, \n\"ServiceDataAddressOfDel\": singleStructdata.addressOfDelivery, \n\"ServiceDataDetailedText\": singleStructdata.detailedText, \"ServiceDataPrice\": singleStructdata.priceProposed]\n</code></pre>\n\n<p>When I use only strings creating my JSON object everything works fine. However when I include dictionaries <code>NSJSONSerialization.isValidJSONObject(value)</code> returns <code>false</code>. How can I create a valid dictionary?</p>\n"}