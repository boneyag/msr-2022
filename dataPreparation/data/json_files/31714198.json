{"tags": ["django", "django-rest-framework"], "comments": [{"score": 0, "creation_date": 1438225390, "post_id": 31714198, "comment_id": 51366550, "body": "One nitpicky thing... 401_UNAUTHORIZED is usually used to tell a requestor that they must authenticate themselves in order to gain access. 403_FORBIDDEN explicitly tells a requestor that they cannot gain access with their authenticated credentials (because they are not staff). It probably doesn&#39;t matter, though (:"}], "answers": [{"comments": [{"score": 0, "creation_date": 1438237618, "post_id": 31714416, "comment_id": 51370399, "body": "Now that is the answer I was hoping for! Something neat and easy that works a treat. Thanks."}, {"score": 0, "creation_date": 1600196580, "post_id": 31714416, "comment_id": 113010321, "body": "It&#39;s important to say also, that&#39;s possible to define it as the DRF default permission class like so on Django Settings file:  REST_FRAMEWORK = {     &#39;DEFAULT_PERMISSION_CLASSES&#39;: (         &#39;rest_framework.permissions.IsAdminUser&#39;,     ),"}], "score": 25, "last_activity_date": 1438224904, "last_edit_date": 1438224904, "answer_id": 31714416, "question_id": 31714198, "body": "<p>The more elegant way of achieving your goal is to use <a href=\"http://www.django-rest-framework.org/api-guide/permissions/\" rel=\"noreferrer\">permissions</a>. These can be declared globally, at the view level, or with a decorator</p>\n\n<p>From the <a href=\"https://github.com/tomchristie/django-rest-framework/blob/master/rest_framework/permissions.py#L51\" rel=\"noreferrer\">source</a>:</p>\n\n<pre><code>class IsAdminUser(BasePermission):\n    \"\"\"\n    Allows access only to admin users.\n    \"\"\"\n    def has_permission(self, request, view):\n        return request.user and request.user.is_staff\n</code></pre>\n\n<p>You can use this in your views.py (see the docs for other ways)</p>\n\n<pre><code>from rest_framework.permissions import IsAdminUser\n\nclass StaffOnlyModelViewSet(viewsets.ModelViewSet):\n    permission_classes = (IsAdminUser,)\n</code></pre>\n\n<p>Some users are confused by permissions and authentication and the relation between them, so I will give you a quick primer. </p>\n\n<p><a href=\"http://www.django-rest-framework.org/api-guide/authentication/\" rel=\"noreferrer\">Authentication</a> defines the means for a user to prove their identity, and permissions define who has access to which resources. Whether or not the identity is proven during authentication, the user's request will be checked against permissions. </p>\n\n<p>When combined together, you can control a users access. For example, if a user fails authentication but the permission class on a view is set to 'IsAuthenticatedOrReadOnly', they can still GET/LIST the resource. 'IsAdminUser' states that a user must have passed authentication and must also be staff to access this view. This is what you want in this case.</p>\n"}], "is_answered": true, "answer_count": 1, "score": 3, "last_activity_date": 1438231074, "creation_date": 1438222960, "question_id": 31714198, "title": "Staff-only permissions in Django Rest Framework", "body": "<p>I am trying to create Django Rest Framework ModelViewSets that are staff only. When i try to use the standard Django decorator <code>@staff_member_required</code> I get errors which make me believe the decorators won't work with Django Rest Framework.</p>\n\n<p>So I am trying  to write my own ModelViewSet mixin. It mostly works as I want, except for the update method which I can't make work.</p>\n\n<p>So, two questions: is there a more elegant way to do this, and if not, what is wrong with my update method? I can't find any documentation on update, so I'm using my best guess as to how to super it, but it's not working.</p>\n\n<p>Thanks!</p>\n\n<p>John</p>\n\n<p>Here is my class: </p>\n\n<pre><code>class StaffOnlyModelViewSet(viewsets.ModelViewSet):\n\ndef list(self, request):\n    if self.request.user.is_staff:\n        return super(StaffOnlyModelViewSet, self).list(request)\n    else:\n        content = {'Unauthorised': 'This API is private'}\n        return Response(content, status=status.HTTP_401_UNAUTHORIZED)\n\ndef retrieve(self, request, pk=None):\n    if self.request.user.is_staff:\n        return super(StaffOnlyModelViewSet, self).retrieve(request, pk=None)\n    else:\n        content = {'Unauthorised': 'This API is private'}\n        return Response(content, status=status.HTTP_401_UNAUTHORIZED)\n\ndef create(self, request):\n    if self.request.user.is_staff:\n        return super(StaffOnlyModelViewSet, self).create(request)\n    else:\n        content = {'Unauthorised': 'This API is private'}\n        return Response(content, status=status.HTTP_401_UNAUTHORIZED)\n\ndef update(self, request, pk=None):\n    if self.request.user.is_staff:\n        return super(StaffOnlyModelViewSet, self).update(request, pk=None)\n    else:\n        content = {'Unauthorised': 'This API is private'}\n        return Response(content, status=status.HTTP_401_UNAUTHORIZED)\n\ndef destroy(self, request, pk=None):\n    if self.request.user.is_staff:\n        return super(StaffOnlyModelViewSet, self).destroy(request, pk=None)\n    else:\n        content = {'Unauthorised': 'This API is private'}\n        return Response(content, status=status.HTTP_401_UNAUTHORIZED)\n</code></pre>\n"}