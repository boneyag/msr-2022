{"tags": ["c#", "json", "filter", "boolean"], "comments": [{"post_id": 67788791, "comment_id": 119824045, "body": "Use the <a href=\"https://www.newtonsoft.com/json/help/html/M_Newtonsoft_Json_Linq_JToken_op_Explicit.htm\" rel=\"nofollow noreferrer\">explicit cast to Boolean</a>: <code>(bool)catObj.[&quot;IncludeCategory&quot;] == true</code>  Or if it might be missing, cast to a nullable: <code>(bool?)catObj.[&quot;IncludeCategory&quot;] == true</code>"}, {"post_id": 67788791, "comment_id": 119825083, "body": "Is that all you need to answer your question?  You don&#39;t show any JSON in your question so it&#39;s not clear where you need to add the Boolean filter, so if you need something more specific, please share a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}, {"post_id": 67788791, "comment_id": 119832497, "body": "@dbc I&#39;ve edited the post to include examples of the json files."}], "answers": [{"answer_id": 67800872, "question_id": 67788791, "body": "<p>Okay, I had to change the join to a right join as stated in my first post. Now I can access all the fields in the where clause.</p>\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.IO;\nusing System.Data;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\n\nclass TestClass\n{\n    public static void Test()\n    {\n        // Load categories.json\n        JObject catObj = JObject.Load(new JsonTextReader(File.OpenText(&quot;D:/Code/Tests/categories.json&quot;)));\n        // Load techtypes.json\n        JObject ttObj = JObject.Load(new JsonTextReader(File.OpenText(&quot;D:/Code/Tests/techtypes.json&quot;)));\n\n        foreach (var categoriesJson in catObj)\n        {\n            // Filter variables\n            var gameVersions = new HashSet&lt;string&gt; { &quot;A&quot;, &quot;1&quot; };\n            var categoryIDs = new HashSet&lt;string&gt; { &quot;metals&quot;, &quot;tablets&quot; };\n            var usedInMod = new HashSet&lt;bool&gt; { true };\n\n            // Right outer join on catObj.  Select all Items[*] array items\n            var query = from c in catObj.SelectTokens(&quot;Categories[*]&quot;).OfType&lt;JObject&gt;()\n                                    let categoryId = (string)c[&quot;CategoryID&quot;]\n\n                                    // Join catObj with ttObj on CategoryID\n                                    join t in ttObj.SelectTokens(&quot;TechType[*]&quot;) on categoryId equals (string)t[&quot;CategoryID&quot;]\n                                    let gameVersionC = (string)c[&quot;GameVersion&quot;]\n                                    let gameVersionT = (string)t[&quot;GameVersion&quot;]\n                                    // Process the filters\n                                    where categoryIDs.Count() &gt; 0 ?\n                                    usedInMod.Contains((bool)c[&quot;UsedInMod&quot;]) &amp;&amp; gameVersions.Contains(gameVersionC) &amp;&amp; gameVersions.Contains(gameVersionT) &amp;&amp; categoryIDs.Contains(categoryId) :\n                                    usedInMod.Contains((bool)c[&quot;UsedInMod&quot;]) &amp;&amp; gameVersions.Contains(gameVersionC) &amp;&amp; gameVersions.Contains(gameVersionT)\n\n                                    select new\n                                    {\n                                        CategoryDescription = c[&quot;CategoryDescription&quot;],\n                                        CategoryID = c[&quot;CategoryID&quot;],\n                                        TechName = t[&quot;TechName&quot;],\n                                        SpawnID = t[&quot;SpawnID&quot;],\n                                        TechID = t[&quot;TechID&quot;],\n                                        GameVersion = t[&quot;GameVersion&quot;]\n                                    };\n\n            var results = query.ToList(); // Materialize the query into a list of results.\n\n            Console.WriteLine(JsonConvert.SerializeObject(results, Formatting.Indented));\n\n            Console.WriteLine();\n        }\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        try\n        {\n            TestClass.Test();\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(&quot;Failed with unhandled exception: &quot;);\n            Console.WriteLine(ex);\n            throw;\n        }\n    }\n}\n</code></pre>\n"}], "is_answered": true, "answer_count": 1, "last_activity_date": 1622679406, "question_id": 67788791, "title": "How to filter a Boolean field in a json join", "body": "<p>My apologies for being back so soon. I've tried many ways, but I can't compile the code because everything I've tried tells me I can't do that with a boolean field. Every example I've searched gives examples for ? x == 1. But I'm trying to filter for a field that has a boolean value ? x == true.</p>\n<p>I've tried filtering in the foreach loop, changing to a for loop, adding a condition to the where also to the join and a RemoveAll. I can't find/think of any other ways to try. Inexperience is killing me.</p>\n<p>I need to filter catObj.[&quot;IncludeCategory&quot;] == true.</p>\n<p>Any help is appreciated.</p>\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.IO;\nusing System.Data;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\n\nclass TestClass\n{\n  public static void Test()\n  {\n    // Load categories.json\n    JObject catObj = JObject.Load(new JsonTextReader(File.OpenText(&quot;D:/Code/Tests/categories.json&quot;)));\n    // Load techtypes.json\n    JObject ttObj = JObject.Load(new JsonTextReader(File.OpenText(&quot;D:/Code/Tests/techtypes.json&quot;)));\n\n    foreach (var categoriesJson in catObj)\n        //foreach (var categoriesJson in GetCategoriesJson())\n        foreach (var itemsJson in ttObj)\n      {\n        // Filter variables\n        var gameVersions = new HashSet&lt;string&gt; { &quot;A&quot;, &quot;2&quot; };\n        var categoryIDs = new HashSet&lt;string&gt; { &quot;outcrop&quot; };\n\n        // Left outer join on ttObj.  Select all Items[*] array items\n        var query = from i in ttObj.SelectTokens(&quot;TechType[*]&quot;).OfType&lt;JObject&gt;()\n                      // Filter on the game version and category ID\n                    let categoryId = (string)i[&quot;CategoryID&quot;]\n                    let gameVersion = (string)i[&quot;GameVersion&quot;]\n                    where\n                    categoryIDs.Count() &gt; 0 ? \n                      categoryIDs.Contains(categoryId) &amp;&amp; gameVersions.Contains(gameVersion) &amp;&amp; gameVersions.Contains(gameVersion)  : gameVersions.Contains(gameVersion) &amp;&amp; gameVersions.Contains(gameVersion)\n\n                    // Join with &quot;Categories[*]&quot; on category ID\n                    join c in catObj.SelectTokens(&quot;Categories[*]&quot;) on categoryId equals (string)c[&quot;CategoryID&quot;] into joined\n                    // DefaultIfEmpty makes this a left join\n                    from cat in joined.DefaultIfEmpty()\n                      // Select all records of i and add the CategoryDescription from cat.\n                    select new JObject(i.Properties()) { new JProperty(&quot;CategoryDescription&quot;, cat?[&quot;CategoryDescription&quot;]) };\n\n        var results = query.ToList(); // Materialize the query into a list of results.\n\n        Console.WriteLine(JsonConvert.SerializeObject(results, Formatting.Indented));\n\n        Console.WriteLine();\n      }\n  }\n\n  public class TechType\n  {\n    public string CategoryID { get; set; }\n    public string TechName { get; set; }\n    public string SpawnID { get; set; }\n    public int TechID { get; set; }\n    public string GameVersion { get; set; }\n  }\n\n  public class TechTypeRoot\n  {\n    public List&lt;TechType&gt; TechType { get; set; }\n  }\n\n  public class Categories\n  {\n    public string CategoryID { get; set; }\n    public string CategoryDescription { get; set; }\n    public bool IncludeCategory { get; set; }\n    public string GameVersion { get; set; }\n  }\n\n  public class CategoriesRoot\n  {\n    public List&lt;Categories&gt; Categories { get; set; }\n  }\n}\n\npublic class Program\n{\n  public static void Main()\n  {\n    try\n    {\n      TestClass.Test();\n    }\n    catch (Exception ex)\n    {\n      Console.WriteLine(&quot;Failed with unhandled exception: &quot;);\n      Console.WriteLine(ex);\n      throw;\n    }\n  }\n}\n</code></pre>\n<p>The catObj json</p>\n<pre><code>{\n  &quot;Categories&quot;: [\n    {\n      &quot;CategoryID&quot;: &quot;baseupgrades&quot;,\n      &quot;CategoryDescription&quot;: &quot;Base Upgrades&quot;,\n      &quot;IncludeCategory&quot;: true,\n      &quot;GameVersion&quot;: &quot;A&quot;\n    },\n    {\n      &quot;CategoryID&quot;: &quot;batteries&quot;,\n      &quot;CategoryDescription&quot;: &quot;Batteries&quot;,\n      &quot;IncludeCategory&quot;: true,\n      &quot;GameVersion&quot;: &quot;A&quot;\n    },\n    {\n      &quot;CategoryID&quot;: &quot;blueprint&quot;,\n      &quot;CategoryDescription&quot;: &quot;Blueprint&quot;,\n      &quot;IncludeCategory&quot;: false,\n      &quot;GameVersion&quot;: &quot;A&quot;\n    },\n</code></pre>\n<p>The ttObj json</p>\n<pre><code>{\n  &quot;TechType&quot;: [\n    {\n      &quot;CategoryID&quot;: &quot;crystalline&quot;,\n      &quot;TechName&quot;: &quot;Quartz&quot;,\n      &quot;SpawnID&quot;: &quot;quartz&quot;,\n      &quot;TechID&quot;: 1,\n      &quot;GameVersion&quot;: &quot;A&quot;\n    },\n    {\n      &quot;CategoryID&quot;: &quot;metals&quot;,\n      &quot;TechName&quot;: &quot;Metal Salvage&quot;,\n      &quot;SpawnID&quot;: &quot;scrapmetal&quot;,\n      &quot;TechID&quot;: 2,\n      &quot;GameVersion&quot;: &quot;A&quot;\n    },\n    {\n      &quot;CategoryID&quot;: &quot;outcrop&quot;,\n      &quot;TechName&quot;: &quot;Limestone Outcrop&quot;,\n      &quot;SpawnID&quot;: &quot;limestonechunk&quot;,\n      &quot;TechID&quot;: 4,\n      &quot;GameVersion&quot;: &quot;A&quot;\n    },\n</code></pre>\n"}