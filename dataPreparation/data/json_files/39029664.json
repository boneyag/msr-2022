{"tags": ["regex", "perl"], "answers": [{"comments": [{"score": 0, "creation_date": 1471569376, "post_id": 39029708, "comment_id": 65409940, "body": "I need to replace the double and single quotes with flags so after the encoding they can be replaced back as not encoded. this leaves still encoded"}], "score": 0, "last_activity_date": 1471574377, "last_edit_date": 1471574377, "answer_id": 39029708, "question_id": 39029664, "body": "<p>It is possible to reset the values in the translation table (char2entity hash). </p>\n\n<pre><code>use HTML::Entities;\n$HTML::Entities::char2entity{'\\''} = '\\'';\n$HTML::Entities::char2entity{'\"'} = '\"';\n\n\nmy $comment = qq(&lt;br/&gt;Test&lt;br/&gt;[url=#|onclick=\"printcoupon('3569')\"]test comment[/url]);\n$comment  =  HTML::Entities::encode_entities( $comment);\n</code></pre>\n"}], "is_answered": true, "answer_count": 1, "score": 0, "last_activity_date": 1471574377, "creation_date": 1471568779, "question_id": 39029664, "title": "Preserving cetain entities from being encoded algorithm", "body": "<p>I have a string that gets parsed through the function <code>encode_entities</code>. I need to preserve double-quotes and single-quotes from being encoded so I tried replacing these characters with a flag and then <strong>after the encoding function call we replace the flags back with the double and single quote characters, un encoded</strong></p>\n\n<p>Here's my strategy:</p>\n\n<pre><code>// this is a value in the database\nmy $comment = \"&lt;br/&gt;Test&lt;br/&gt;[url=#|onclick=\"printcoupon('3569')\"]test comment[/url]\";\n$comment =~ s/\"/[dq]/g;\n$comment =~ s/'/[sq]/g;\n$comment = encode_entities($comment);\nif(index($comment,\"onclick\") != -1){\n my $start = index($comment,\"onclick=\");\n my $length = index($comment,\"\\\"]\");\n my $newStr = substr($comment,$start,$length-$start+1);\n $comment =~ s!\\[url=(.+?)\\](.+?)\\[\\/url\\]!&lt;a href=\"#\" style=\"text-decoration:none;color:#336699\" $newStr&gt;$2&lt;/a&gt;!g;\n} else {\n $comment =~ s!\\[url=(.+?)\\](.+?)\\[\\/url\\]!&lt;a href=\"$1\" style=\"text-decoration:none;color:#336699\"&gt;$2&lt;/a&gt;!g;\n}\n$comment =~ s/\\[dq\\]/\"/g;\n$comment =~ s/\\[sq\\]/'/g;\n</code></pre>\n\n<p>This code does not work, but its my strategy. Without these replacement calls, the end result is:</p>\n\n<pre><code>&lt;a href=\"#\" style=\"text-decoration:none;color:#336699\" onclick=&amp;quot;printcoupon(&amp;#39;3569&amp;#39;)&gt;test comment&lt;/a&gt;\n</code></pre>\n\n<p>When it should be</p>\n\n<pre><code>&lt;a href=\"#\" style=\"text-decoration:none;color:#336699\" onclick=\"printcoupon('3569')\"&gt;test comment&lt;/a&gt;\n</code></pre>\n\n<p><strong>Also, you can see that the end double quotes for the printcoupon function text call do not exist</strong></p>\n\n<p>I need help past this point as i am still a <strong>very new perl user</strong></p>\n\n<p><strong>UPDATE</strong></p>\n\n<pre><code>$comment =~ s/&amp;quot;/\"/g;\n$comment =~ s/&amp;#39;/'/g;\n</code></pre>\n\n<p>Seems to work but it still does not have an end double quote</p>\n"}