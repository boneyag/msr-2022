{"tags": ["asp.net", "regex"], "comments": [{"score": 1, "creation_date": 1462783253, "post_id": 37111160, "comment_id": 61764003, "body": "Try <code>var pattern = string.Format(@&quot;(?&lt;!\\S){0}(?!\\S)&quot;, wordToFind);</code>"}, {"score": 0, "creation_date": 1462783672, "post_id": 37111160, "comment_id": 61764234, "body": "Works! Cheers Wiktor, you&#39;re a star."}], "answers": [{"score": 1, "last_activity_date": 1462784364, "answer_id": 37111564, "question_id": 37111160, "body": "<p>In order to match a dynamic string that should be enclosed with spaces (or be located at the start or end of string), you can use <em>negative lookaheads</em>:</p>\n\n<pre><code>var pattern = string.Format(@\"(?&lt;!\\S){0}(?!\\S)\", wordToFind);\n                              ^^^^^^^   ^^^^^^       \n</code></pre>\n\n<p>or even safer:</p>\n\n<pre><code>var pattern = string.Format(@\"(?&lt;!\\S){0}(?!\\S)\", Regex.Escape(wordToFind));\n                                                 ^^^^^^^^^^^^^ \n</code></pre>\n\n<p>The <code>(?&lt;!\\S)</code> lookbehind will fail the match if the word is not preceded with a non-whitespace character and <code>(?!\\S)</code> lookahead will fail the match if the word is not followed with a non-whitespace character.</p>\n"}], "is_answered": true, "answer_count": 1, "score": 2, "last_activity_date": 1462784364, "creation_date": 1462783147, "question_id": 37111160, "title": "How to replace special characters using regex", "body": "<p>Using Asp.net for regex.</p>\n\n<p>I've written an extension method that I want to use to replace whole words - a word might also be a single special character like '&amp;'.</p>\n\n<p>In this case I want to replace '&amp;' with 'and', and I'll need to use the same technique to reverse it back from 'and' to '&amp;', so it must work for whole words only and not extended words like 'hand'.</p>\n\n<p>I've tried a few variations for the regex pattern - started with '\\bWORD\\b' which didn't work at all for the ampersand, and now have '\\sWORD\\s' which almost works except that it also removes the spaces around the word, meaning that a phrase like \"health &amp; beauty\" ends up as \"healthandbeauty\".</p>\n\n<p>Any help appreciated.</p>\n\n<p>Here's the extension method:</p>\n\n<pre><code>    public static string ReplaceWord(this string @this,\n        string wordToFind,\n        string replacement,\n        RegexOptions regexOptions = RegexOptions.None)\n    {\n        Guard.String.NotEmpty(() =&gt; @this);\n        Guard.String.NotEmpty(() =&gt; wordToFind);\n        Guard.String.NotEmpty(() =&gt; replacement);\n\n        var pattern = string.Format(@\"\\s{0}\\s\", wordToFind);\n\n        return Regex.Replace(@this, pattern, replacement, regexOptions);\n    }\n</code></pre>\n"}