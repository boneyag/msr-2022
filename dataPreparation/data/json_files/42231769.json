{"tags": ["regex"], "answers": [{"comments": [{"score": 0, "creation_date": 1487091898, "post_id": 42231942, "comment_id": 71623628, "body": "What about: <code>249.249.249.249</code>"}, {"score": 0, "creation_date": 1487091899, "post_id": 42231942, "comment_id": 71623631, "body": "That does appear to grab everything from 192.168.100.1 to 255. Where in the last octet of the expression would I put the [^] to stop from grabbing any particular IP?"}, {"score": 0, "creation_date": 1487092087, "post_id": 42231942, "comment_id": 71623777, "body": "now it allows all IP adresses that are valid and don&#39;t end with 127"}, {"score": 0, "creation_date": 1487092286, "post_id": 42231942, "comment_id": 71623926, "body": "That doesn&#39;t accept ips that end with <code>.126</code> or <code>.117</code>"}, {"score": 0, "creation_date": 1487092334, "post_id": 42231942, "comment_id": 71623957, "body": "Oh true let me fix that"}], "score": 0, "last_activity_date": 1487092397, "last_edit_date": 1487092397, "answer_id": 42231942, "question_id": 42231769, "body": "<p>Will <a href=\"https://regex101.com/r/hNXmE3/3\" rel=\"nofollow noreferrer\">this</a> work for you? <code>((?:2[0-5][0-5]|1\\d\\d|\\d{1,2})\\.(?:2[0-5][0-5]|1\\d\\d|\\d{1,2})\\.(?:2[0-5][0-5]|1\\d\\d|\\d{1,2})\\.(?:2[0-5][0-5]|1[^2][^7]|\\d{1,2}))$</code></p>\n"}, {"score": 0, "last_activity_date": 1487093813, "last_edit_date": 1487093813, "answer_id": 42232006, "question_id": 42231769, "body": "<p>Add a word boundary <code>\\b</code> to the end of the IP, eg:</p>\n\n<pre><code>192.168.100.[1-9][0-9]\\b\n</code></pre>\n\n<p>The word boundary, which doesn't consume any input, asserts that there <em>isn't</em> another digit.</p>\n\n<p>For the \"not 127\" example, use this:</p>\n\n<pre><code>192.168.100.1[0-9][^7&lt;]\n</code></pre>\n\n<p>Because <code>[^7]</code> will also match a following open bracket.</p>\n"}, {"comments": [{"score": 0, "creation_date": 1487093447, "post_id": 42232027, "comment_id": 71624680, "body": "Toto that works except for IPs ending in the 200-255 range testing it on <a href=\"http://regexr.com/\" rel=\"nofollow noreferrer\">regexr.com</a>"}, {"score": 0, "creation_date": 1487093840, "post_id": 42232027, "comment_id": 71624920, "body": "<code>192.168.100.(?!127)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)</code>  Looks like it was just the order for the 4th octet. Working 100% now. Thank you @Toto"}, {"score": 0, "creation_date": 1487093997, "post_id": 42232027, "comment_id": 71625020, "body": "@user2998266: Strange, it works for me, using perl. But if it works for you when exchange the order, that&#39;s cool."}], "score": 1, "last_activity_date": 1487092155, "last_edit_date": 1487092155, "answer_id": 42232027, "question_id": 42231769, "body": "<p>Use the regex for ip:</p>\n\n<pre><code>^(([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))$\n</code></pre>\n\n<p>and add a negative lookahead before the last part of ip:</p>\n\n<pre><code>^(([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}(?!127)([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))$\n//                                      here __^^^^^^^\n</code></pre>\n\n<p>For your specific address:</p>\n\n<pre><code>^192.168.100.(?!127)([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))$\n</code></pre>\n\n<p>This will accept all the range <code>192.168.100.0</code> to <code>192.168.100.255</code> except <code>192.168.100.127</code></p>\n"}], "is_answered": true, "answer_count": 3, "score": 0, "last_activity_date": 1487093813, "creation_date": 1487091092, "question_id": 42231769, "title": "Regular Expression for IP subnet with exclusion", "body": "<p>I am trying to set up an XML config file for TACACS. I am not the best at REGEX.</p>\n\n<p>Essentially you can specify a group of clients. They make this easy to do if you want to include a whole subnet with:</p>\n\n<pre><code>      &lt;Client&gt;192.168.100.*&lt;/Client&gt;\n</code></pre>\n\n<p>The problem I am running into is that I want to do different things for different clients (firewalls). For example, I want to say all clients in subnet 192.168.100.* EXCEPT for 192.168.100.127. </p>\n\n<p>I immediately noticed a couple of problems.</p>\n\n<p>192.168.100.[1-9][0-9] should cover 192.168.100.10-99 but grabs triple digit IPs in the last octet as well. Like 192.168.100.101 because it matches the 10 in 101. Same problem for 192.168.100.[1-9] as it grabs the first digit.</p>\n\n<p>How do I force it to only grab one or two digits?</p>\n\n<p>As for the exclusion I tried: 192.168.100.1[0-9][^7] It managed to not grab 192.168.100.127 but grabbed 192.168.100.11 as well when it should only be checking 100-199. </p>\n\n<p>Any help would be appreciated. Thanks.</p>\n"}