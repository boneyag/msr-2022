{"tags": ["regex", "bash", "awk", "sed", "replace"], "comments": [{"score": 0, "creation_date": 1523443043, "post_id": 49771370, "comment_id": 86560519, "body": "how to handle tabulations with sed? as with awk: <code>\\t</code>"}, {"score": 0, "creation_date": 1523518197, "post_id": 49771370, "comment_id": 86595777, "body": "Yes, I was looking in sed for the same as <code>^</code> to say &quot;start of the word&quot; but with tab separator instead of new line, where as I could have use actually <code>\\t</code>but it was just a part of my issue. Thanks anyway."}], "answers": [{"comments": [{"score": 2, "creation_date": 1523439271, "post_id": 49771494, "comment_id": 86557908, "body": "This only does the first column containing an underscore instead of the first underscore in each column"}, {"score": 0, "creation_date": 1523439335, "post_id": 49771494, "comment_id": 86557951, "body": "My bad. It needs a loop around it. Thanks for pointing that out."}], "score": 1, "last_activity_date": 1523440085, "last_edit_date": 1523440085, "answer_id": 49771494, "question_id": 49771370, "body": "<p><code>sub</code> will replace the first occurrence, so just limit the records to edit to <code>NR==1</code>, loop each column in it, replace with the <code>sub</code> and <code>print</code> the rest as-is:</p>\n\n<pre><code>$ awk 'NR==1{for(i=1;i&lt;=NF;i++)sub(/_/,\"#\",$i)}1' file\nCHROM POS ID REF ALT 76#BRS_AMC_00D2282 c21#BE_MS1038U_BE_MS1038U_c30 93#BRS_MST_DNA17_53119M 94#BRS_MST_DNA17_53120M 100#BRS_BRU_D14_0867\n01 12153 rs2454 A G 1,0,0 1,0,0 1,0,0 1,0,0 1,0,0\n01 12154 rs2455 C G 1,0,0 1,0,0 1,0,0 1,0,0 1,0,0\n</code></pre>\n\n<p>(You probably need to define <code>BEGIN{FS=OFS=\"\\t\"}</code>, if you want the output to be tab-delimited also. Explained:</p>\n\n<pre><code>$ awk '\n#BEGIN{FS=OFS=\"\\t\"}       # incase you want output tab-delimited also (not in above script)\nNR==1 {                  # process the header record only\n    for(i=1;i&lt;=NF;i++)   # loop every column header\n        sub(/_/,\"#\",$i)  # replace the first _ with #\n}1' file                 # output\n</code></pre>\n"}, {"comments": [{"score": 0, "creation_date": 1523518763, "post_id": 49774889, "comment_id": 86596095, "body": "If you explain in detail each part of your expression I may could understand why it doesn&#39;t work (does not replace underscore) if my row start with <code>76_BRS_AMC_00D2282</code> instead of <code>CHROM POS ID REF ALT</code>. But your solution works for my precise case."}, {"score": 0, "creation_date": 1523525502, "post_id": 49774889, "comment_id": 86600251, "body": "@Elysire I update my answer and it&#39;s ok now for the first column."}], "score": 1, "last_activity_date": 1523525355, "last_edit_date": 1523525355, "answer_id": 49774889, "question_id": 49771370, "body": "<p>You can try this gnu sed</p>\n\n<pre><code>sed -E '1s/(\\t?[^\\t_]+)_([^\\t]+)/\\1#\\2/g' infile\n</code></pre>\n\n<p><strong>Explain :</strong></p>\n\n<p>-E use extended regular expression</p>\n\n<p>1 operate only on line 1</p>\n\n<p>the RE (\\t?[^\\t_]+)_([^\\t]+) catch each column</p>\n\n<p>(\\t?[^\\t_]+) catch the group 1</p>\n\n<p>\\t? starting with a optional tab (optional for the first column)</p>\n\n<p>[^\\t_]+ followed by at least 1 char which is not tab or _</p>\n\n<p>followed by _</p>\n\n<p>followed by another group</p>\n\n<p>([^\\t]+) catch the group 2</p>\n\n<p>all chars which are not tab</p>\n\n<p>\\1#\\2 replace the column by group1 followed by # followed by group2</p>\n\n<p>g means operate on each column.</p>\n"}], "is_answered": true, "answer_count": 2, "score": 2, "last_activity_date": 1523525355, "creation_date": 1523438832, "question_id": 49771370, "title": "Replace first occurrence in each column with bash", "body": "<p>My input look like this (tab delimited file)</p>\n\n<pre><code>CHROM POS ID REF ALT 76_BRS_AMC_00D2282 c21_BE_MS1038U_BE_MS1038U_c30 93_BRS_MST_DNA17_53119M 94_BRS_MST_DNA17_53120M 100_BRS_BRU_D14_0867\n01 12153 rs2454 A G 1,0,0 1,0,0 1,0,0 1,0,0 1,0,0\n01 12154 rs2455 C G 1,0,0 1,0,0 1,0,0 1,0,0 1,0,0\n</code></pre>\n\n<p>And I would like a \"#\" instead of the first \"_\" in each column name</p>\n\n<pre><code>CHROM POS ID REF ALT 76#BRS_AMC_00D2282 c21#BE_MS1038U_BE_MS1038U_c30 93#BRS_MST_DNA17_53119M 94#BRS_MST_DNA17_53120M 100#BRS_BRU_D14_0867\n01 12153 rs2454 A G 1,0,0 1,0,0 1,0,0 1,0,0 1,0,0\n01 12154 rs2455 C G 1,0,0 1,0,0 1,0,0 1,0,0 1,0,0\n</code></pre>\n\n<p>I don't know how to handle tabulations with sed, I tried with awk</p>\n\n<pre><code>awk -F \"\\t\" '/_/ &amp;&amp; count &lt; 2 {gsub(\"_\",\"#\");count++} {print $0}'\n</code></pre>\n\n<p>But it just replace all \"_\" and not just the first occurrence</p>\n\n<p>I would like a awk or sed solution. </p>\n\n<p>(Sorry if it's a replicated question, I did not find the answer)</p>\n"}