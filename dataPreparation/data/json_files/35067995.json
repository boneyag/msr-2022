{"tags": ["django", "python-3.x", "django-models", "many-to-many"], "comments": [{"score": 0, "creation_date": 1454002072, "post_id": 35067995, "comment_id": 57859123, "body": "Try that in your django shell, see if it&#39;s the same thing. Also try your db shell and manually check if the field is there and name is correct."}], "answers": [{"comments": [{"score": 0, "creation_date": 1454127479, "post_id": 35086856, "comment_id": 57917288, "body": "No change after doing that. Still get the same error of no such table comment_liked_by"}], "score": 0, "last_activity_date": 1454081319, "last_edit_date": 1454081319, "answer_id": 35086856, "question_id": 35067995, "body": "<p>I can't reproduce your error, but I identified something strange.\nIn the model Comments, the field comment_user_handle has a default value that is not correct. I suggest to remove it.</p>\n\n<p>It's possible that because of that Django is not updating the database.</p>\n\n<pre><code>class Comments(models.Model):\n    comment_body  = models.TextField(verbose_name=\"Add Comment\")\n    comment_likes = models.IntegerField(default= 0)\n    comment_created = models.DateTimeField(auto_now=True)\n    **comment_user_handle = models.OneToOneField(User,related_name='Commented_by')**\n    comment_post  = models.ForeignKey(UserPost,verbose_name='Post ID')\n    comment_liked_by = models.ManyToManyField(User,related_name='Like_List')\n</code></pre>\n"}], "is_answered": false, "answer_count": 1, "score": 0, "last_activity_date": 1454081319, "creation_date": 1454001894, "question_id": 35067995, "title": "Django : Operational Error while using ManytoMany Field", "body": "<p>This seems to be a silly problem but just dosn't go away.\nMy goal is make a simple Post,Sharing,Comments,likes etc application.\nMost of the functionalities seem to work fine with posting and commenting on post.\nSo I have a model called UserPost and another model called Comments. Comment model field has a comment_liked_by field which is ManytoMany relation to Django User Model and it is basically to store the users who have liked the particular comment.This is my models.py:-</p>\n\n<pre><code>class UserPost(models.Model):\npost_created    =  models.DateTimeField(auto_now_add= True)\npost_last_edit  =  models.DateTimeField(auto_now=True)\npost_text_body  =  models.TextField(verbose_name='Share Yourself')\npost_user_handle = models.ForeignKey(User,verbose_name='Username',default=User,on_delete=models.CASCADE)\npost_share       = models.BooleanField(default=True,verbose_name='Public')\n#post_image       = models.ImageField(blank=True,verbose_name='Add a Photo')\ndef __str__(self):\n    return (self.post_user_handle.first_name+\" \"+self.post_user_handle.last_name)\n\n\ndef get_absolute_url(self):\n   return reverse('feedviews')\n\nclass Meta:\n    verbose_name = \"Latest Post\"\n    verbose_name_plural = \"Latest Posts\"\n    ordering = [\"-post_created\"]\n\nclass Comments(models.Model):\ncomment_body  = models.TextField(verbose_name=\"Add Comment\")\ncomment_likes = models.IntegerField(default= 0)\ncomment_created = models.DateTimeField(auto_now=True)\ncomment_user_handle = models.OneToOneField(User,default=User,related_name='Commented_by')\ncomment_post  = models.ForeignKey(UserPost,verbose_name='Post ID')\ncomment_liked_by = models.ManyToManyField(User,related_name='Like_List')\n\ndef __str__(self):\n    return (self.comment_user_handle.first_name+\" \"+self.comment_user_handle.last_name+\"\\n\"+self.comment_body+\"\\n\")\n\nclass Meta:\n    verbose_name = \"Latest Comment\"\n    verbose_name_plural = \"Latest Comments\"\n    ordering = [\"-comment_created\"]\n</code></pre>\n\n<p>In views.py I call a function that gets the arguments of post_id , comment_id and username to identify the comment object that has to be updated when a user likes the comment.Here is my views.py :-</p>\n\n<pre><code>def LikeComment(request,username,post_id,comment_id):\n   user = User.objects.get(username=username)\n   post = UserPost.objects.get(post_user_handle=user,id=post_id)\n   comment = post.comments_set.get(id = comment_id)\n   comment.comment_liked_by.add(request.user)\n   comment.save()\n    return HttpResponseRedirect('/')\n</code></pre>\n\n<p>The problem is everytime I run the server and a user clicks like ,adding request.user to the comment_liked_by set, I get an Operational Error with no such table called comment_liked_by. I have ran makemigration and migrate without issue.Where am I going wrong?Is the onetoone relation with User model and Many to Many relation fields clashing? I have tried to implement this with a foreign Key but that seems more complicated. Thanks in advance.</p>\n"}