{"tags": ["python", "django"], "comments": [{"score": 1, "creation_date": 1459882640, "post_id": 36434698, "comment_id": 60484065, "body": "What is the type of <code>request.user</code>?"}, {"score": 0, "creation_date": 1459882723, "post_id": 36434698, "comment_id": 60484119, "body": "@JohnGordon &lt;class django.utils.functional.SimpleLazyObject&gt;"}, {"score": 1, "creation_date": 1459882769, "post_id": 36434698, "comment_id": 60484148, "body": "That&#39;s the reason then; <code>Post.author</code> has to be a <code>User</code> object, just as the error message said."}, {"score": 0, "creation_date": 1459882784, "post_id": 36434698, "comment_id": 60484165, "body": "likely because of  <code>author = models.ForeignKey(User, unique=True)</code>"}, {"score": 0, "creation_date": 1459882884, "post_id": 36434698, "comment_id": 60484224, "body": "@JohnGordon So how do I convert it into a User object"}, {"score": 0, "creation_date": 1459882901, "post_id": 36434698, "comment_id": 60484232, "body": "@nathan.meadows What should I do to change it"}, {"score": 0, "creation_date": 1459882963, "post_id": 36434698, "comment_id": 60484272, "body": "If you want to keep that foreign key reference then you need it to be an instance of the user object as @JohnGordon suggested"}, {"score": 1, "creation_date": 1459883003, "post_id": 36434698, "comment_id": 60484291, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/10506766/django-purpose-of-django-utils-functional-simplelazyobject\">django: Purpose of django.utils.functional.SimpleLazyObject?</a>"}, {"score": 0, "creation_date": 1459884477, "post_id": 36434698, "comment_id": 60485191, "body": "Don&#39;t forget to call the <code>is_authenticated</code> method in your lambda function, i.e. <code>u.is_authenticated()</code>. Otherwise it will always evaluate to <code>True</code>! In this case, you could use <code>login_required</code> instead of <code>user_passes_test</code>."}], "answers": [{"score": 0, "last_activity_date": 1459883165, "answer_id": 36434967, "question_id": 36434698, "body": "<p>I had to change the following:</p>\n\n<pre><code>author = models.ForeignKey(User)\n</code></pre>\n\n<p>to this:</p>\n\n<pre><code>author = models.ForeignKey('auth.User')\n</code></pre>\n"}, {"score": 0, "last_activity_date": 1497030978, "last_edit_date": 1497030978, "answer_id": 36441023, "question_id": 36434698, "body": "<p>I am using django 1.8 and your code is work for me.\nif your site is login, <code>request.user</code> give the User instance\nfor example:</p>\n\n<pre><code>print request.user\n</code></pre>\n"}], "is_answered": true, "answer_count": 2, "score": 1, "last_activity_date": 1497030978, "creation_date": 1459882297, "question_id": 36434698, "title": "Python Django: &quot;Post.author&quot; must be a &quot;User&quot; instance", "body": "<p>When I try to assign an author, or user to a Post, Django spews out the following error:</p>\n\n<pre><code>Cannot assign \"&lt;User: henrydavidzhu&gt;\": \"Post.author\" must be a \"User\" instance.\n</code></pre>\n\n<p>Here is my views.py:</p>\n\n<pre><code>user_passes_test(lambda u: u.is_authenticated)\ndef add_post(request):\n    form = PostForm(request.POST or None)\n\n    print(\"User: \" + str(request.user))\n\n    if form.is_valid() and request.user.is_authenticated():\n        post = form.save(commit=False)\n        post.author = request.user\n        post.save()\n        return redirect(post)\n    else:\n        print(form.errors)\n\n    return render_to_response('webapp/startthread.html', \n                              { 'form': form },\n                              context_instance=RequestContext(request))\n</code></pre>\n\n<p>And here is my forms.py:</p>\n\n<pre><code>class PostForm(forms.ModelForm):\n    CHOICES = (\n        ('Hardware and OS', '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Desktops'),\n    )\n    field = forms.ChoiceField(choices=CHOICES)\n\n    class Meta:\n        model = Post\n        exclude = ['author', 'slug']\n</code></pre>\n\n<p>And here is my models.py:</p>\n\n<pre><code>class Post(models.Model):\n    title = models.CharField(max_length=500)\n    slug = models.SlugField(unique=True)\n    text = models.TextField()\n    created_on = models.DateTimeField(auto_now_add=True)\n    author = models.ForeignKey(User, unique=True)\n\n    def __unicode__(self):\n        return self.title\n\n    @models.permalink\n    def get_absolute_url(self):\n        return ('blog_post_detail', (), \n                {\n                    'slug' :self.slug,\n                })\n\n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.title)\n        super(Post, self).save(*args, **kwargs)\n</code></pre>\n"}