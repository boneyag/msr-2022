{"tags": ["regex"], "comments": [{"score": 0, "creation_date": 1626291427, "post_id": 68384084, "comment_id": 120856833, "body": "I think you want <code>^\\w+(?:\\s*,\\s*\\w+){2}$</code> <a href=\"https://regex101.com/r/N2Q3wh/1\" rel=\"nofollow noreferrer\">regex101.com/r/N2Q3wh/1</a>"}, {"score": 0, "creation_date": 1626291470, "post_id": 68384084, "comment_id": 120856846, "body": "You can use: <code>^ *\\w+(?: *, *\\w+){2} *$</code>"}, {"score": 0, "creation_date": 1626291613, "post_id": 68384084, "comment_id": 120856892, "body": "Thanks these both seem to work.  Is one preferrable to other?  Can you guys post as answer so I can accept/upvote - if you want the rep?"}, {"score": 0, "creation_date": 1626291642, "post_id": 68384084, "comment_id": 120856904, "body": "@anubhava yours matches to some invalid cases like <code>boo,bar,baz,bang</code>"}, {"score": 1, "creation_date": 1626291741, "post_id": 68384084, "comment_id": 120856940, "body": "The advantage of anubhava&#39;s pattern is that the spaces are also allowed at the start and at the end of the pattern. @AdamHughes I don&#39;t think that matches right? <a href=\"https://regex101.com/r/r6wfdb/1\" rel=\"nofollow noreferrer\">regex101.com/r/r6wfdb/1</a>"}, {"score": 1, "creation_date": 1626291887, "post_id": 68384084, "comment_id": 120856984, "body": "I&#39;m sorry I had highlighted that with my mouse and mistakenly thought it was matching!"}], "answers": [{"comments": [{"score": 0, "creation_date": 1626293166, "post_id": 68384244, "comment_id": 120857356, "body": "Note that it can also match <code>,, </code> as all the quantifiers are optional except for the last one and <code>\\W</code> matches a non word character, that also be for example <code>#</code> instead of a space. The pattern is also missing the <code>$</code> anchor to prevent a partial match."}, {"score": 0, "creation_date": 1626597663, "post_id": 68384244, "comment_id": 120931478, "body": "Thank you, @Thefourthbird, you are right."}], "score": 0, "last_activity_date": 1626292439, "last_edit_date": 1626292439, "answer_id": 68384244, "question_id": 68384084, "body": "<p>Try\n<code> ^\\w*\\W?,\\W?\\w*\\W?,\\W?(\\w| ){1,} </code></p>\n<p>(I tested by your examples)</p>\n"}, {"comments": [{"score": 0, "creation_date": 1626294920, "post_id": 68384614, "comment_id": 120857886, "body": "Just curious (no big deal) why is this considered invalid? <code>foo,bar,baz bang</code>?  Because <code>baz bang</code> is two words?"}, {"score": 1, "creation_date": 1626296081, "post_id": 68384614, "comment_id": 120858250, "body": "@AdamHughes A word character <code>\\w</code> does not match a space. If you want, you could also optionally repeat a space followed by word characters <code>^\\w+(?:\\s+\\w+)*(?:\\s*,\\s*\\w+(?:\\s+\\w+)*){2}$</code> <a href=\"https://regex101.com/r/j9ebex/1\" rel=\"nofollow noreferrer\">regex101.com/r/j9ebex/1</a>"}, {"score": 1, "creation_date": 1626296408, "post_id": 68384614, "comment_id": 120858356, "body": "Or even <code>^ *[^,]+(?: *, *[^,]+){2} *$</code> (assuming input string is in single line)"}, {"score": 1, "creation_date": 1626296457, "post_id": 68384614, "comment_id": 120858377, "body": "Or matching at least 1 word char per part between the comma&#39;s <code>^[^,\\n\\w]*\\w[^,\\n]*(?:\\s*,[^,\\n\\w]*\\w[^,\\n]*){2}$</code> <a href=\"https://regex101.com/r/pgNzKl/1\" rel=\"nofollow noreferrer\">regex101.com/r/pgNzKl/1</a>"}], "score": 2, "last_activity_date": 1626294062, "answer_id": 68384614, "question_id": 68384084, "body": "<p>The pattern <code>^[\\w],[\\w],[\\w]$</code> that you tried, can be written as <code>^\\w,\\w,\\w$</code> and matches 3 times a single word char with a comma in between.</p>\n<p>The pattern <code>^[a-zA-Z0-9_.-]*,[a-zA-Z0-9_.-]*,[a-zA-Z0-9_.-]*$</code> matches 3 times repeating 0 or more times any of the listed chars/ranges in the character class with a comma in between.</p>\n<p>As the quantifier <code>*</code> is 0 or more times, it could possibly also match <code>,,</code></p>\n<hr>\n<p>If the word chars should be present at all 3 occasions, and there can not be spaces at the start and end:</p>\n<pre><code>^\\w+(?:\\s*,\\s*\\w+){2}$\n</code></pre>\n<ul>\n<li><code>^</code> Start of string</li>\n<li><code>\\w+</code> Match 1+ word chars</li>\n<li><code>(?:\\s*,\\s*\\w+){2}</code> Repeat 2 times matching a comma between optional whitspace chars and 1+ word chars</li>\n<li><code>$</code> End of string</li>\n</ul>\n<p><a href=\"https://regex101.com/r/XBEApH/1\" rel=\"nofollow noreferrer\">Regex demo</a></p>\n<p><strong>Note</strong> that <code>\\s</code> can also match a newline. If you want to match spaces only, and the string can also start and end with a space you could use the pattern from @<a href=\"https://stackoverflow.com/users/548225/anubhava\">anubhava\n</a> from <a href=\"https://stackoverflow.com/questions/68384084/regex-for-example-three-comma-separated-words#comment120856846_68384084\">the comments</a>.</p>\n"}], "is_answered": true, "answer_count": 2, "score": 1, "last_activity_date": 1626294062, "creation_date": 1626291094, "question_id": 68384084, "title": "RegEx for example three comma-separated words", "body": "<p>We are doing lose validation on zipcode of form CITY, ST, ZIP.  These can span countries, so all of the following are valid:</p>\n<ul>\n<li><p>PITTSBURGH, PA, 15020</p>\n</li>\n<li><p>HAMILTON,ONTARIO,L8E 4B3</p>\n</li>\n</ul>\n<p>All I want to validate is that we have three comma-separated words (whitespace is fine).  All of these would be valid:</p>\n<ul>\n<li>foo, bar, baz</li>\n<li>foo,bar,baz123</li>\n</ul>\n<p>However these would be invalid because they don't have exactly two commas and three words:</p>\n<ul>\n<li>foo, bar</li>\n<li>boo,bar,baz,bang</li>\n<li>foo, bar,</li>\n<li>foo,bar,baz,</li>\n</ul>\n<h2 id=\"what-ive-tried-unsuccessfully-bban\">What I've Tried Unsuccessfully</h2>\n<pre><code>^[\\w],[\\w],[\\w]$\n\n^[a-zA-Z0-9_.-]*,[a-zA-Z0-9_.-]*,[a-zA-Z0-9_.-]*$  (Doesnt allow sapces)\n</code></pre>\n<p>Also just curious - do yall typically allow whitespaces in regex or prefer an application filters whitespace first and then applies the regex?  We can do either.</p>\n"}