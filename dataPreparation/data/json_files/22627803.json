{"tags": ["python", "django", "python-3.3"], "comments": [{"score": 1, "creation_date": 1395732250, "post_id": 22627803, "comment_id": 34458910, "body": "So it&#39;s just the return value of <code>ctime</code> that changed, right?"}, {"score": 2, "creation_date": 1395733870, "post_id": 22627803, "comment_id": 34459749, "body": "Django by default uses <code>America&#47;Chicago</code> as time zone in settings if you have not defined any. See: <a href=\"https://docs.djangoproject.com/en/1.6/ref/settings/#time-zone\" rel=\"nofollow noreferrer\">docs.djangoproject.com/en/1.6/ref/settings/#time-zone</a>"}, {"score": 0, "creation_date": 1395800448, "post_id": 22627803, "comment_id": 34498856, "body": "@satoru yep, it started with ctime. Since ctime itself is wrong, all other dates have the same problem. I tried <code>datetime.utcfromtimestamp</code> instead of <code>time.ctime</code> as well but the problem persists."}], "answers": [{"score": 1, "last_activity_date": 1395734626, "answer_id": 22628568, "question_id": 22627803, "body": "<p>Make sure of the Time Zone settings in settings.py, for more info about Django Time Zone Settings, check this page: <a href=\"https://docs.djangoproject.com/en/1.6/ref/settings/#time-zone\" rel=\"nofollow\">https://docs.djangoproject.com/en/1.6/ref/settings/#time-zone</a></p>\n"}, {"score": 1, "last_activity_date": 1395804580, "answer_id": 22650947, "question_id": 22627803, "body": "<p>In <code>./django/conf/__init__.py:126:</code>, <code>TZ</code> environment variable is set based on <code>settings.py</code>.</p>\n\n<pre><code>os.environ['TZ'] = self.TIME_ZONE\n</code></pre>\n\n<p>My TIME_ZONE is UTC.</p>\n\n<p>That's why a standalone script result is different from a snippet inside Django: when running standalone, this environment variable <code>TZ</code>isn't set. </p>\n\n<p>Now, when creating a datetime object from a myfile_ctime, I just need to add tzinfo from my server (<code>/etc/sysconfig/clock</code>). My code now looks like this:</p>\n\n<pre><code>import time\nimport pytz\nimport os\nfrom datetime import datetime\n\nmyfile = SOMEWHERE\n\nmyfile_ctime = os.path.getctime(myfile)\n\nny = pytz.timezone(\"America/New_York\")\nd = datetime.fromtimestamp(myfile_ctime, tz=ny)\nmytz = pytz.timezone(MY_TZ_WHATEVER)\nmyd = d.astimezone(mytz)\nfinal_date = myd.strftime('%Y-%m-%d %H:%M:%S')\n</code></pre>\n\n<p>I hope this is useful to someone. As always, read the source. :)</p>\n"}], "is_answered": true, "answer_count": 2, "score": 1, "last_activity_date": 1395804626, "creation_date": 1395731901, "question_id": 22627803, "title": "Does django mess up with python&#39;s datetime?", "body": "<p>I have a file that I check it's creation time using ctime. Here is the snippet of code (not complete, just the important part):</p>\n\n<pre><code>import time\nimport pytz\nimport os\nfrom datetime import datetime\n\nmyfile = SOMEWHERE\n\nmyfile_ctime = os.path.getctime(myfile)\nd = datetime.strptime(time.ctime(myfile_ctime), '%a %b %d %H:%M:%S %Y')\n# d here is Tue Mar 25 00:33:40 2014 for example\nny = pytz.timezone(\"America/New_York\")\nd_ny = ny.localize(d)\nmytz = pytz.timezone(MY_TZ_WHATEVER)\nmyd = d_ny.astimezone(mytz)\nfinal_date = myd.strftime('%Y-%m-%d %H:%M:%S')\nprint(final_date + \"some string\") \n# is now 2014-03-25 01:33:40some string, correctly with the timezone.\n</code></pre>\n\n<p>When this is run as a simple python script, everything is ok. But when I run the <strong>same</strong> code inside a function in a <code>templatetags/myfile.py</code> that renders to a template in a Django App, when trying to get the date from <code>time.ctime(myfile_ctime)</code>, then I get <strong>Tue Mar 25 04:33:40</strong> instead of <strong>Tue Mar 25 00:33:40</strong> from the snippet above (the code is <strong>the same</strong> in the standalone script and in Django - and I concatenate the date with another string).</p>\n\n<p>My question is: I'm using just Python standard libraries, same snippet of code in both places, reading the same file in the same environment. Why the difference? Do settings in settings.py <em>mangles up</em> something in the standard libraries? Just being in a Django environment it changes how standard libraries should work? Why when calling standalone everything works as it should?</p>\n\n<p>(I'm behind apache, don't know if this is relevant)</p>\n"}