{"tags": ["python", "django", "model", "foreign-keys"], "answers": [{"answer_id": 37840037, "question_id": 37839867, "body": "<p>You don't need to pass the department id, the instance itself is enough. The following should work just fine:</p>\n\n<pre><code>new_team = Team(\n    nickname = team_name,\n    employee_id = employee_id,\n    department_id = Department.objects.get(password = password, department_name = department_name)\n)\n</code></pre>\n\n<p>Just a note, don't ever name your foreign fields <em>something</em>_id. That <em>something</em> is enough. Django is meant to make things easy from the user's perspective and the <code>_id</code> suffix means you're thinking of the database layer. In fact, if you named your column <code>department</code>, django will automatically create <code>department_id</code> column in the database for you. The way things are, you're making django create <code>department_id_id</code> which is rather silly.</p>\n"}, {"answer_id": 68571083, "question_id": 37839867, "body": "<p>This came up first on a Google search so offering an alternative for newcomers. You can also do it this way in case you have handy access to the id and don't want to do another query:</p>\n<pre><code>new_team = Team(\n    nickname = team_name,\n    employee_id = employee_id,\n    department_id_id = Department.objects.get(password = password, department_name = department_name).department_id\n)\n</code></pre>\n<p>In short, <code>{foreign_key_name}_id</code> if you want to assign the id directly.</p>\n"}], "is_answered": true, "answer_count": 2, "last_activity_date": 1627540042, "question_id": 37839867, "title": "Django error. Cannot assign must be an instance", "body": "<p>I get the following error when I try to run an insert into one of my tables.</p>\n\n<blockquote>\n  <p>Cannot assign \"1\": \"Team.department_id\" must be a \"Department\" instance</p>\n</blockquote>\n\n<p>Admittedly I'm slightly unsure if I'm using the foreign key concept correctly. The insert I'm trying to run and a snippet from my models.py are given below. </p>\n\n<p>What I'm trying to do is that when someone wants to create a new team. They have to attach it to a department. Therefore the department ID should be in both sets of tables. </p>\n\n<pre><code>new_team = Team(\n    nickname = team_name,\n    employee_id = employee_id,\n    department_id = int(Department.objects.get(password = password, department_name = department_name).department_id)\n)\n</code></pre>\n\n<p>models.py</p>\n\n<pre><code>class Department(models.Model):  \n    department_id = models.AutoField(auto_created=True, primary_key=True, default=1)  \n    department_name = models.CharField(max_length=60)\n    head_id = models.CharField(max_length=30)\n    password = models.CharField(max_length=128)\n\n\nclass Team(models.Model):  \n    team_id = models.AutoField(primary_key=True)\n    department_id = models.ForeignKey('Department', related_name = 'Department_id')\n    employee_id = models.CharField(max_length=30)\n    nickname = models.CharField(max_length=60)\n    team_image = models.ImageField(upload_to=get_image_path, blank=True, null=True)\n</code></pre>\n"}