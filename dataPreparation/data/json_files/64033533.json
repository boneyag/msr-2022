{"tags": ["django", "postgresql", "docker", "kubernetes", "yaml"], "answers": [{"comments": [{"score": 1, "creation_date": 1600975959, "post_id": 64033722, "comment_id": 113267295, "body": "Thanks a lot!! Was digging deep how to fix this!! Finally got it right!!  I ran the PostGreSQL container first and then ran &quot;kubectl get svc -n trojanwall&quot;, and got the ClusterIP of the Postgresql container. Then I added it to the environment variable(POSTGRES_SERVICE_HOST) of the python app&#39;s deployment file.  The app&#39;s container was instantly connected to the db container!  This helped a lot! Cheers!"}, {"score": 0, "creation_date": 1600976086, "post_id": 64033722, "comment_id": 113267347, "body": "But let me ask. Is there any way to pro actively add the clusterIP of the postgres db container to env variable((POSTGRES_SERVICE_HOST)of the python app&#39;s deployment file ?? Please do tell."}, {"score": 0, "creation_date": 1600976691, "post_id": 64033722, "comment_id": 113267595, "body": "From this answer, it looks like it may work with a DNS-name in that field: <a href=\"https://dba.stackexchange.com/a/260243/106\">dba.stackexchange.com/a/260243/106</a>"}, {"score": 0, "creation_date": 1601453927, "post_id": 64033722, "comment_id": 113409881, "body": "It seems that we can specify any random clusterIP for the postgres container in the service.yml file itself. Eg: &lt;Postgres-service.yml&gt; apiVersion: v1 kind: Service metadata: name: postgresql namespace: trojanwall labels: app: postgres-db spec: clusterIP: 10.107.194.222 #Specify the ClusterIP type: ClusterIP ports: - port: 5432 targetPort: 5432 protocol: TCP"}, {"score": 0, "creation_date": 1601453943, "post_id": 64033722, "comment_id": 113409892, "body": "And now we can specify the ClusterIP in the &quot;POSTGRES_SERVICE_HOST&quot; environment variable in the python app&#39;s deployment file. Eg: &lt;pythonapp-deploy.yml&gt; spec: containers: env: - name: POSTGRES_SERVICE_HOST value: &quot;10.107.194.222&quot; # ClusterIP"}], "score": 3, "last_activity_date": 1600884136, "last_edit_date": 1600884136, "answer_id": 64033722, "question_id": 64033533, "body": "<pre><code>kind: Service\nmetadata:\n  name: postgresql\n  namespace: trojanwall  \n  labels:\n    app: postgres-db\nspec:\n  type: ClusterIP\n</code></pre>\n<p>You service for the PostreSQL instance will allocate a new IP address from the Kubernetes cluster, since your service has type <code>ClusterIP</code>. This is well.</p>\n<p>But your Python app has to connect to PostgreSQL on <em>that IP address</em> and <strong>not</strong> to <code>127.0.0.1</code>.</p>\n<p>From the line below in your <code>setting.py</code> it looks like the IP address for your PostgreSQL instance can be overridden, it must be changed to reflect the IP in the Kubernetes cluster.</p>\n<pre><code>        'HOST': os.getenv('POSTGRES_SERVICE_HOST','127.0.0.1'),\n</code></pre>\n<p>Update your <code>Deployment</code> for the app, to contain an environment value for <code>POSTGRES_SERVICE_HOST</code>.</p>\n<p>Example:</p>\n<pre><code>    spec:\n      containers:\n      - name: trojanwall-django\n        image: arbabu/trojan-wall:v3.0\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8000\n        env:\n          - name: POSTGRES_SERVICE_HOST\n            value: &quot;&lt;INSERT YOUR IP ADDRESS&gt;&quot; # update this to reflect your IP\n          - name: POSTGRES_USER\n            valueFrom:\n              secretKeyRef:\n                name: postgres-db-credentials\n                key: user\n          - name: POSTGRES_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                name: postgres-db-credentials\n                key: password\n</code></pre>\n"}], "is_answered": true, "answer_count": 1, "score": 1, "last_activity_date": 1629446564, "creation_date": 1600883075, "question_id": 64033533, "title": "Kubernetes: Django and Postgres Containers don&#39;t communicate", "body": "<p>I have created a <strong>Django-Python application with a postgres database</strong>. Its working fine in my PC as well as in any other windows based systems.\nI am trying to use K8s to host the application.\nI have setup the postgres container successfully.</p>\n<p><em><strong>But when I am trying to create the Django-Python container and tryong to start it, it shows me this kind of error:</strong></em></p>\n<blockquote>\n<p>Is the server running on host &quot;127.0.0.1&quot; and accepting\nTCP/IP connections on port 5432?</p>\n</blockquote>\n<p>The Deployment and service yaml for the postgres container:</p>\n<pre><code>---\n# Deployment for the PostgreSQL container\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgresql\n  namespace: trojanwall  \n  labels:\n    app: postgres-db\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres-db\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app: postgres-db\n        tier: postgreSQL\n    spec:\n      containers:\n        - name: postgresql\n          image: postgres:10.3\n          ports:\n          - containerPort: 5432\n          env:\n          - name: POSTGRES_USER\n            valueFrom:\n              secretKeyRef:\n                name: postgres-db-credentials\n                key: user\n          - name: POSTGRES_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                name: postgres-db-credentials\n                key: password\n          - name: POSTGRES_DB\n            value: 'postgres'\n          volumeMounts:\n            - mountPath: /var/lib/postgresql/data\n              name: postgresql-volume-mount\n          resources:\n            requests:\n              memory: &quot;64Mi&quot;\n              cpu: &quot;250m&quot;\n            limits:\n              memory: &quot;128Mi&quot;\n              cpu: &quot;500m&quot;\n      volumes:\n      - name: postgresql-volume-mount\n        persistentVolumeClaim:\n          claimName: postgres-pv-claim\n---\n# Service for the PostgreSQL container\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgresql\n  namespace: trojanwall  \n  labels:\n    app: postgres-db\nspec:\n  type: ClusterIP\n  ports:\n  - port: 5432\n    targetPort: 5432\n    protocol: TCP\n  selector:\n    app: postgres-db\n    tier: postgreSQL\n</code></pre>\n<p><strong>The log of the Postgres container:</strong></p>\n<pre><code>2020-09-23 15:39:58.034 UTC [1] LOG:  listening on IPv4 address &quot;0.0.0.0&quot;, port 5432\n2020-09-23 15:39:58.034 UTC [1] LOG:  listening on IPv6 address &quot;::&quot;, port 5432\n2020-09-23 15:39:58.038 UTC [1] LOG:  listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;\n2020-09-23 15:39:58.049 UTC [23] LOG:  database system was shut down at 2020-09-23 15:37:17 UTC\n2020-09-23 15:39:58.053 UTC [1] LOG:  database system is ready to accept connections\n2020-09-23 15:47:12.845 UTC [1] LOG:  received smart shutdown request\n2020-09-23 15:47:12.846 UTC [1] LOG:  worker process: logical replication launcher (PID 29) exited with exit code 1\n2020-09-23 15:47:12.846 UTC [24] LOG:  shutting down\n2020-09-23 15:47:12.851 UTC [1] LOG:  database system is shut down\n2020-09-23 15:47:13.123 UTC [1] LOG:  listening on IPv4 address &quot;0.0.0.0&quot;, port 5432\n2020-09-23 15:47:13.123 UTC [1] LOG:  listening on IPv6 address &quot;::&quot;, port 5432\n2020-09-23 15:47:13.126 UTC [1] LOG:  listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;\n2020-09-23 15:47:13.134 UTC [24] LOG:  database system was shut down at 2020-09-23 15:47:12 UTC\n2020-09-23 15:47:13.138 UTC [1] LOG:  database system is ready to accept connections\n2020-09-23 15:47:25.722 UTC [1] LOG:  received smart shutdown request\n2020-09-23 15:47:25.724 UTC [1] LOG:  worker process: logical replication launcher (PID 30) exited with exit code 1\n2020-09-23 15:47:25.725 UTC [25] LOG:  shutting down\n2020-09-23 15:47:25.730 UTC [1] LOG:  database system is shut down\n2020-09-23 15:47:25.925 UTC [1] LOG:  listening on IPv4 address &quot;0.0.0.0&quot;, port 5432\n2020-09-23 15:47:25.925 UTC [1] LOG:  listening on IPv6 address &quot;::&quot;, port 5432\n2020-09-23 15:47:25.927 UTC [1] LOG:  listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;\n2020-09-23 15:47:25.937 UTC [23] LOG:  database system was shut down at 2020-09-23 15:47:25 UTC\n2020-09-23 15:47:25.941 UTC [1] LOG:  database system is ready to accept connections\n</code></pre>\n<p>Now when I am trying to deploy the Django-Python container, it just wont connect to the database container.</p>\n<p>Django-Python application deployment and service YAML file:</p>\n<pre><code>---\n# Deployment for the Django-Python application container\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: trojanwall-django\n  namespace: trojanwall  \n  labels:\n    app: django\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: django\n  template:\n    metadata:\n      labels:\n        app: django\n    spec:\n      containers:\n      - name: trojanwall-django\n        image: arbabu/trojan-wall:v3.0\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8000\n        env:\n          - name: POSTGRES_USER\n            valueFrom:\n              secretKeyRef:\n                name: postgres-db-credentials\n                key: user\n          - name: POSTGRES_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                name: postgres-db-credentials\n                key: password\n          - name: POSTGRES_DB\n            value: 'postgres'\n          - name: DATABASE_URL\n            value: postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgresql:5432/$(POSTGRES_DB)\n          - name: DJANGO_SETTINGS_MODULE\n            value: 'TestProject.settings'\n          - name: SECRET_KEY\n            valueFrom:\n              secretKeyRef:\n                name: django-secret-key\n                key: secret_key\n        resources:\n            requests:\n              memory: &quot;64Mi&quot;\n              cpu: &quot;250m&quot;\n            limits:\n              memory: &quot;128Mi&quot;\n              cpu: &quot;500m&quot;\n        volumeMounts:\n            - mountPath: /var/lib/postgresql/data\n              name: postgresql-volume-mount\n      volumes:\n      - name: postgresql-volume-mount\n        persistentVolumeClaim:\n          claimName: postgres-pv-claim\n\n---\n# Service for the Django-Python application container\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: trojanwall-django\n  namespace: trojanwall  \n  labels:\n    app: django\nspec:\n  ports:\n  - port: 8000\n    targetPort: 8000\n    protocol: TCP\n  type: NodePort\n  selector:\n    app: django\n</code></pre>\n<p>After this step, the pods do start running, but once I bash into the Django container and run the command:</p>\n<blockquote>\n<p><strong>python3 manage.py migrate</strong></p>\n</blockquote>\n<p>It shows me this error:</p>\n<pre><code>root@trojanwall-django-7df4bc7759-89bgv:/TestProject# python3 manage.py migrate\nTraceback (most recent call last):\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/backends/base/base.py&quot;, line 219, in ensure_connection\n    self.connect()\n  File &quot;/usr/local/lib/python3.8/site-packages/django/utils/asyncio.py&quot;, line 26, in inner\n    return func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/backends/base/base.py&quot;, line 200, in connect\n    self.connection = self.get_new_connection(conn_params)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/utils/asyncio.py&quot;, line 26, in inner\n    return func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/backends/postgresql/base.py&quot;, line 187, in get_new_connection\n    connection = Database.connect(**conn_params)\n  File &quot;/usr/local/lib/python3.8/site-packages/psycopg2/__init__.py&quot;, line 127, in connect\n    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\npsycopg2.OperationalError: could not connect to server: Connection refused\n        Is the server running on host &quot;127.0.0.1&quot; and accepting\n        TCP/IP connections on port 5432?\n\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &quot;manage.py&quot;, line 21, in &lt;module&gt;\n    main()\n  File &quot;manage.py&quot;, line 17, in main\n    execute_from_command_line(sys.argv)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/core/management/__init__.py&quot;, line 401, in execute_from_command_line\n    utility.execute()\n  File &quot;/usr/local/lib/python3.8/site-packages/django/core/management/__init__.py&quot;, line 395, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/core/management/base.py&quot;, line 330, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/core/management/base.py&quot;, line 371, in execute\n    output = self.handle(*args, **options)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/core/management/base.py&quot;, line 85, in wrapped\n    res = handle_func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/core/management/commands/migrate.py&quot;, line 92, in handle\n    executor = MigrationExecutor(connection, self.migration_progress_callback)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/migrations/executor.py&quot;, line 18, in __init__\n    self.loader = MigrationLoader(self.connection)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/migrations/loader.py&quot;, line 53, in __init__\n    self.build_graph()\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/migrations/loader.py&quot;, line 216, in build_graph\n    self.applied_migrations = recorder.applied_migrations()\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/migrations/recorder.py&quot;, line 77, in applied_migrations\n    if self.has_table():\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/migrations/recorder.py&quot;, line 55, in has_table\n    with self.connection.cursor() as cursor:\n  File &quot;/usr/local/lib/python3.8/site-packages/django/utils/asyncio.py&quot;, line 26, in inner\n    return func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/backends/base/base.py&quot;, line 259, in cursor\n    return self._cursor()\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/backends/base/base.py&quot;, line 235, in _cursor\n    self.ensure_connection()\n  File &quot;/usr/local/lib/python3.8/site-packages/django/utils/asyncio.py&quot;, line 26, in inner\n    return func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/backends/base/base.py&quot;, line 219, in ensure_connection\n    self.connect()\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/utils.py&quot;, line 90, in __exit__\n    raise dj_exc_value.with_traceback(traceback) from exc_value\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/backends/base/base.py&quot;, line 219, in ensure_connection\n    self.connect()\n  File &quot;/usr/local/lib/python3.8/site-packages/django/utils/asyncio.py&quot;, line 26, in inner\n    return func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/backends/base/base.py&quot;, line 200, in connect\n    self.connection = self.get_new_connection(conn_params)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/utils/asyncio.py&quot;, line 26, in inner\n    return func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.8/site-packages/django/db/backends/postgresql/base.py&quot;, line 187, in get_new_connection\n    connection = Database.connect(**conn_params)\n  File &quot;/usr/local/lib/python3.8/site-packages/psycopg2/__init__.py&quot;, line 127, in connect\n    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\ndjango.db.utils.OperationalError: could not connect to server: Connection refused\n        Is the server running on host &quot;127.0.0.1&quot; and accepting\n        TCP/IP connections on port 5432?\n</code></pre>\n<blockquote>\n<p><strong>Does anyone know how to resolve this?</strong></p>\n</blockquote>\n<p>Here's a reference to the settings.py file's database configurations.</p>\n<pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        'NAME': os.environ.get('POSTGRES_NAME', 'postgres'),\n        'USER': os.environ.get('POSTGRES_USER', 'postgres'),\n        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'postgres'),     \n        'HOST': os.getenv('POSTGRES_SERVICE_HOST','127.0.0.1'),\n        'PORT': os.getenv('POSTGRES_SERVICE_PORT',5432)\n    }\n}\n</code></pre>\n<p>The secrets yaml file:</p>\n<pre><code>---\n# Secrets for the Database Credential Management\n\napiVersion: v1\nkind: Secret\nmetadata:\n  name: postgres-db-credentials\n  namespace: trojanwall\n  labels:\n    app: postgres-db\ntype: opaque\ndata:\n  user: cG9zdGdyZXM=\n  password: cG9zdGdyZXM=\n</code></pre>\n"}