{"tags": ["python", "regex"], "comments": [{"score": 3, "creation_date": 1463001989, "post_id": 37173523, "comment_id": 61881775, "body": "The regex you show DOES NOT match &#39;RoboCop Nakamoto\u2019"}, {"score": 0, "creation_date": 1463002031, "post_id": 37173523, "comment_id": 61881793, "body": "Show us your code, please?"}, {"score": 1, "creation_date": 1463002219, "post_id": 37173523, "comment_id": 61881885, "body": "@user6188402: Or alternatively, <code>\\b</code> to indicate explicit word boundaries within a larger block of test. But yes, the code is necessary; which <code>re</code> functions are used, the arguments passed, whether or not you&#39;re using raw strings (ALWAYS USE RAW STRINGS WITH PYTHON REGULAR EXPRESSIONS!!!!!), it all matters a lot. The Python pattern defined with <code>r&#39;\\b[A-Z][a-zA-Z]*\\sNakamoto\\b&#39;</code> should work just fine as the pattern argument to <code>re.search</code> to handle the requirements given, but small coding mistakes could break it."}, {"score": 0, "creation_date": 1463002369, "post_id": 37173523, "comment_id": 61881938, "body": "To match <code>RoboCop Nakamoto</code>, you will need to say the first part of your regex can happen from 1 to 2(for example): <code>^([A-Z][a-z]+){1,2}\\sNakamoto$</code>"}, {"score": 0, "creation_date": 1463002424, "post_id": 37173523, "comment_id": 61881968, "body": "Here is what your RegEx is saying: Match one capital letter, then match one or more lowercase letters, then match a space then match Nakamoto. Check out this site, it has helped me a lot in debugging regex: <a href=\"https://regex101.com/#python\" rel=\"nofollow noreferrer\">regex101.com/#python</a>"}, {"score": 0, "creation_date": 1463002445, "post_id": 37173523, "comment_id": 61881980, "body": "The source code used can be found in this gist: <a href=\"https://gist.github.com/anonymous/d80acd4b5beaa10f77275d9ec0dfd976\" rel=\"nofollow noreferrer\">gist.github.com/anonymous/d80acd4b5beaa10f77275d9ec0dfd976</a>"}, {"score": 6, "creation_date": 1463002530, "post_id": 37173523, "comment_id": 61882015, "body": "<code>re.I</code> - wait, you&#39;re explicitly requesting that your regex ignore case. Why are you doing that?"}, {"score": 1, "creation_date": 1463002704, "post_id": 37173523, "comment_id": 61882082, "body": "@user92592 next time, please use the <a href=\"https://stackoverflow.com/posts/37173523/edit\">edit</a> function to add your code to your question - do not post code on external websites."}, {"score": 0, "creation_date": 1463003110, "post_id": 37173523, "comment_id": 61882260, "body": "@user2357112 you are correct, I did that out of habbit! Removing it did help solve the issue."}, {"score": 0, "creation_date": 1463003189, "post_id": 37173523, "comment_id": 61882299, "body": "@user6188402 I tried this regex and it worked perfectly for the &quot;RoboCop Nakamoto&quot; case and also the others. This expression does give the desired result. :)  Thanks Everyone"}, {"score": 0, "creation_date": 1463003313, "post_id": 37173523, "comment_id": 61882340, "body": "Glad to hear that ;)"}], "answers": [{"score": 1, "last_activity_date": 1463002801, "answer_id": 37173743, "question_id": 37173523, "body": "<p><code>re.I</code> means ignore case, so the explicit upper case class you used will match both upper and lower case anyway. Don't use <code>re.I</code>. Also, to match \"RoboCop\", you need to accept more than one capital letter in a name, so you probably want:</p>\n\n<pre><code>NameSearch = re.compile(r'\\b[A-Z][a-zA-Z]+\\sNakamoto\\b', re.VERBOSE)\n</code></pre>\n\n<p>or the like. This also uses <code>\\b</code> as a word boundary detector so you don't match partway through a string like <code>fooBar Nakamoto</code>.</p>\n"}, {"comments": [{"score": 0, "creation_date": 1463003727, "post_id": 37173744, "comment_id": 61882513, "body": "@gboffi: Yar, without word anchors (<code>\\b</code>), this would match <code>roboCop Nakamoto</code> because it would ignore the <code>robo</code> and match <code>Cop Nakamoto</code>."}, {"score": 0, "creation_date": 1463005089, "post_id": 37173744, "comment_id": 61883053, "body": "My answer actually worked but only because it was using re.match() instead of re.search() which indeed requires manual anchoring as @ShadowRanger correctly pointed out. I updated the answer accordingly."}], "score": 0, "last_activity_date": 1463005811, "last_edit_date": 1463005811, "answer_id": 37173744, "question_id": 37173523, "body": "<p>Your regular expression actually works fine over here but it will not match the \"RoboCop Nakamoto\" case.</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import re\n\ndef printMatch(name):\n    pat = re.compile(r'\\b[A-Z][a-zA-Z]+\\sNakamoto')\n    if pat.search(name):\n        print '\"'+name+'\" matches'\n    else:\n        print '\"'+name+'\" does not match'\n\nprintMatch('test satoshi Nakamoto test')\nprintMatch('test Satoshi Nakamoto test')\nprintMatch('test RoboCop Nakamoto test')\nprintMatch('test roboCop Nakamoto test')\n</code></pre>\n\n<p>The output is this:</p>\n\n<pre><code>\"test satoshi Nakamoto test\" does not match\n\"test Satoshi Nakamoto test\" matches\n\"test RoboCop Nakamoto test\" matches\n\"test roboCop Nakamoto test\" does not match\n</code></pre>\n"}, {"score": 0, "last_activity_date": 1528843569, "answer_id": 50826863, "question_id": 37173523, "body": "<p>The one that worked for me:</p>\n\n<pre><code>rgx = re.compile(r'^[A-Z]\\w+ Nakamoto')\n</code></pre>\n\n<p>You can check here: <a href=\"https://regex101.com/r/lNE320/1\" rel=\"nofollow noreferrer\">https://regex101.com/r/lNE320/1</a></p>\n"}], "is_answered": true, "answer_count": 3, "score": -2, "last_activity_date": 1539950196, "creation_date": 1463001788, "question_id": 37173523, "title": "Trying to understand Python Regex&#39;s", "body": "<p>I am trying to write a Python regex to capture the full name of someone whose last name is Nakamoto? You can assume that the first name that comes before it will always be one word that begins with a capital letter. The regex must match the following:</p>\n\n<pre><code>'Satoshi Nakamoto'\n'Alice Nakamoto'\n'RoboCop Nakamoto'\n</code></pre>\n\n<p>but not the following:</p>\n\n<pre><code>'satoshi Nakamoto' (where the first name is not capitalised)\n'Mr. Nakamoto' (where the preceding word has a nonletter character)\n'Nakamoto' (which has no first name)\n'Satoshi nakamoto' (where Nakamoto is not capitalised)\n</code></pre>\n\n<p>I have used the following regex: <code>[A-Z][a-z]+\\sNakamoto</code></p>\n\n<p>However this captures both <code>Satoshi Nakamoto</code> and <code>satoshi Nakamoto</code>. I would like to understand where I am going wrong and how to correct it. Here is my code:</p>\n\n<pre><code>import re    #import regular expressions\n\n#regular expression\nNameSearch = re.compile(r'[A-Z][a-z]+\\sNakamoto', re.I | re.VERBOSE)\n\n# perform search on string\nResult = NameSearch.search(\"Satoshi Nakamoto\")\n\n#Debug code to check if it found a match or not\nprint (Result == None)\n\nif Result != None:\n    print (Result.group())\n</code></pre>\n"}