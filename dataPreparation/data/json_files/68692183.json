{"tags": ["python", "regex"], "comments": [{"post_id": 68692183, "comment_id": 121396460, "body": "Please include what you&#39;ve tried so far, so people can help you out with it."}, {"post_id": 68692183, "comment_id": 121396696, "body": "@RolvApneseth it is not much, but here you go"}, {"post_id": 68692183, "comment_id": 121396772, "body": "@porgrammer3124 I want to make sure that I understand your problem correctly. Test list contains specific characters sequences in which you want to find individual words from the words list and the expected result of this search is the content of the excepted output list?"}, {"post_id": 68692183, "comment_id": 121396825, "body": "@Xitiz <code>x</code> is any item from the list"}], "answers": [{"answer_id": 68692401, "question_id": 68692183, "body": "<p>The problem with the pattern you have i.e.<code>'((hard|qtr|quarter)(?:[[A-Za-z/\\s]+]))',</code> you have <code>\\s</code> inside squared brackets <code>[]</code> which means to match the characters individually i.e. either <code>\\</code> or <code>s</code>, instead, you can just use space character i.e. <code> </code></p>\n<p>You can join all the words in <code>words</code> list by <code>|</code> to create the pattern <code>'((qtr|hard|quarter)([a-zA-Z/ ]*))'</code>, then search for the pattern in each of strings in the list, if the match is found, take the group 0 and append it to the resulting list, else, append <code>None</code>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>pattern = re.compile('(('+'|'.join(words)+')([a-zA-Z/ ]*))')\nresult = []\nfor x in test:\n    groups = pattern.search(x)\n    if groups:\n        result.append(groups.group(0))\n    else:\n        result.append(None)      \n</code></pre>\n<p><strong>OUTPUT:</strong></p>\n<pre class=\"lang-py prettyprint-override\"><code>result\n['hard/qtr Mix', 'qtr ', 'hard ', 'hard work', None]\n</code></pre>\n<p>And since you are including the space characters, you may end up with some values that has space at the end, you can just strip off the white space characters later.</p>\n"}, {"answer_id": 68692412, "question_id": 68692183, "body": "<p>You can put all needed words in <code>or</code> expression and put your word definition after that</p>\n<pre><code>import re\n\nwords = ['qtr','hard','quarter']\n\nregex = r&quot;(&quot; + &quot;|&quot;.join(words) + &quot;)[A-Za-z\\/\\s]+&quot;\n\np = re.compile(regex)\ntest=['id:12345 cli hard/qtr Mix(qtr',\n'id:12345 cli qtr 90%',\n'id:12345 cli hard (red)',\n'id:12345 cli hard work','Hello world']\n\nfor string in test:\n    result = p.search(string)\n    if result is not None:\n        print(p.search(string).group(0))\n    else:\n        print(result)\n</code></pre>\n<p>Output:</p>\n<pre><code>hard/qtr Mix\nqtr \nhard \nhard work\nNone\n</code></pre>\n"}, {"answer_id": 68692460, "question_id": 68692183, "body": "<p>Idea extracted from <a href=\"https://stackoverflow.com/questions/68692183/regex-match-word-and-what-comes-after-it/68692401#68692401\">the existing answer</a> and made shorter :</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; pattern = re.compile('(('+'|'.join(words)+')([a-zA-Z/ ]*))')\n&gt;&gt;&gt; [pattern.search(x).group(0)  if pattern.search(x) else None for x in test])\n['hard/qtr Mix', 'qtr ', 'hard ', 'hard work', None]\n</code></pre>\n<p>As mentioned in comment :</p>\n<blockquote>\n<p>But it is quite inefficient, because it needs to search for same pattern twice, once for <code>pattern.search(x).group(0)</code> and the other one for if <code>pattern.search(x)</code>, and list-comprehension is not the best way to go about in such scenarios.</p>\n</blockquote>\n<p>We can try this to overcome that issue :</p>\n<pre><code>&gt;&gt;&gt; [v.group(0) if v else None for v in (pattern.search(x) for x in test)]\n['hard/qtr Mix', 'qtr ', 'hard ', 'hard work', None]\n</code></pre>\n"}], "is_answered": true, "answer_count": 3, "last_activity_date": 1628341785, "question_id": 68692183, "title": "regex match word and what comes after it", "body": "<p>I need some help with a regex I am writing. I have a list of words that I want to match and words that might come after them (words meaning <code>[A-Za-z/\\s]+</code>) I.e no parenthesis,symbols, numbers.</p>\n<pre><code>words = ['qtr','hard','quarter'] # keywords that must exist\n\ntest=['id:12345 cli hard/qtr Mix',\n'id:12345 cli qtr 90%',\n'id:12345 cli hard (red)',\n'id:12345 cli hard work','Hello world']\n</code></pre>\n<p>excepted output is</p>\n<pre><code>['hard/qtr Mix', 'qtr', 'hard', 'hard work', None]\n</code></pre>\n<p>What I have tried so far</p>\n<pre><code>re.search(r'((hard|qtr|quarter)(?:[[A-Za-z/\\s]+]))',x,re.I)\n</code></pre>\n"}