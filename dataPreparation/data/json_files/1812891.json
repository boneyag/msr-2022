{
  "tags": [
    "java",
    "sql",
    "regex",
    "escaping",
    "sql-injection"
  ],
  "comments": [
    {
      "score": 1,
      "creation_date": 1259598078,
      "post_id": 1812891,
      "comment_id": 1711044,
      "body": "Okay, I&#39;ve come to the conclussion that PreparedStatements are the way to go, however based off current objecctives I need to proceed as was originally planned and just put a filter in place for the time being and once the current milestone is reached I can go back and refactor the database for preparedstatement. In the mean time to maintain momentum, does someone have a solution to effectively escape the above characters for MySQL given the Java and it&#39;s regular expression system are an absolute pain to work out the number of escapes needed...."
    },
    {
      "score": 2,
      "creation_date": 1451785430,
      "post_id": 1812891,
      "comment_id": 56890068,
      "body": "Not all SQL statements are parameterizable, for example &quot;SET ROLE role_name&quot; or &quot;LISTEN channel_name&quot;"
    },
    {
      "score": 1,
      "creation_date": 1487807371,
      "post_id": 1812891,
      "comment_id": 71955830,
      "body": "@NeilMcGuigan Yep. Most drivers will also refuse to parameterize something like <code>CREATE VIEW myview AS SELECT * FROM mytable WHERE col = ?</code> since the main statement is a <a href=\"https://en.wikipedia.org/wiki/Data_definition_language\" rel=\"nofollow noreferrer\">DDL</a>-statement, even though the part you&#39;re trying to parameterize is actually <a href=\"https://en.wikipedia.org/wiki/Data_manipulation_language\" rel=\"nofollow noreferrer\">DML</a>."
    }
  ],
  "answers": [
    {
      "comments": [
        {
          "score": 11,
          "creation_date": 1259426262,
          "post_id": 1812898,
          "comment_id": 1702211,
          "body": "And even parameterized SQL isn&#39;t a 100% guarantee.  But it&#39;s a very good start."
        },
        {
          "score": 2,
          "creation_date": 1259426546,
          "post_id": 1812898,
          "comment_id": 1702230,
          "body": "@duffymo, I agree that nothing is ever 100% safe. Do you have an example of SQL injection that will work even with parameterized SQL?"
        },
        {
          "score": 3,
          "creation_date": 1259430401,
          "post_id": 1812898,
          "comment_id": 1702489,
          "body": "@Cylon Cat: Sure, when a chunk of SQL (like @WhereClause or @tableName) is passed as the parameter, concatenated into the SQL, and executed dynamically. SQL injection occurs when you let users write your code. It doesn&#39;t matter whether you capture their code as a parameter or not."
        },
        {
          "score": 0,
          "creation_date": 1259431049,
          "post_id": 1812898,
          "comment_id": 1702521,
          "body": "@Steve, thanks. I don&#39;t think I&#39;ve seen a database that would let you pass keywords or whole SQL phrases as a parameter; that sounds dangerous. Where clauses can be parameterized just like input or update values, though. SQL Server is really good about that; Oracle is iffy with it on update statements, but fine on queries. As for dynamic table names.... no thanks."
        },
        {
          "score": 16,
          "creation_date": 1259434440,
          "post_id": 1812898,
          "comment_id": 1702672,
          "body": "BTW, I don&#39;t know why this isn&#39;t mentioned more, but working with PreparedStatements is also <i>much</i> easier and <i>much</i> more readable. That alone probably makes them the default for every programmer who knows about them."
        },
        {
          "score": 0,
          "creation_date": 1259436095,
          "post_id": 1812898,
          "comment_id": 1702781,
          "body": "@Edan, it really does depend on the environment. In .NET, I know of nothing like PreparedStatements, but the combination of LINQ and an ORM provides even more safety, productivity, and maintainability. Because LINQ is integrated into C# and VB, everything about your query and results are strongly named, strongly typed, and compiler-checked. All SQL statements are generated automatically, as needed, fully parameterized. So &quot;PreparedStatement&quot; would feel like a step backwards. But it all depends on the environment and tools that you&#39;re working with; use whatever works best."
        },
        {
          "score": 0,
          "creation_date": 1259445761,
          "post_id": 1812898,
          "comment_id": 1703207,
          "body": "@Cylon: That&#39;s the argument of dynamically-generated SQL (typically by an ORM) and manually-constructed procedures. The idea of a &quot;prepared statement&quot; is fully present in .NET, though; the <code>DbCommand</code> (and associated <code>DbParameter</code>) abstract class provide full support for parameterizing your SQL, depending on the provider."
        },
        {
          "score": 0,
          "creation_date": 1259449095,
          "post_id": 1812898,
          "comment_id": 1703366,
          "body": "I&#39;ve been using a homebrew mysql/java solution where a statement such as &quot;select * from sometable where somefield = &#39;[somefield]&#39;&quot; then when I execute the query My code first escapes characters in each of the argument values... [somefield] and then does a replace of somefield with the escape string. So yeah I&#39;m just trying to find a good hook in so under the hood it uses PreparedStatements but everything else stays the same... Definitely didn&#39;t make my day to think of all the impending work of this change... So it&#39;s on tomorrow&#39;s plate"
        },
        {
          "score": 0,
          "creation_date": 1259449755,
          "post_id": 1812898,
          "comment_id": 1703401,
          "body": "@Adam, I see the parallel; DBCommand is an aggregate of SQL command, parameters, connection reference, and methods to execute the command. However, &quot;PreparedStatement&quot; suggested the idea of preparing an execution plan; I don&#39;t know if any modern databases still require this as an explicit step in client code. I know in SQL Server, it&#39;s handled automatically on the server side."
        },
        {
          "score": 4,
          "creation_date": 1259484271,
          "post_id": 1812898,
          "comment_id": 1704623,
          "body": "Please note that PreparedStatements for some databases are VERY expensive to create, so if you need to do a lot of them, measure both types."
        },
        {
          "score": 1,
          "creation_date": 1369277375,
          "post_id": 1812898,
          "comment_id": 24046180,
          "body": "@Steve Katt &quot;SQL injection occurs when you let users write your code. It doesn&#39;t matter whether you capture their code as a parameter or not.&quot;  I wouldn&#39;t call letting the user write their own code an injection vulnerability.  It&#39;s a vulnerability, but it&#39;s caused by allowing someone to write arbitrary code and execute it on your system directly.  Of COURSE that can be abused; you&#39;ve removed the requirement to perform an injection attack by inserting an IV feed into your system and giving the other end to a stranger."
        },
        {
          "score": 0,
          "creation_date": 1484880614,
          "post_id": 1812898,
          "comment_id": 70702831,
          "body": "@SteveKass that&#39;s not an example of an unsafe parameterised query. WIth parameterised queries you don&#39;t concatenate chunks of strings into the query but rather use parameter placeholders and then bind the user input using the JDBC/JPA API."
        },
        {
          "score": 0,
          "creation_date": 1485036025,
          "post_id": 1812898,
          "comment_id": 70759995,
          "body": "Unfortunately, some people <i>do</i> \u201cconcatenate chunks of strings into the query\u201d (e.g., a whole WHERE clause, or a table name - the examples I mentioned) that have been passed as parameters and then execute the query. You might not call this a \u201cparameterized query,\u201d but that phrase is sufficiently imprecise that others might. For example, someone suggested it here: <a href=\"http://stackoverflow.com/a/18524793/139164\">stackoverflow.com/a/18524793/139164</a> Yes, parameterized queries are safe when the parameters are bound to values and not concatenated into the SQL, but I don\u2019t think I suggested otherwise."
        },
        {
          "score": 0,
          "creation_date": 1555484462,
          "post_id": 1812898,
          "comment_id": 98122711,
          "body": "That&#39;s not always true. For example, if the parameter is allowed only to be alphanumeric (business requirement), all non-alphanumeric characters can be removed."
        }
      ],
      "score": 47,
      "last_activity_date": 1259424856,
      "answer_id": 1812898,
      "question_id": 1812891,
      "body": "<p>The only way to prevent SQL injection is with parameterized SQL. It simply isn't possible to build a filter that's smarter than the people who hack SQL for a living.</p>\n\n<p>So use parameters for all input, updates, and where clauses. Dynamic SQL is simply an open door for hackers, and that includes dynamic SQL in stored procedures. Parameterize, parameterize, parameterize.</p>\n"
    },
    {
      "score": 9,
      "last_activity_date": 1259424870,
      "answer_id": 1812899,
      "question_id": 1812891,
      "body": "<p>Using a regular expression to remove text which could cause a SQL injection sounds like the SQL statement is being sent to the database via a <a href=\"http://java.sun.com/javase/6/docs/api/java/sql/Statement.html\" rel=\"noreferrer\"><code>Statement</code></a> rather than a <a href=\"http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html\" rel=\"noreferrer\"><code>PreparedStatement</code></a>.</p>\n\n<p>One of the easiest ways to prevent an SQL injection in the first place is to use a <code>PreparedStatement</code>, which accepts data to substitute into a SQL statement using placeholders, which does not rely on string concatenations to create an SQL statement to send to the database.</p>\n\n<p>For more information, <a href=\"http://java.sun.com/docs/books/tutorial/jdbc/basics/prepared.html\" rel=\"noreferrer\">Using Prepared Statements</a> from <a href=\"http://java.sun.com/docs/books/tutorial/index.html\" rel=\"noreferrer\">The Java Tutorials</a> would be a good place to start.</p>\n"
    },
    {
      "comments": [
        {
          "score": 1,
          "creation_date": 1259426078,
          "post_id": 1812920,
          "comment_id": 1702195,
          "body": "via this method can you treat every parameter as a string and still be safe? I&#39;m trying to figure out a way to update my existing architecture to be safe without having to rebuild the whole database layer..."
        },
        {
          "score": 1,
          "creation_date": 1259427130,
          "post_id": 1812920,
          "comment_id": 1702262,
          "body": "All dynqmic SQL is just strings, so that isn&#39;t the question to ask. I&#39;m not familiar with PrepareStatement, so the real question is does it generate a parameterized query that can then be executed with ExecuteUpdate. If yes, that&#39;s good. If no, then it&#39;s simply hiding the problem, and you may not have any secure option except redesigning the database layer. Dealing with SQL injection is one of those things you have to design in from the beginning; it&#39;s not something you can add easily later on."
        },
        {
          "score": 2,
          "creation_date": 1259427153,
          "post_id": 1812920,
          "comment_id": 1702263,
          "body": "If you&#39;re inserting into an INTEGER field, you&#39;ll want to use a &#39;setInt&#39;.  Likewise, other numerical database fields would use other setters.  I posted a link to the PreparedStatement docs that list all the setter types."
        },
        {
          "score": 2,
          "creation_date": 1259427260,
          "post_id": 1812920,
          "comment_id": 1702267,
          "body": "Yes Cylon, PreparedStatements generate parameterized queries."
        },
        {
          "score": 2,
          "creation_date": 1259427680,
          "post_id": 1812920,
          "comment_id": 1702299,
          "body": "@Kaleb Brasee, thanks. That&#39;s good to know. The tools are different in every environment, but getting down to parameterized queries is the fundamental answer."
        },
        {
          "score": 0,
          "creation_date": 1281808932,
          "post_id": 1812920,
          "comment_id": 3637956,
          "body": "Could you please properly close JDBC resources on error? Like: try {   ... } finally {    try { pstmt.close(); } catch (java.sql.SQLException ignore) {} }  I think examples should be correct as many people will literally copy them.  If you do not like direct use of JDBC API you can use <a href=\"http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html\" rel=\"nofollow noreferrer\">static.springsource.org/spring/docs/3.0.x/javadoc-api/org/&hellip;</a>"
        },
        {
          "score": 0,
          "creation_date": 1304785247,
          "post_id": 1812920,
          "comment_id": 6820865,
          "body": "@Kaleb Brasee, I see you finally fixed the code but did not like my edit where I define variables as close where they are used as suggested by most programmers <a href=\"http://stackoverflow.com/questions/1411463/in-java-should-variables-be-declared-at-the-top-of-a-function-or-as-theyre-nee\" title=\"in java should variables be declared at the top of a function or as theyre nee\">stackoverflow.com/questions/1411463/&hellip;</a>"
        },
        {
          "score": 0,
          "creation_date": 1420863064,
          "post_id": 1812920,
          "comment_id": 44147835,
          "body": "If the query is made at run-time not only in program but also in Stored procedure, then it becomes tricky. So better to use org.apache.commons.lang.StringEscapeUtils.escapeSql(&lt;VALUE&gt;) before even passing that value to SP. Sometimes user is interested in generating dynamic SQL queries. So you can&#39;t use a static prepared query."
        },
        {
          "score": 1,
          "creation_date": 1434275931,
          "post_id": 1812920,
          "comment_id": 49701493,
          "body": "Although I always prefer using prepared statements, it might be misleading to say that  <i>PreparedStatements are the way to go, because they make SQL injection impossible.</i> In my understanding they just make injection take more effort. As noted in several questions with nobody arguing against it, f.ex. point 1 <a href=\"http://stackoverflow.com/questions/1018292/java-equivalent-for-phps-mysql-real-escape-string\">here</a> and by FindBugs <code>SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING</code>: <i>...SQL injection could be used to make the prepared statement do something unexpected and undesirable.</i>"
        },
        {
          "score": 0,
          "creation_date": 1490883536,
          "post_id": 1812920,
          "comment_id": 73320198,
          "body": "Why you just don&#39;t answer to the question ? PreparedStatement are terrible with IN clause. I still wait for a real answer to the question."
        },
        {
          "score": 0,
          "creation_date": 1541585392,
          "post_id": 1812920,
          "comment_id": 93263935,
          "body": "Prepared Statements definitely help in preventing SQL Injection attacks. Here&#39;s a short video that demonstrates using <a href=\"https://www.youtube.com/watch?v=jTasm64rz-c\" rel=\"nofollow noreferrer\">Prepared Statements with Java JDBC</a>."
        }
      ],
      "score": 261,
      "last_activity_date": 1303568553,
      "last_edit_date": 1303568553,
      "answer_id": 1812920,
      "question_id": 1812891,
      "body": "<p>PreparedStatements are the way to go, because they make SQL injection impossible.  Here's a simple example taking the user's input as the parameters:</p>\n\n<pre><code>public insertUser(String name, String email) {\n   Connection conn = null;\n   PreparedStatement stmt = null;\n   try {\n      conn = setupTheDatabaseConnectionSomehow();\n      stmt = conn.prepareStatement(\"INSERT INTO person (name, email) values (?, ?)\");\n      stmt.setString(1, name);\n      stmt.setString(2, email);\n      stmt.executeUpdate();\n   }\n   finally {\n      try {\n         if (stmt != null) { stmt.close(); }\n      }\n      catch (Exception e) {\n         // log this error\n      }\n      try {\n         if (conn != null) { conn.close(); }\n      }\n      catch (Exception e) {\n         // log this error\n      }\n   }\n}\n</code></pre>\n\n<p>No matter what characters are in name and email, those characters will be placed directly in the database.  They won't affect the INSERT statement in any way.</p>\n\n<p>There are different set methods for different data types -- which one you use depends on what your database fields are.  For example, if you have an INTEGER column in the database, you should use a <code>setInt</code> method.  <a href=\"http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html\" rel=\"noreferrer\">The PreparedStatement documentation</a> lists all the different methods available for setting and getting data.</p>\n"
    },
    {
      "comments": [
        {
          "score": 4,
          "creation_date": 1496218746,
          "post_id": 1812931,
          "comment_id": 75565591,
          "body": "The ESAPI seems defunct as of today. On AWS there is WAF which can help  against SQL injection, XSS etc. are there any other alternatives at this point?"
        },
        {
          "score": 0,
          "creation_date": 1551098431,
          "post_id": 1812931,
          "comment_id": 96503246,
          "body": "@ChrisOdney A WAF can be easily bypassed. Most Frameworks already implement their own SQL-Injection prevention in which they escape parameters automatically by their own. Alternatives for legacy projects: <a href=\"https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API#tab=Should_I_use_ESAPI_3F\" rel=\"nofollow noreferrer\">owasp.org/index.php/&hellip;</a>"
        }
      ],
      "score": 40,
      "last_activity_date": 1259426440,
      "last_edit_date": 1259426440,
      "answer_id": 1812931,
      "question_id": 1812891,
      "body": "<p>If really you can't use <a href=\"http://www.owasp.org/index.php/SQL%5FInjection%5FPrevention%5FCheat%5FSheet#Defense_Option_1:_Prepared_Statements_.28Parameterized_Queries.29\" rel=\"noreferrer\">Defense Option 1: Prepared Statements (Parameterized Queries)</a> or <a href=\"http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet#Defense_Option_2:_Stored_Procedures\" rel=\"noreferrer\">Defense Option 2: Stored Procedures</a>, don't build your own tool, use the <a href=\"http://www.owasp.org/index.php/ESAPI\" rel=\"noreferrer\">OWASP Enterprise Security API</a>. From the <a href=\"http://code.google.com/p/owasp-esapi-java/\" rel=\"noreferrer\">OWASP ESAPI</a> hosted on Google Code:</p>\n\n<blockquote>\n  <p>Don\u2019t write your own security controls! Reinventing the wheel when it comes to developing security controls for every web application or web service leads to wasted time and massive security holes. The OWASP Enterprise Security API (ESAPI) Toolkits help software developers guard against security\u2010related design and implementation flaws.</p>\n</blockquote>\n\n<p>For more details, see <a href=\"http://www.owasp.org/index.php/Preventing_SQL_Injection_in_Java\" rel=\"noreferrer\">Preventing SQL Injection in Java</a> and <a href=\"http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\" rel=\"noreferrer\">SQL Injection Prevention Cheat Sheet</a>. </p>\n\n<p>Pay a special attention to <a href=\"http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet#Defense_Option_3:_Escaping_All_User_Supplied_Input\" rel=\"noreferrer\">Defense Option 3: Escaping All User Supplied Input</a> that introduces the <a href=\"http://code.google.com/p/owasp-esapi-java/\" rel=\"noreferrer\">OWASP ESAPI</a> project).</p>\n"
    },
    {
      "score": 6,
      "last_activity_date": 1259426708,
      "answer_id": 1812988,
      "question_id": 1812891,
      "body": "<p>In case you are dealing with a legacy system, or you have too many places to switch to <code>PreparedStatement</code>s in too little time - i.e. if there is an obstacle to using the best practice suggested by other answers, you can try <a href=\"http://sourceforge.net/projects/antisqlfilter/\" rel=\"noreferrer\">AntiSQLFilter</a></p>\n"
    },
    {
      "comments": [
        {
          "score": 1,
          "creation_date": 1259760633,
          "post_id": 1823512,
          "comment_id": 1724861,
          "body": "Thanks for the comment, I like the way you did all the characters in one, I was going about it the less regular expression way of a replace all for each... I&#39;m not sure how to assign the answer on this question now. Ultimately PreparedStatements is the answer, but for my current objective your answer is the answer I need, would you be upset if I gave the answer to one of the earlier prepared statement&#39;s answers, or is there a way to share the answer between a couple?"
        },
        {
          "score": 1,
          "creation_date": 1259792422,
          "post_id": 1823512,
          "comment_id": 1728770,
          "body": "Since this is just a temporary kludge, go ahead and accept one of the PreparedStatement answers."
        }
      ],
      "score": 21,
      "last_activity_date": 1376094939,
      "last_edit_date": 1376094939,
      "answer_id": 1823512,
      "question_id": 1812891,
      "body": "<p>(This is in answer to the OP's comment under the original question; I agree completely that PreparedStatement is the tool for this job, not regexes.)</p>\n\n<p>When you say <code>\\n</code>, do you mean the sequence <code>\\</code>+<code>n</code> or an actual linefeed character?  If it's <code>\\</code>+<code>n</code>, the task is pretty straightforward:</p>\n\n<pre><code>s = s.replaceAll(\"['\\\"\\\\\\\\]\", \"\\\\\\\\$0\");\n</code></pre>\n\n<p>To match one backslash in the input, you put four of them in the regex string. To put one backslash in the output, you put four of them in the replacement string.  This is assuming you're creating the regexes and replacements in the form of Java String literals.  If you create them any other way (e.g., by reading them from a file), you don't have to do all that double-escaping.</p>\n\n<p>If you have a linefeed character in the input and you want to replace it with an escape sequence, you can make a second pass over the input with this:</p>\n\n<pre><code>s = s.replaceAll(\"\\n\", \"\\\\\\\\n\");\n</code></pre>\n\n<p>Or maybe you want two backslashes (I'm not too clear on that):</p>\n\n<pre><code>s = s.replaceAll(\"\\n\", \"\\\\\\\\\\\\\\\\n\");\n</code></pre>\n"
    },
    {
      "comments": [
        {
          "score": 2,
          "creation_date": 1563216299,
          "post_id": 4659572,
          "comment_id": 100618610,
          "body": "OWASP cheatsheets have been moved to GitHub. The SQL Injection cheat sheet is now here: <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.md\" rel=\"nofollow noreferrer\">github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/&hellip;</a>"
        }
      ],
      "score": 13,
      "last_activity_date": 1294761419,
      "answer_id": 4659572,
      "question_id": 1812891,
      "body": "<p>PreparedStatements are the way to go in most, but not all cases. Sometimes you will find yourself in a situation where a query, or a part of it, has to be built and stored as a string for later use. Check out the <a href=\"http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\" rel=\"noreferrer\">SQL Injection Prevention Cheat Sheet</a> on the <a href=\"http://www.owasp.org/\" rel=\"noreferrer\">OWASP Site</a> for more details and APIs in different programming languages.</p>\n"
    },
    {
      "comments": [
        {
          "score": 2,
          "creation_date": 1460978529,
          "post_id": 34644781,
          "comment_id": 60973257,
          "body": "I think this code is the decompiled version of the source code in the above link. Now in newer <code>mysql-connector-java-xxx</code>, the <code>case &#39;\\u00a5&#39;</code> and <code>case &#39;\\u20a9&#39;</code> statements seem having been removed"
        },
        {
          "score": 0,
          "creation_date": 1473421612,
          "post_id": 34644781,
          "comment_id": 66145916,
          "body": "i tried sqlmap with your code and it did not protect me from the frist attack ` Type: boolean-based blind     Title: AND boolean-based blind - WHERE or HAVING clause     Payload: q=1%&#39; AND 5430=5430 AND &#39;%&#39;=&#39;`"
        },
        {
          "score": 0,
          "creation_date": 1473425526,
          "post_id": 34644781,
          "comment_id": 66148275,
          "body": "Sorry its working but was viewing the last stored session results .. i kept the comment for future similar .."
        },
        {
          "score": 0,
          "creation_date": 1475599398,
          "post_id": 34644781,
          "comment_id": 67003219,
          "body": "You can use <code>org.ostermiller.utils.StringHelper.escapeSQL()</code> or <code>com.aoindustries.sql.SQLUtility.escapeSQL()</code>."
        },
        {
          "score": 1,
          "creation_date": 1492516320,
          "post_id": 34644781,
          "comment_id": 73997531,
          "body": "Important to note the GPLv2 license on the original code this was copied from for anyone coming across this. I&#39;m not a lawyer but I would highly recommend not using this answer in your project unless you are fully aware of the implications of including this licensed code."
        },
        {
          "score": 0,
          "creation_date": 1626345900,
          "post_id": 34644781,
          "comment_id": 120870977,
          "body": "Sorry, I have a question...After you have created this class how do you connect it to the rest of the Java application?"
        }
      ],
      "score": 7,
      "last_activity_date": 1452154378,
      "last_edit_date": 1452154378,
      "answer_id": 34644781,
      "question_id": 1812891,
      "body": "<p>You need the following code below. At a glance, this may look like any old code that I made up. However, what I did was look at the source code for <a href=\"http://grepcode.com/file/repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.31/com/mysql/jdbc/PreparedStatement.java\" rel=\"noreferrer\">http://grepcode.com/file/repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.31/com/mysql/jdbc/PreparedStatement.java</a>. Then after that, I carefully looked through the code of setString(int parameterIndex, String x) to find the characters which it escapes and customised this to my own class so that it can be used for the purposes that you need. After all, if this is the list of characters that Oracle escapes, then knowing this is really comforting security-wise. Maybe Oracle need a nudge to add a method similar to this one for the next major Java release.</p>\n\n<pre><code>public class SQLInjectionEscaper {\n\n    public static String escapeString(String x, boolean escapeDoubleQuotes) {\n        StringBuilder sBuilder = new StringBuilder(x.length() * 11/10);\n\n        int stringLength = x.length();\n\n        for (int i = 0; i &lt; stringLength; ++i) {\n            char c = x.charAt(i);\n\n            switch (c) {\n            case 0: /* Must be escaped for 'mysql' */\n                sBuilder.append('\\\\');\n                sBuilder.append('0');\n\n                break;\n\n            case '\\n': /* Must be escaped for logs */\n                sBuilder.append('\\\\');\n                sBuilder.append('n');\n\n                break;\n\n            case '\\r':\n                sBuilder.append('\\\\');\n                sBuilder.append('r');\n\n                break;\n\n            case '\\\\':\n                sBuilder.append('\\\\');\n                sBuilder.append('\\\\');\n\n                break;\n\n            case '\\'':\n                sBuilder.append('\\\\');\n                sBuilder.append('\\'');\n\n                break;\n\n            case '\"': /* Better safe than sorry */\n                if (escapeDoubleQuotes) {\n                    sBuilder.append('\\\\');\n                }\n\n                sBuilder.append('\"');\n\n                break;\n\n            case '\\032': /* This gives problems on Win32 */\n                sBuilder.append('\\\\');\n                sBuilder.append('Z');\n\n                break;\n\n            case '\\u00a5':\n            case '\\u20a9':\n                // escape characters interpreted as backslash by mysql\n                // fall through\n\n            default:\n                sBuilder.append(c);\n            }\n        }\n\n        return sBuilder.toString();\n    }\n}\n</code></pre>\n"
    },
    {
      "comments": [
        {
          "score": 2,
          "creation_date": 1493796658,
          "post_id": 38357248,
          "comment_id": 74549112,
          "body": "For reference: <a href=\"https://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/StringEscapeUtils.html#escapeSql(java.lang.String)\" rel=\"nofollow noreferrer\">commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/&zwnj;&#8203;&hellip;</a> Anyway, this method only escapes quotes and does not seem to prevent SQL Injection attacks."
        },
        {
          "score": 12,
          "creation_date": 1495292707,
          "post_id": 38357248,
          "comment_id": 75196849,
          "body": "This was removed from the latest versions because it was only escaping single quotes"
        },
        {
          "score": 6,
          "creation_date": 1551098071,
          "post_id": 38357248,
          "comment_id": 96503045,
          "body": "This answer should be deleted because it does not prevent sql injection."
        }
      ],
      "score": 9,
      "last_activity_date": 1494710583,
      "last_edit_date": 1494710583,
      "answer_id": 38357248,
      "question_id": 1812891,
      "body": "<p>Prepared Statements are the best solution, but if you really need to do it manually you could also use the <a href=\"https://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/StringEscapeUtils.html\" rel=\"noreferrer\"><code>StringEscapeUtils</code></a> class from the Apache Commons-Lang library. It has an <a href=\"https://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/StringEscapeUtils.html#escapeSql(java.lang.String)\" rel=\"noreferrer\"><code>escapeSql(String)</code></a> method, which you can use:</p>\n\n<p><code>import org.apache.commons.lang.StringEscapeUtils;\n\u2026\nString escapedSQL = StringEscapeUtils.escapeSql(unescapedSQL);\n</code></p>\n"
    },
    {
      "comments": [
        {
          "score": 0,
          "creation_date": 1591972738,
          "post_id": 39440337,
          "comment_id": 110265510,
          "body": "Is it good the <code>java-security-cross-site-scripting-xss-and-sql-injection topic</code> ? I am trying to find a solution for a legacy application."
        }
      ],
      "score": 0,
      "last_activity_date": 1473625726,
      "answer_id": 39440337,
      "question_id": 1812891,
      "body": "<p>After searching an testing alot of solution for prevent sqlmap from sql injection, in case of legacy system which cant apply prepared statments every where.</p>\n\n<p><a href=\"http://www.javablog.fr/java-security-cross-site-scripting-xss-and-sql-injection.html\" rel=\"nofollow\">java-security-cross-site-scripting-xss-and-sql-injection topic</a>\nWAS THE SOLUTION</p>\n\n<p>i tried @Richard s solution but did not work in my case.\ni used a filter</p>\n\n<blockquote>\n  <p>The goal of this filter is to wrapper the request into an own-coded\n  wrapper MyHttpRequestWrapper which transforms:</p>\n  \n  <p>the HTTP parameters with special characters (&lt;, >, \u2018, \u2026) into HTML\n  codes via the org.springframework.web.util.HtmlUtils.htmlEscape(\u2026)\n  method. Note: There is similar classe in Apache Commons :\n  org.apache.commons.lang.StringEscapeUtils.escapeHtml(\u2026) the SQL\n  injection characters (\u2018, \u201c, \u2026) via the Apache Commons classe\n  org.apache.commons.lang.StringEscapeUtils.escapeSql(\u2026)</p>\n</blockquote>\n\n<pre><code>&lt;filter&gt;\n&lt;filter-name&gt;RequestWrappingFilter&lt;/filter-name&gt;\n&lt;filter-class&gt;com.huo.filter.RequestWrappingFilter&lt;/filter-class&gt;\n&lt;/filter&gt;\n\n&lt;filter-mapping&gt;\n&lt;filter-name&gt;RequestWrappingFilter&lt;/filter-name&gt;\n&lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n\n\n\n\npackage com.huo.filter;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletReponse;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class RequestWrappingFilter implements Filter{\n\n    public void doFilter(ServletRequest req, ServletReponse res, FilterChain chain) throws IOException, ServletException{\n        chain.doFilter(new MyHttpRequestWrapper(req), res);\n    }\n\n    public void init(FilterConfig config) throws ServletException{\n    }\n\n    public void destroy() throws ServletException{\n    }\n}\n\n\n\n\npackage com.huo.filter;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\n\nimport org.apache.commons.lang.StringEscapeUtils;\n\npublic class MyHttpRequestWrapper extends HttpServletRequestWrapper{\n    private Map&lt;String, String[]&gt; escapedParametersValuesMap = new HashMap&lt;String, String[]&gt;();\n\n    public MyHttpRequestWrapper(HttpServletRequest req){\n        super(req);\n    }\n\n    @Override\n    public String getParameter(String name){\n        String[] escapedParameterValues = escapedParametersValuesMap.get(name);\n        String escapedParameterValue = null; \n        if(escapedParameterValues!=null){\n            escapedParameterValue = escapedParameterValues[0];\n        }else{\n            String parameterValue = super.getParameter(name);\n\n            // HTML transformation characters\n            escapedParameterValue = org.springframework.web.util.HtmlUtils.htmlEscape(parameterValue);\n\n            // SQL injection characters\n            escapedParameterValue = StringEscapeUtils.escapeSql(escapedParameterValue);\n\n            escapedParametersValuesMap.put(name, new String[]{escapedParameterValue});\n        }//end-else\n\n        return escapedParameterValue;\n    }\n\n    @Override\n    public String[] getParameterValues(String name){\n        String[] escapedParameterValues = escapedParametersValuesMap.get(name);\n        if(escapedParameterValues==null){\n            String[] parametersValues = super.getParameterValues(name);\n            escapedParameterValue = new String[parametersValues.length];\n\n            // \n            for(int i=0; i&lt;parametersValues.length; i++){\n                String parameterValue = parametersValues[i];\n                String escapedParameterValue = parameterValue;\n\n                // HTML transformation characters\n                escapedParameterValue = org.springframework.web.util.HtmlUtils.htmlEscape(parameterValue);\n\n                // SQL injection characters\n                escapedParameterValue = StringEscapeUtils.escapeSql(escapedParameterValue);\n\n                escapedParameterValues[i] = escapedParameterValue;\n            }//end-for\n\n            escapedParametersValuesMap.put(name, escapedParameterValues);\n        }//end-else\n\n        return escapedParameterValues;\n    }\n}\n</code></pre>\n"
    },
    {
      "comments": [
        {
          "score": 0,
          "creation_date": 1607625702,
          "post_id": 44025352,
          "comment_id": 115338449,
          "body": "<b>Warning: it returns <code>null</code> for empty strings</b> so you might get unexpected results: <code>&quot;SELECT ITEM.id FROM ITEM WHERE ITEM.value = &#39;&quot; + MysqlRealScapeString(text) + &quot;&#39;&quot;</code> will show you items where <code>ITEM.value = &#39;null&#39;</code> instead of <code>ITEM.value = &#39;&#39;</code>!"
        }
      ],
      "score": 1,
      "last_activity_date": 1606833043,
      "last_edit_date": 1606833043,
      "answer_id": 44025352,
      "question_id": 1812891,
      "body": "<p>From:<a href=\"http://mashfiqur.blogspot.com/2013/06/mysql-real-escape-string-in-java.html\" rel=\"nofollow noreferrer\">Source</a></p>\n<pre><code>public String MysqlRealScapeString(String str){\n  String data = null;\n  if (str != null &amp;&amp; str.length() &gt; 0) {\n    str = str.replace(&quot;\\\\&quot;, &quot;\\\\\\\\&quot;);\n    str = str.replace(&quot;'&quot;, &quot;\\\\'&quot;);\n    str = str.replace(&quot;\\0&quot;, &quot;\\\\0&quot;);\n    str = str.replace(&quot;\\n&quot;, &quot;\\\\n&quot;);\n    str = str.replace(&quot;\\r&quot;, &quot;\\\\r&quot;);\n    str = str.replace(&quot;\\&quot;&quot;, &quot;\\\\\\&quot;&quot;);\n    str = str.replace(&quot;\\\\x1a&quot;, &quot;\\\\Z&quot;);\n    data = str;\n  }\n  return data;\n}\n</code></pre>\n"
    },
    {
      "score": 0,
      "last_activity_date": 1591030198,
      "answer_id": 62136977,
      "question_id": 1812891,
      "body": "<p>If you are using PL/SQL you can also use <code>DBMS_ASSERT</code>\nit can sanitize your input so you can use it without worrying about SQL injections.</p>\n\n<p>see this answer for instance:\n<a href=\"https://stackoverflow.com/a/21406499/1726419\">https://stackoverflow.com/a/21406499/1726419</a></p>\n"
    },
    {
      "comments": [
        {
          "score": 1,
          "creation_date": 1614749266,
          "post_id": 66450652,
          "comment_id": 117476901,
          "body": "Suggesting a transformation which doesn&#39;t preserve the input is a bad idea."
        },
        {
          "score": 1,
          "creation_date": 1614751302,
          "post_id": 66450652,
          "comment_id": 117477352,
          "body": "Just think, what would your answer looks like if such an approach was used right here on Stack Overflow."
        }
      ],
      "score": -2,
      "last_activity_date": 1614744463,
      "answer_id": 66450652,
      "question_id": 1812891,
      "body": "<p>First, ask the question - are double or single quotes, or backslashes needed in user entry fields?</p>\n<p>Backslashes - no. Double and single quotes are rarely used in English and they are used differently in Britain than the U.S.</p>\n<p>I say remove or replace them and you simplify.</p>\n<pre><code>private String scrub(\n    String parameter,\n    int    length\n    )\n{\n    String parm = null;\n\n    if ( parameter != null &amp;&amp; parameter.length() &gt; 0 &amp;&amp; parameter.length() &lt; length )\n    {\n        parm = parameter\n            .replace( &quot;\\\\&quot;, &quot; &quot; )\n            .replace( &quot;\\&quot;&quot;, &quot; &quot; )\n            .replace( &quot;\\'&quot;, &quot; &quot; )\n            .replace( &quot;\\t&quot;, &quot; &quot; )\n            .replace( &quot;\\r&quot;, &quot; &quot; )\n            .replace( &quot;\\n&quot;, &quot; &quot; )\n            .trim();\n    }\n\n    return parm;\n}\n</code></pre>\n"
    },
    {
      "score": 0,
      "last_activity_date": 1622202546,
      "answer_id": 67738268,
      "question_id": 1812891,
      "body": "<p>Most of the people are recommending <code>PreparedStatements</code>, however that requires you to have a direct connection with your Database using the Java Application. But then you'll have everyone else saying that you shouldn't have a direct connection to your database due to security issues, but utilize a Restful API to deal with queries.</p>\n<p>In my opinion, as long as you're aware that you have to be careful with what you escape and do It deliberately, there shouldn't be a problem.</p>\n<p>My solution is using <code>contains()</code> to check for SQL keywords such as <code>UPDATE</code> or other dangerous characters like <code>=</code> to completely nullify the SQL injection by asking the user to insert other characters on input.</p>\n<p><strong>Edit:</strong>\nYou can use this source material from W3Schools about <a href=\"https://www.w3schools.com/java/java_regex.asp\" rel=\"nofollow noreferrer\">Java Regular Expressions</a> to do this validation on Strings.</p>\n"
    }
  ],
  "is_answered": true,
  "answer_count": 14,
  "score": 155,
  "last_activity_date": 1622202546,
  "creation_date": 1259424673,
  "question_id": 1812891,
  "title": "Java - escape string to prevent SQL injection",
  "body": "<p>I'm trying to put some anti sql injection in place in java and am finding it very difficult to work with the the \"replaceAll\" string function. Ultimately I need a function that will convert any existing <code>\\</code> to <code>\\\\</code>, any <code>\"</code> to <code>\\\"</code>, any <code>'</code> to <code>\\'</code>, and any <code>\\n</code> to <code>\\\\n</code> so that when the string is evaluated by MySQL SQL injections will be blocked. </p>\n\n<p>I've jacked up some code I was working with and all the <code>\\\\\\\\\\\\\\\\\\\\\\</code> in the function are making my eyes go nuts. If anyone happens to have an example of this I would greatly appreciate it.</p>\n"
}