{"tags": ["java", "regex", "split", "delimiter"], "answers": [{"score": 1, "last_activity_date": 1436542249, "last_edit_date": 1436542249, "answer_id": 31344578, "question_id": 31344493, "body": "<p>You can use <code>split</code>:</p>\n\n<pre><code>String distinguisedName = \"CN=Paul Sebula,OU=BAE,OU=Users,OU=TIES Project,DC=SPHQTest,DC=na,DC=baesystems,DC=com\";\nString[] names = distinguisedName.split(\",\")[0].split(\"=\")[1].split(\" \");\nString firstName = names[0]; \nString lastName= names.length &gt; 2 ? names[names.length-1] : names[1];\nSystem.out.println(firstName + \" \" + lastName);\n</code></pre>\n\n<p>See <a href=\"http://ideone.com/EuP5So\" rel=\"nofollow\">IDEONE demo</a>, output: <code>Paul Sebula</code>.</p>\n\n<p>This also accounts for just 2 names (first and last only). Note how last name is accessed it being the last item in the array.</p>\n"}, {"score": 0, "last_activity_date": 1436542225, "last_edit_date": 1436542225, "answer_id": 31344584, "question_id": 31344493, "body": "<p>In steps:</p>\n\n<pre><code>String distinguisedName = \"CN=Paul M. Sebula,OU=BBB,OU=Users,OU=TIES Project,DC=SPHQTest,DC=na,DC=BBBBBB,DC=com\";\nString fullName = distinguisedName.substring(3, distinguisedName.indexOf(','));\nString[] nameParts = fullName.split(\" \");\nString firstName = nameParts[0];\nString lastName = nameParts[nameParts.length-1];\n</code></pre>\n\n<p>This will work for cases where the middle name/initial are not present as well.</p>\n"}, {"score": 0, "last_activity_date": 1436542008, "answer_id": 31344613, "question_id": 31344493, "body": "<pre><code>String distinguisedName = \"CN=Paul M. Sebula,OU=BBB,OU=Users,OU=TIES Project,DC=SPHQTest,DC=na,DC=BBBBBB,DC=com\"\n\nString[] commaSplit = distinguisedName.split(',');\nString[] whitespaceSplit = commaSplit[0].split(' ');\nString firstName = whitespaceSplit[0].substring(3);\nString lastName = whiteSpaceSplit[2];\n</code></pre>\n"}, {"comments": [{"score": 0, "creation_date": 1436542814, "post_id": 31344752, "comment_id": 50673558, "body": "Good answer. If a language has an available parser, use that parser. Unless you have the DN specification at hand, let others take care of the ugly details."}], "score": 3, "last_activity_date": 1436542914, "last_edit_date": 1495542108, "answer_id": 31344752, "question_id": 31344493, "body": "<p>Don't re-invent the wheel.  Assuming these are well-formed DN's, see the accepted answer on this question for how to parse without directly writing your own regex:  <a href=\"https://stackoverflow.com/questions/7933468/parsing-the-cn-out-of-a-certificate-dn\">Parsing the CN out of a certificate DN</a></p>\n\n<p>Once you've extracted the <code>CN</code>, then you can apply some of the other parsing techniques suggested (use the Java <code>StringTokenizer</code> or the <code>String.split()</code> method as others here have suggested if it's known to be separated only by spaces).  That assumes that you can make assumptions (eg. the first element in the resulting array is the <code>firstName</code>,the last element is the <code>lastName</code> and everything in between is middle names / initials) about the <code>CN</code> format.</p>\n"}, {"score": 1, "last_activity_date": 1436542479, "answer_id": 31344786, "question_id": 31344493, "body": "<pre><code>public static void main(String[] args) {\n\n    String distinguisedName = \"CN=Paul M. Sebula,OU=BBB,OU=Users,OU=TIES Project,DC=SPHQTest,DC=na,DC=BBBBBB,DC=com\";\n    String splitResult[]=distinguisedName.split(\",\")[0].split(\"=\");\n    String resultTwo[]=splitResult[1].split(\"\\\\.\");\n    String firstName=resultTwo[0].split(\" \")[0].trim();\n    String lastName=resultTwo[1].trim();\n    System.out.println(firstName);\n    System.out.println(lastName);\n\n}\n</code></pre>\n\n<p><strong>output</strong> </p>\n\n<p>Paul</p>\n\n<p>Sebula</p>\n"}], "is_answered": true, "answer_count": 5, "score": 1, "last_activity_date": 1436562199, "creation_date": 1436541619, "question_id": 31344493, "title": "Java string split with multiple delimeters", "body": "<p>What would be the best way to split this string directly after the <code>CN=</code> to store both the first and last name in separate fields as shown below?</p>\n\n<pre><code>String distinguisedName = \"CN=Paul M. Sebula,OU=BBB,OU=Users,OU=TIES Project,DC=SPHQTest,DC=na,DC=BBBBBB,DC=com\"\nString firstName\"Paul\"\nString lastName=\"Sebula\"\n</code></pre>\n"}