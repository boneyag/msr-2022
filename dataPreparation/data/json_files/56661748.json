{"tags": ["django", "django-forms", "django-views"], "answers": [{"comments": [{"score": 0, "creation_date": 1568180118, "post_id": 57873540, "comment_id": 102188127, "body": "how can we write in views if <code>formset.deleted_forms:</code>"}], "score": 2, "last_activity_date": 1568127707, "answer_id": 57873540, "question_id": 56661748, "body": "<p>I have not tested this out, but according to the documentation, formset-related attributes can be set at the class level. So, in your case, add the <code>factory_kwargs</code> and specify <code>can_delete</code> as True, e.g.:  </p>\n\n<pre><code>class MeasurementPropsUpdateView(ModelFormSetView):\n    factory_kwargs = { 'can_order': False, 'can_delete': True}\n</code></pre>\n\n<p><a href=\"https://django-extra-views.readthedocs.io/en/latest/pages/formset-views.html?highlight=can_delete#formsetview\" rel=\"nofollow noreferrer\">Documentation</a></p>\n"}, {"score": 0, "last_activity_date": 1568305426, "answer_id": 57910942, "question_id": 56661748, "body": "<p>formset.deleted_forms is only available after calling formset.save(commit=False).</p>\n\n<pre><code>def formset_valid(self, formset):\n    if formset.is_valid():\n        instances = formset.save(commit=False)\n\n        # Delete objects\n        for obj in formset.deleted_forms:\n            obj.delete() \n\n        for obj in instances:\n            obj.ProductName_id = self.kwargs.get('pk')\n            obj = user = self.request.user\n            obj.save()\n        messages.success(self.request, \"Measurement Properties Updated successfully\")\n        return HttpResponseRedirect(self.get_success_url())\n\n    #Formset is not valid \n    return False\n</code></pre>\n"}], "is_answered": true, "answer_count": 2, "score": 5, "last_activity_date": 1568305426, "creation_date": 1560927476, "question_id": 56661748, "title": "How To Remove Row in django-extra-views?", "body": "<p>In <strong>ModelFormSetView</strong> how to delete row </p>\n\n<p>here is my code how can I manage delete row in Django-extra-views</p>\n\n<p>I am trying with ModelFormSetView</p>\n\n<pre><code>if formset.deleted_forms:\n    for obj in formset.deleted_forms:\n        obj.delete()\n\n</code></pre>\n\n<p><strong>Html</strong></p>\n\n<pre><code>{{ formset.management_form }}\n{% for object in formset %}\n{% for hidden in formset.hidden_fields %}\n   {{ hidden }}\n   {% endfor %}\n&lt;tr class=\"formset\"  class=\"even pointer\"&gt;{{ object.id }}\n   &lt;td class=\" \"&gt;{{ object.as_p }}&lt;/td&gt;                         \n   &lt;td class=\"\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n    {% endfor %}\n</code></pre>\n\n<p><strong>View</strong></p>\n\n<p>this is general view how can I manage DELETE filled in this </p>\n\n<pre><code>\nclass MeasurementPropsUpdateViews(ModelFormSetView):\n    model = MeasurementProps\n    form_class= MeasurementPropsForm\n\n    template_name = \"master/measurementprops_form.html\"\n    def get_queryset(self):\n        pk = self.kwargs.get('pk')\n        current_user = self.request.user\n        return self.model.objects.filter(ProductName=pk, user=current_user)\n\n    def get_success_url(self):\n        return reverse(\"tailoringproducts\")\n\n    def formset_valid(self, formset):\n            for docs_form in formset:\n                docs_form.save(commit=False)\n                if formset.deleted_forms:\n                    for obj in formset.deleted_forms:\n                        obj.delete()\n                docs_form.instance.ProductName_id = self.kwargs.get('pk')\n                docs_form.instance.user = self.request.user\n                docs_form.save()\n            messages.success(self.request, \"Measurement Properties Updated successfully\")\n            return HttpResponseRedirect(self.get_success_url())\n\n    def formset_invalid(self, formset):\n        messages.error(self.request, \"Form getting invalid\")\n        return self.render_to_response(self.get_context_data(formset=formset))\n\n\n\n</code></pre>\n"}