{"tags": ["python", "django", "mongodb", "django-rest-framework", "django-views"], "comments": [{"score": 0, "creation_date": 1563135547, "post_id": 56994156, "comment_id": 100590580, "body": "As a first step, you could override <code>get_queryset</code> in your <code>tstList</code>, print the queryset and see if it includes any data: <code>print(self.queryset)</code>"}, {"score": 0, "creation_date": 1563142819, "post_id": 56994156, "comment_id": 100591968, "body": "This may sound stupid, but have you checked that there actually are any <code>tst</code> objects in your <code>dbtwo</code> database?"}, {"score": 0, "creation_date": 1563191600, "post_id": 56994156, "comment_id": 100606099, "body": "I&#39;m correcting the errors, thank you!"}], "answers": [{"score": 2, "last_activity_date": 1563145040, "last_edit_date": 1592644375, "answer_id": 57031755, "question_id": 56994156, "body": "<p>So I setup 2 databases like yourself, changed your code a bit, added 2 <code>tst</code> objects to the database and retrieved JSON data of these 2 <code>tst</code> objects in my API call.</p>\n<p>I slightly changed the <code>models.py</code> by adding <code>primary_key=True</code> to the <code>id</code> field.</p>\n<pre><code># models.py\n\nclass tst(models.Model):\n    id = models.CharField(primary_key=True, max_length=100)\n    ticker = models.FloatField()\n\n    def save(self, *args, using=None, **kwargs):\n        super(tst, self).save(*args, using='dbtwo', **kwargs)\n</code></pre>\n<p>I changed the <code>views.py</code> so it uses a <a href=\"https://www.django-rest-framework.org/api-guide/viewsets/#modelviewset\" rel=\"nofollow noreferrer\"><code>ModelViewSet</code></a> like this:</p>\n<pre><code># views.py\n\nfrom rest_framework import viewsets\n\nclass tstList(viewsets.ModelViewSet):\n    queryset = tst.objects.using('dbtwo').all()\n    serializer_class = tstSerializer\n</code></pre>\n<p>I did not change anything to the serializer so mine looks like this:</p>\n<pre><code># serializers.py\n\nclass tstSerializer(serializers.ModelSerializer):\n\n    class Meta:\n        model = tst\n        fields = ('id', 'ticker',)\n</code></pre>\n<p>Finally in the <code>urls.py</code> I used a <a href=\"https://www.django-rest-framework.org/api-guide/routers/#defaultrouter\" rel=\"nofollow noreferrer\"><code>DefaultRouter()</code></a> and registered the <code>tstList</code> view as an endpoint like this:</p>\n<pre><code># urls.py\n\nfrom rest_framework import routers\n# imported tstList view here\n\nrouter = routers.DefaultRouter()\n\nrouter.register(r'test', views.tstList, base_name='test')\n</code></pre>\n<p>Then I ran the following commands in my terminal:</p>\n<ul>\n<li><code>manage.py makemigrations</code></li>\n<li><code>manage.py migrate --database dbtwo</code></li>\n<li><code>manage.py runserver</code></li>\n</ul>\n<p>I then created two <code>tst</code> objects with random float values for their <code>ticker</code> fields.</p>\n<h3>The GET request and results</h3>\n<p>When I now make a GET request to <code>http://127.0.0.1:8000/test/</code> I get the following results:</p>\n<pre><code>[\n    {\n        &quot;id&quot;: &quot;1&quot;,\n        &quot;ticker&quot;: 1.2\n    },\n    {\n        &quot;id&quot;: &quot;2&quot;,\n        &quot;ticker&quot;: 1.7\n    }\n]\n</code></pre>\n"}], "is_answered": true, "answer_count": 1, "score": 1, "last_activity_date": 1563145040, "creation_date": 1562864564, "question_id": 56994156, "title": "Django Rest Framework not retrieving data from my database", "body": "<p>I'm creating an API endpoint to retrieve data from a Mongo database, in order to use it on my frontend.</p>\n\n<p>On my project, i'm using two DBs: a sqlite db and the Mongo DB.</p>\n\n<p>In the Mongo database, there is a collection called <code>tst</code> with some data in it. I created the endpoint, but after opening the api on my browser, i see no json data retrieved from the collection, as if it's not looking in the right place.</p>\n\n<p>Can someone help me find what i'm doing wrong?</p>\n\n<p>Here is my model:</p>\n\n<pre><code>class tst(models.Model):\n    id = models.CharField(max_length=100)\n    ticker = models.FloatField()\n\n    def save(self, *args, using=None, **kwargs):\n        super(tst, self).save(*args, using='dbtwo', **kwargs)\n</code></pre>\n\n<p>Here is my view:</p>\n\n<pre><code>class tstList(generics.ListCreateAPIView):\n    queryset = tst.objects.using('dbtwo').all()\n    serializer_class = tstSerializer\n</code></pre>\n\n<p>Here is the serializer:</p>\n\n<pre><code>class tstSerializer(serializers.ModelSerializer):\n\n    class Meta:\n        model = tst\n        fields = ('id', 'ticker', )\n</code></pre>\n\n<p>And the url:</p>\n\n<pre><code>path('tst/', views.tstList.as_view()),\n</code></pre>\n"}