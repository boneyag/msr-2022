{"tags": ["django", "cryptography", "django-users"], "comments": [{"score": 0, "creation_date": 1583931796, "post_id": 60636620, "comment_id": 107277355, "body": "For this you need the raw (unhashed) password; you can then hash it with the same random salt as an old password and see whether the hashes match. It&#39;s not possible if all you have are the hashes."}, {"score": 0, "creation_date": 1583931899, "post_id": 60636620, "comment_id": 107277421, "body": "@deceze yes in my case all I have are the hashes. If you can post an answer explaining the impossiblity of this I can accept."}], "answers": [{"comments": [{"score": 0, "creation_date": 1583933635, "post_id": 60637168, "comment_id": 107278492, "body": "I don&#39;t have access to the raw passwrod when I want to make the comparison. In my situation, I only have 2 different password hashes, and want to know if those hashes are created with the same raw password"}, {"score": 0, "creation_date": 1583934161, "post_id": 60637168, "comment_id": 107278785, "body": "check this link. It may help you <a href=\"https://stackoverflow.com/questions/21031661/how-do-you-test-if-two-hashes-passwords-are-similar\" title=\"how do you test if two hashes passwords are similar\">stackoverflow.com/questions/21031661/&hellip;</a>"}, {"score": 0, "creation_date": 1583935082, "post_id": 60637168, "comment_id": 107279369, "body": "Thanks, though its not the same case, it gives some ideas"}], "score": 4, "last_activity_date": 1583933711, "last_edit_date": 1583933711, "answer_id": 60637168, "question_id": 60636620, "body": "<p>I don't know that, I understood your situation correctly or not.\nHere is the solution based on what I understood from your question.\nYou can compare the new password with the password which is already in use by using the check_password() method which is associated with the User model in Django.</p>\n\n<pre><code> @api_view(['POST'])\n def some_function(request):\n    new_password = request.data.get('password')\n    # get the user from the request\n    user_object = request.user\n    if user_object.check_password(new_password):\n       # check_password() will hash the new_password in the same way how it hashed the password which is already stored in the db and it will compare the new_password with that password.\n       print(\"Both the passwords are same\")\n    else:\n       print(\"Passwords are not same\")\n</code></pre>\n\n<p>If the request is not authenticated then it is not possible to get the user from the request. On that case this code will not work.</p>\n\n<p>Hope it will give the solution to your problem.</p>\n"}, {"score": 3, "last_activity_date": 1583942343, "answer_id": 60640027, "question_id": 60636620, "body": "<p>If you don't have access to the plaintext password and all you have are the hashes, you cannot make any comparisons between them. That's precisely on purpose to make the passwords irreversible, and especially entire databases of them. You may be able to brute-force one password given enough time and computing power, but you can't apply that knowledge to any other hashes, so brute-forcing an entire database of them is prohibitively expensive.</p>\n\n<p>You <em>could</em> make such comparisons at the time of registration, login or password reset, when the user has input their plain password. At that point, you just need to hash the password with the salt of the existing one(s) and then compare the hashes.</p>\n"}], "is_answered": true, "answer_count": 2, "score": 1, "last_activity_date": 1583942343, "creation_date": 1583931536, "question_id": 60636620, "title": "Django - check if two password hashes are of same raw password", "body": "<p>I want to keep track of user password change history, and display a warning if their current password is used by them before. To note, I don't want to prevent a user from setting a password if it is used before, I want to let them set the password, but just display a warning afterwards. So what I'm looking for is NOT a password validator.</p>\n\n<p>I know that while Django saves user passwords in the db, it creates a hash of the password, using a random salt. So 2 hashes of the same password will not be the same. Still, is it possible to tell if 2 different password hashes are created with the same raw password as the input?</p>\n"}