{"tags": ["python", "regex"], "comments": [{"score": 0, "creation_date": 1624691402, "post_id": 68139994, "comment_id": 120431543, "body": "Thanks for sharing your code in your question. Could you please do share sample of expected output in your question for better understanding of your question."}, {"score": 0, "creation_date": 1624692402, "post_id": 68139994, "comment_id": 120431723, "body": "please have a look at the question now."}, {"score": 0, "creation_date": 1624698115, "post_id": 68139994, "comment_id": 120432751, "body": "It&#39;s not clear why your desired output still includes some hyphenated words. What is the principle for which hyphens to remove?"}], "answers": [{"score": 1, "last_activity_date": 1624698435, "last_edit_date": 1624698435, "answer_id": 68140813, "question_id": 68139994, "body": "<p>You don't need to include the trailing character at all.</p>\n<pre class=\"lang-py prettyprint-override\"><code>re.sub(r'-\\n', '')\n</code></pre>\n<p>If for some reason you do need to capture the character, you can use <code>r'\\1'</code> to refer back to it.</p>\n<pre class=\"lang-py prettyprint-override\"><code>re.sub(r'-\\n([aeiou])', r'\\1')\n</code></pre>\n<p>The notation <code>r'...'</code> produces a &quot;raw string&quot; where backslashes only represent themselves. In Python, backslashes in strings are otherwise processed as escapes - for example, <code>'\\n'</code> represents the single wharacter newline, whereas <code>r'\\n'</code> represents the two literal characters backslash and <code>n</code> (which in a regex <em>match</em> a literal newline).</p>\n"}], "is_answered": true, "answer_count": 1, "score": 0, "last_activity_date": 1624698435, "creation_date": 1624690719, "question_id": 68139994, "title": "How to write a character update regular expression in Python?", "body": "<p>How to write a regular expression which can handle the following substitution scenario.</p>\n<pre><code>Hello, this is a ne-\nw line of text wher-\ne we are trying hyp-\nhenation.\n</code></pre>\n<p>i have a short Python code which handles breaking long one_line strings into a multi_line string and produces output similar to the code sample given above</p>\n<p>I want a regular expression that takes care of the single hyphenated character like in first and second line and just pulls up the single hyphenated character on the previous like.</p>\n<p>something like <code>re.sub(&quot;-\\n&lt;any character&gt;&quot;,&quot;&lt;the any character&gt;\\n&quot;)</code></p>\n<p>I can not find a way on how to handle the hyphenated character</p>\n<p>below is some further information about the question</p>\n<pre><code>Word = &quot;Python string comparison is performed using the characters in both strings. The characters in both strings are compared one by one.&quot;\n\ndef hyphenate(word, x):\n    for i in range(x, len(word), x):\n        word = word[:i] + (&quot;\\n&quot; if (word[i] == &quot; &quot; or word[i-1] == &quot; &quot; ) else &quot;-\\n&quot;) + (word[i:] if word[i] != &quot; &quot; else word[(i+1):])\n    return(word)\n\nprint(hyphenate(Word, 20))\n</code></pre>\n<p>#Produced output</p>\n<pre><code>Python string compar-\nison is performed \nusing the character-  &lt;=\ns in both strings.\nThe characters in b- &lt;=\noth strings are co-\nmpared one by one.\n</code></pre>\n<p>#Desired output</p>\n<pre><code>Python string compar-\nison is performed \nusing the characters  &lt;=\n in both strings.\nThe characters in  &lt;=\nboth strings are co- \nmpared one by one.\n</code></pre>\n"}