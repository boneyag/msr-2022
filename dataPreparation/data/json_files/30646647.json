{"tags": ["regex"], "comments": [{"score": 3, "creation_date": 1433428208, "post_id": 30646647, "comment_id": 49356945, "body": "Do you want to match the numbers at the end of string? <code>\\d+-\\d+-\\d+$</code>?"}, {"score": 1, "creation_date": 1433428361, "post_id": 30646647, "comment_id": 49357060, "body": "What language are you using?"}, {"score": 0, "creation_date": 1433439759, "post_id": 30646647, "comment_id": 49364609, "body": "Yes stribizhev. I&#39;m using python (scrapy). See my comments on the answer below."}], "answers": [{"comments": [{"score": 0, "creation_date": 1433438489, "post_id": 30646763, "comment_id": 49363824, "body": "Im using the .re() method with scrapy. I&#39;m able to scrape that whole line perfectly using the xpath selector, but falling short when I try to isolate this part with regex. Your solution hasn&#39;t worked in this instance :s"}, {"score": 0, "creation_date": 1433438616, "post_id": 30646763, "comment_id": 49363902, "body": "Here&#39;s where I tried to implement it: tips_str = sel.xpath(&#39;//*[@class=&quot;recent-picks&quot;]//div[@class=&quot;title3&quot;]/&zwnj;&#8203;text()&#39;).re(r&#39;\\d+-\\d&zwnj;&#8203;+-\\d+$&#39;).extract()[0&zwnj;&#8203;]"}, {"score": 0, "creation_date": 1433439854, "post_id": 30646763, "comment_id": 49364670, "body": "without the .re() this produces the line in my question."}, {"score": 0, "creation_date": 1433472896, "post_id": 30646763, "comment_id": 49377787, "body": "Addressed your comments. Hope we&#39;re on the same page :P"}], "score": 2, "last_activity_date": 1433472874, "last_edit_date": 1433472874, "answer_id": 30646763, "question_id": 30646647, "body": "<p>The regex to capture that is:</p>\n\n<pre><code>\\d+-\\d+-\\d+$\n</code></pre>\n\n<p>It works as follows:</p>\n\n<ul>\n<li><code>\\d+-</code> means: capture 1 or more digits (the numbers <code>[0-9]</code>), and then a \"-\".</li>\n<li><code>$</code> means: you should now be at the end of the line.</li>\n</ul>\n\n<p>Translating that into the full regex pattern:</p>\n\n<blockquote>\n  <p>Capture 1 or more digits, then a hyphen, then 1 or more digits, then a hyphen, then 1 or more digits, and we should now be at the end of the string.</p>\n</blockquote>\n\n<p><strong>EDIT:</strong> Addressing your edits and comments:</p>\n\n<p>I'm not so sure what you mean by \"isolate\". I'll assume that you mean you want <code>tips_str</code> to equal \"3-0-1\".</p>\n\n<p>I believe the easiest way would be to first use xpath extract the string for the entire line without doing any regex. Then, when we're simply dealing with a string (instead of xpath stuff), it should be nice and easy to use regex and get the pattern out.</p>\n\n<p>As far as I understand, <code>sel.xpath('//*[@class=\"recent-picks\"]//div[@class=\"title3\"]/text()').extract()[0]</code> (without <code>.re()</code>) is providing you with the string: \"June 2015 - Won / Void / Lost = 3-0-1\".</p>\n\n<p>So then:</p>\n\n<pre><code>full_str = sel.xpath('//*[@class=\"recent-picks\"]//div[@class=\"title3\"]/text()').extract()[0]\n</code></pre>\n\n<p>Now that we've got the full string, we can use standard string regex to pluck the part we want out:</p>\n\n<pre><code>tips_str = false\n\nsearch = re.search(r'\\d+-\\d+-\\d+$', full_str)\nif(search):\n    tips_str = search.group(0)\n</code></pre>\n\n<p>Now <code>tips_str</code> will equal \"3-0-1\". If the pattern wasn't matched at all, it'd instead equal <code>false</code>.</p>\n\n<p>If any of my assumptions are wrong then let me know what's actually happening (like if <code>.extract()[0]</code> isn't giving back a string, then what is it giving back?) and I'll try to adjust this response.</p>\n"}, {"comments": [{"score": 0, "creation_date": 1433431027, "post_id": 30647215, "comment_id": 49359183, "body": "Working on yours to avoid matching 1.1.1.1.1 and to utilise <code>{2}</code>: <code>&#47;((-?\\d+(\\.\\d+)?(e(\\+|-)\\d+(\\.\\d+)?)?)-){2}(-?\\d+(\\.\\d+)?(e(&zwnj;&#8203;\\+|-)\\d+(\\.\\d+\u200c\u200b)?)?&zwnj;&#8203;)$&#47;g</code>."}, {"score": 0, "creation_date": 1433441126, "post_id": 30647215, "comment_id": 49365406, "body": "Sorry, poor wording on my part. They&#39;re only ever going to be positive integers."}], "score": 0, "last_activity_date": 1433429564, "answer_id": 30647215, "question_id": 30646647, "body": "<p>Any and all numbers, so negatives, scientific notation, etc? This will match it.</p>\n\n<pre><code>/(\\-?[\\.\\d]+(e\\+|e\\-)?[\\.\\d]*)-(\\-?[\\.\\d]+(e\\+|e\\-)?[\\.\\d]*)-(\\-?[\\.\\d]+(e\\+|e\\-)?[\\.\\d]*)$/ig\n</code></pre>\n\n<p>Tested with these:</p>\n\n<pre><code>June 2015 - Won / Void / Lost = -1.1e+3-1.01-0.1e+2\nJune 2015 - Won / Void / Lost = 1-2-3\nJune 2015 - Won / Void / Lost = 0.1--5-5.6\n</code></pre>\n\n<p>If you take <code>$</code> out if it, it will match on all lines at the same time.</p>\n"}], "is_answered": true, "answer_count": 2, "score": -1, "last_activity_date": 1433472874, "creation_date": 1433428145, "question_id": 30646647, "title": "Regex newbie: How to isolate &#39;num-num-num&#39; in a string", "body": "<p>I'm sure this is a super simple question for many of you, but I've only just started learning regex and at the moment can't for the life of me isolate what I'm after from the following:</p>\n\n<pre><code>June 2015 - Won / Void / Lost = 3-0-1\n</code></pre>\n\n<p>I need a solution to isolate the 'num-num-num' part at the end of the string that would work for any positive integers.</p>\n\n<p>Thanks for any help</p>\n\n<p>EDIT</p>\n\n<p>So this line of code from a scrapy spider I'm writing produces the line above:</p>\n\n<pre><code>tips_str = sel.xpath('//*[@class=\"recent-picks\"]//div[@class=\"title3\"]/text()').extract()[0]\n</code></pre>\n\n<p>I've tried to isolate the part I'm after with:</p>\n\n<pre><code>    tips_str = sel.xpath('//*[@class=\"recent-picks\"]//div[@class=\"title3\"]/text()').re(r'\\d+-\\d+-\\d+$').extract()[0]\n</code></pre>\n\n<p>No luck though :(</p>\n"}