{"tags": ["php", "html", "regex", "html-parsing"], "comments": [{"score": 2, "creation_date": 1422905760, "post_id": 28285267, "comment_id": 44924698, "body": "mistake #1: using a regex. you should be using <a href=\"http://php.net/dom\" rel=\"nofollow noreferrer\">DOM</a>. Though, since you&#39;re dealing with non-html &quot;tags&quot;, then probably htmlpurifier would be a better choice."}, {"score": 0, "creation_date": 1422906098, "post_id": 28285267, "comment_id": 44924874, "body": "This code is a part of an HTML parser engine and i don&#39;t want to use any third-party class for some security reasons. DOM is not an optimal way to parse many big strings. (Process time issue)"}, {"score": 1, "creation_date": 1422906437, "post_id": 28285267, "comment_id": 44925068, "body": "What security reasons (out of curiosity)?"}, {"score": 0, "creation_date": 1422907016, "post_id": 28285267, "comment_id": 44925365, "body": "Any intangible or unwanted possible bugs! Or any possible problem in their further updates! This simple code work for me so far; but i&#39;m not expert in regex. so a simple change in this regex could solve my problem instead of putting myself in another bigger problem!"}, {"score": 0, "creation_date": 1422907750, "post_id": 28285267, "comment_id": 44925729, "body": "The purpose of this code is to split a custom HTML Template to an array, for example: <code>&lt;div&gt;&lt;!tag1&gt;&lt;div&gt;</code>  to <code>[0] =&gt; &#39;&lt;div&gt;&#39;, [tag1] =&gt; NULL, [2] =&gt; &#39;&lt;&#47;div&gt; </code>"}, {"score": 0, "creation_date": 1422909090, "post_id": 28285267, "comment_id": 44926385, "body": "I founded a solution: First remove any comments with this regex: <code>&lt;!--(.|\\s)*?--&gt;</code> Then extract nonHTML tags with: <code>(&lt;![^&gt;]*[^\\&#47;]&gt;)</code>"}], "answers": [{"comments": [{"score": 0, "creation_date": 1422909365, "post_id": 28286194, "comment_id": 44926508, "body": "thanx, that&#39;s what i&#39;m looking for!"}, {"score": 0, "creation_date": 1422909680, "post_id": 28286194, "comment_id": 44926664, "body": "Is it is better solution to skip comments: <code>&lt;!--(.|\\s)*?--&gt;(*SKIP)(*F)|(&lt;![^&gt;]*[^\\&#47;]&gt;)</code>  according to <a href=\"http://stackoverflow.com/questions/19676024/using-regular-expression-remove-html-comments-from-content\">this link</a>"}, {"score": 1, "creation_date": 1422909849, "post_id": 28286194, "comment_id": 44926748, "body": "@DarkMaze Used the <code>s</code> <a href=\"http://php.net/manual/en/reference.pcre.pattern.modifiers.php\" rel=\"nofollow noreferrer\">flag</a> ...<code>(?s:</code>... to make the dot also match newlines. Here it&#39;s the same like adding <code>s</code> at the end ...<code>&#47;is</code> and change first part to <code>&lt;!--.*?--&gt;(*SKIP)(*F)</code>"}, {"score": 1, "creation_date": 1422911026, "post_id": 28286194, "comment_id": 44927361, "body": "@DarkMaze All these variants do the same: Maching as few as possibly of any character (also newline) between <code>&lt;!--</code> and <code>--&gt;</code> without capturing. 1.) <code>&#47;&lt;!--(?:.|\\s)*?--&gt;&#47;</code> 2.) <code>&#47;&lt;!--(?s:.*?)--&gt;&#47;</code> 3.) <code>&#47;&lt;!--(?:(?s).*?)--&gt;&#47;</code> 4.) <code>&#47;&lt;!--.*?--&gt;&#47;s</code> 5.) <code>&#47;&lt;!--.*--&gt;&#47;Us</code> 6.) <code>&#47;&lt;!--[\\s\\S]*?--&gt;&#47;</code> just different notations. Yours needs a bit more steps possibly because of the alternation."}], "score": 1, "last_activity_date": 1422909059, "last_edit_date": 1495540620, "answer_id": 28286194, "question_id": 28285267, "body": "<blockquote>\n  <p>I'm looking for better regular expression to skip entire content between <code>&lt;!--</code> to <code>--&gt;</code></p>\n</blockquote>\n\n<p>To skip something use <a href=\"http://perldoc.perl.org/perlre.html#Special-Backtracking-Control-Verbs\" rel=\"nofollow noreferrer\">(*SKIP)(*F)</a>. Put such as <code>&lt;!--(?s:.*?)--&gt;(*SKIP)(*F)|</code> before:</p>\n\n<pre><code>/&lt;!--(?s:.*?)--&gt;(*SKIP)(*F)|(&lt;![^&gt;]*[^\\/]&gt;)/i\n</code></pre>\n\n<p>Didn't modify your actual regex. <a href=\"https://regex101.com/r/pZ9mE0/1\" rel=\"nofollow noreferrer\">Regex101 is good for testing</a> also see <a href=\"https://stackoverflow.com/questions/22937618/reference-what-does-this-regex-mean/22944075#22944075\">Regex FAQ</a> :)</p>\n"}], "is_answered": true, "answer_count": 1, "score": 1, "last_activity_date": 1422909059, "creation_date": 1422905416, "question_id": 28285267, "title": "Extraxt nonHTML tags with regular expression in PHP", "body": "<p>I'm trying to extract nonHTML tags ( like: <code>&lt;!This TAG&gt;</code> ) from strings.\nI use below regular expression to extract tags:</p>\n\n<pre><code>$Tags = preg_split('/(&lt;![^&gt;]*[^\\/]&gt;)/i', $Content, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);\n</code></pre>\n\n<p>But problem is all HTML comment tags ( like <code>&lt;!-- This One --&gt;</code> ) will be extract as well.</p>\n\n<p>I can use a trick like below example to remove comment Tags but still any nonHTML tags between them will be extracted!</p>\n\n<pre><code>foreach($Tags as $key =&gt; $value) {\n    if(mb_substr($value, 0, 4) == '&lt;!--')\n        continue;\n    $CheckTag = mb_substr($value, 0, 2);\n    if($CheckTag == '&lt;!') {\n        //...\n    }\n}\n</code></pre>\n\n<p>For examples:</p>\n\n<p><code>&lt;!--&lt;p&gt;some text here.&lt;/p&gt;--&gt;</code> => Work.</p>\n\n<p><code>&lt;!-- &lt;!Tag1&gt;&lt;!Tag2&gt;&lt;!Tag3&gt; --&gt;</code> => Not Work! (Tag2 &amp; Tags3 extracted)</p>\n\n<p>I'm looking for better regular expression to skip entire content between <code>&lt;!--</code> to <code>--&gt;</code> , thanx for any tips.</p>\n\n<p>For a better perspective this is the original function:</p>\n\n<pre><code>public function extractFakeTags($Content) {\n        $Tags = preg_split('/(&lt;![^&gt;]*[^\\/]&gt;)/i', $Content, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);\n        $FakeTags = array();\n        $Content = $Tags;\n        foreach($Tags as $key =&gt; $current) {\n            if(mb_substr($current, 0, 4) == '&lt;!--')\n                continue;\n            $TagBegin = mb_substr($current, 0, 2);\n            if($TagBegin == '&lt;!') {\n                $TagLength = mb_strlen($current);\n                $TagEnd = mb_substr($current, ($TagLength-1), 1);\n                if($TagEnd=='&gt;') {\n                    $TagName = mb_substr($current, 2, ($TagLength-3));\n                    if (array_key_exists($TagName, $FakeTags)) {\n                        array_push($FakeTags[$TagName], $key);\n                    }\n                    else {\n                        $FakeTags[$TagName] = array($key);\n                    }\n                    $Content[$key] = NULL;\n                }\n            }\n        }\n        return $FakeTags;\n    }\n</code></pre>\n"}