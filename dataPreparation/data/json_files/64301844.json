{"tags": ["php", "regex"], "comments": [{"score": 3, "creation_date": 1602403790, "post_id": 64301844, "comment_id": 113704777, "body": "Your regex doesn&#39;t allow for the space between the numbers. <code>{gameid\\s([0-9]{5}\\s?){1,3}}</code> possibly"}, {"score": 0, "creation_date": 1602404434, "post_id": 64301844, "comment_id": 113704909, "body": "What about: <code>(?&lt;game&gt;gameid(?:.\\d{5}){1,3})</code>?"}], "answers": [{"score": 1, "last_activity_date": 1602404927, "last_edit_date": 1602404927, "answer_id": 64301956, "question_id": 64301844, "body": "<p>There are several problems here. First, your original regex didn't use alternation correctly: this (cut for brevity)...</p>\n<pre><code>/{gameid\\s([0-9])|([0-9])}/\n</code></pre>\n<p>... actually matches <em>either</em> on <code>{gameid 5}</code> or just on <code>5</code> - but never on the whole group. Most likely, that's not what you wanted.</p>\n<p>Second, as correctly noted by @NigelRen, there's a whitespace between sequence of digits in your example, but new pattern doesn't cover it.</p>\n<p>Here's one approach (assuming you actually need whole GameIDs - and not just digits - stored in <code>$matchesgameid</code>):</p>\n<pre><code>$articletext = 'Here is some {gameid 55555 44444 33333} and here is some more {gameid 55555} and this is one more time {gameid 55555 33333}';\n$regexgameid = '/{gameid(?:\\s[0-9]{5}){1,3}}/i';\npreg_match_all($regexgameid, $articletext, $matchesgameid, PREG_SET_ORDER);\n</code></pre>\n<p><a href=\"https://3v4l.org/XRbbI\" rel=\"nofollow noreferrer\"><strong>Demo</strong></a>. The digit-wrapping group is a non-capturing one here - both to save some performance and to avoid distraction on results. If GameIDs have inconsistent whitespacing (some have ones inside, some don't), just mark <code>\\s</code> as optional with <code>?</code> quantifier:</p>\n<pre><code>'/{gameid(?:\\s?[0-9]{5}){1,3}}/i';\n</code></pre>\n"}, {"score": 3, "last_activity_date": 1602426117, "answer_id": 64305061, "question_id": 64301844, "body": "<p>Here is a demonstration of how to use <code>preg_replace_callback()</code> to replace the gameid shortcode tags in your (I assume Joomla) articles.</p>\n<p>You state in your question that the number of gameids will either be one or three. For this reason, you should not be using the <code>{1,3}</code> quantifier syntax because that means &quot;one to three&quot; instead of &quot;one or three&quot;.  In other words, the correct pattern will require that the second and third ids both/neither exist.</p>\n<p>The whole shorttag is matched, so all you need to do is dictate the translation in the callback parameter of the native function.</p>\n<p>Code: (<a href=\"https://3v4l.org/cuIim\" rel=\"nofollow noreferrer\">Demo</a>)</p>\n<pre><code>$articleText = &lt;&lt;&lt;TEXT\nSome article text\nTriple id: {gameid 45735 76352 87262}.\nDo not honor {gameid 12345 67890} because contains exactly 2 game ids!\nunknown id: {gameid 66666} can't replace it!\nFound single id: {gameid 76352}\nfinished the article\nTEXT;\n\n$gamesLookup = [\n    45735 =&gt; 'Pac-man',\n    76352 =&gt; 'Donkey Kong',\n    87262 =&gt; 'Rampage'\n];\n\necho preg_replace_callback(\n    '~{gameid (\\d{5})(?: (\\d{5}) (\\d{5}))?}~',\n    function ($m) use ($gamesLookup) {\n        echo 'm = ' . var_export($m, true) . &quot;\\n---\\n&quot;;\n        return 'Game Name(s): ' . strtr(implode(', ', array_slice($m, 1)), $gamesLookup);\n    },\n    $articleText\n);\n</code></pre>\n<p>Output:  (I am printing out the matches arrays so you can see the data that you will need to access)</p>\n<pre><code>m = array (\n  0 =&gt; '{gameid 45735 76352 87262}',\n  1 =&gt; '45735',\n  2 =&gt; '76352',\n  3 =&gt; '87262',\n)\n---\nm = array (\n  0 =&gt; '{gameid 66666}',\n  1 =&gt; '66666',\n)\n---\nm = array (\n  0 =&gt; '{gameid 76352}',\n  1 =&gt; '76352',\n)\n---\nSome article text\nTriple id: Game Name(s): Pac-man, Donkey Kong, Rampage.\nDo not honor {gameid 12345 67890} because contains exactly 2 game ids!\nunknown id: Game Name(s): 66666 can't replace it!\nFound single id: Game Name(s): Donkey Kong\nfinished the article\n</code></pre>\n<hr />\n<p>If you simply want a <code>preg_match_all()</code> call, then the same pattern will suffice...</p>\n<p>Code: (<a href=\"https://3v4l.org/IQ6RA\" rel=\"nofollow noreferrer\">Demo</a>)</p>\n<pre><code>var_export(\n    preg_match_all('~{gameid (\\d{5})(?: (\\d{5}) (\\d{5}))?}~', $articleText, $m, PREG_SET_ORDER)\n    ? $m\n    : []\n);\n</code></pre>\n"}], "is_answered": true, "answer_count": 2, "score": 3, "last_activity_date": 1602426117, "creation_date": 1602403572, "question_id": 64301844, "title": "Regex to parse custom shortcode substrings in article and generate array", "body": "<p>I can use a little help with this regex. The regex below works.</p>\n<pre><code>$regexgameid = '/{gameid\\s([0-9][0-9][0-9][0-9][0-9])|([0-9][0-9][0-9][0-9][0-9])|([0-9][0-9][0-9][0-9][0-9])}/i';\npreg_match_all($regexgameid, $articletext, $matchesgameid, PREG_SET_ORDER);\n</code></pre>\n<p>Example targeted shortcode: <code>{gameid 45735 76352 87262}</code></p>\n<p>The game id's count could be one or three.</p>\n<p>With my logic it would be this:</p>\n<pre><code>$regexgameid = '/{gameid\\s([0-9]{5}){1,3}}/i';\npreg_match_all($regexgameid, $articletext, $matchesgameid, PREG_SET_ORDER);\n</code></pre>\n<p>But this regex above doesn't work.</p>\n<hr />\n<p>What I'm trying to achieve is to get the results from <code>preg_match_all()</code> in an array structure like this:</p>\n<pre><code>Array\n(\n    [0] =&gt; {gameid\n    [1] =&gt; 45735\n    [2] =&gt; 76352\n    [3] =&gt; 87262\n    [4] =&gt; }\n)\n</code></pre>\n<p>so that I can replace the whole <code>{gameid 45735 76352 87262}</code> shortcode in the article text with information about the 3 game ids.</p>\n"}