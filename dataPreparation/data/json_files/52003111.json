{"tags": ["regex", "groovy"], "answers": [{"comments": [{"score": 0, "creation_date": 1535110984, "post_id": 52003607, "comment_id": 90956629, "body": "Thanks for the answer, Wiktor, but building &quot;${tag[1]}.${tag[2]}.RC${tag[3]}&quot; implies that that the tag has always this structure, which it doesn&#39;t because it is given as a parameter."}, {"score": 0, "creation_date": 1535111390, "post_id": 52003607, "comment_id": 90956872, "body": "@DavidPG The replacement pattern must always correspond to the regex, and the regex you have is <code>regex = &#47;^(\\d+)\\.(\\d+)\\.RC(\\d+)&#47;</code>. So, it is a valid solution. If it does not work, please add more details to the question and let know."}, {"score": 0, "creation_date": 1535112073, "post_id": 52003607, "comment_id": 90957303, "body": "in the question I mentioned that the regex AND the tag are parameters, therefore I cannot use <code>&quot;${tag[1]}.${tag[2]}.RC${tag[3]}&quot;</code> inside the method. Nevertheless, I tried to clarify a bit more giving to examples of use."}, {"score": 0, "creation_date": 1535371941, "post_id": 52003607, "comment_id": 91028418, "body": "thanks, @Wiktor! Though my solution works too, I prefer yours for not being messing around with many &#39;replace&#39; methods."}], "score": 1, "last_activity_date": 1535118462, "last_edit_date": 1535118462, "answer_id": 52003607, "question_id": 52003111, "body": "<p>You may split the string with 1+ digits and then interleave the resulting list with the <code>tag</code> items and joining to get the final string:</p>\n\n<pre><code>List combineList(List one, List two) {\n    def result = [one, two].transpose()\n    ( result += (one - result*.get(0)) ?: (two - result*.get(1)) ).flatten()\n}\n\ndef increase(tag, regex, position){\n    tag[position] = (tag[position] as Integer) + 1\n    return combineList(tag[0].split(/\\d+/), tag[1..-1]).join())\n}\n</code></pre>\n\n<p>See a <a href=\"https://ideone.com/yzkTFQ\" rel=\"nofollow noreferrer\">Groovy demo online</a>.</p>\n"}, {"score": 1, "last_activity_date": 1535113392, "answer_id": 52004411, "question_id": 52003111, "body": "<p>I figured out, though I think it's a little \"dirty\":</p>\n\n<pre><code>def increase(tag, regex, position){\n    tag[position] = tag[position] + 1\n    def newTag = regex.toString().\\\n                       replace('^', '').\\\n                       replace('\\$', '').\\\n                       replace('(d+)','@__@')\n    tag[1..-1].each {\n        newTag = newTag.replaceFirst('@__@', it.toString())\n    }\n    return newTag\n}\n</code></pre>\n\n<p>Surely it won't cover all the cases, but will mostly work for me.</p>\n"}], "is_answered": true, "answer_count": 2, "score": 1, "last_activity_date": 1535118462, "creation_date": 1535108720, "question_id": 52003111, "title": "Groovy - How to substitute elements in a string that were found with a regex", "body": "<p>I'm trying to create a generic solution for increasing a version number which regex is given as a parameter. The regex works well so far but the next part, which is returning the same syntax as the original one, is what drives me crazy right now.</p>\n\n<p>The code snippet:</p>\n\n<pre><code>def increase(tag, regex, position){\n    tag[position] = (tag[position] as Integer) + 1\n    def newTag = tag[0].replaceAll(regex, ???)\n    return newTag\n}\n</code></pre>\n\n<p>So, if I give these parameters:</p>\n\n<pre><code>// entry params:\ntag = ['1.0.RC119', 1, 0, 119 ]\nregex = /^(\\d+).(\\d+).RC(\\d+)/\nposition = 3\n</code></pre>\n\n<p>The result should be <code>1.0.RC120</code></p>\n\n<p>With these parameters:</p>\n\n<pre><code>tag = [ '1.0u2', 1, 0, 2 ]\nregex = /^(\\d+).(\\d+)u(\\d+)/\nposition = 3\n</code></pre>\n\n<p>The result should be <code>1.0u3</code> </p>\n\n<p>What should I give to <code>replaceAll</code> as replacement?</p>\n"}