{"tags": ["django", "django-orm"], "answers": [{"comments": [{"score": 1, "creation_date": 1553045771, "post_id": 55233543, "comment_id": 97237162, "body": "thank you so much. it works!   User.objects.filter(verifications__category=&quot;ID&quot;, verifications__status=&quot;APPROVED&quot;)"}], "score": 2, "last_activity_date": 1552968722, "answer_id": 55233543, "question_id": 55233510, "body": "<p>You can do it like this(using related_name <code>verifications</code> as reverse relation):</p>\n\n<pre><code> User.objects.filter(verifications__category=\"ID\", verifications_status=\"APPROVED\")\n</code></pre>\n"}], "is_answered": true, "answer_count": 1, "score": 1, "last_activity_date": 1552974187, "creation_date": 1552968498, "question_id": 55233510, "title": "Django query one to many based on extra condition", "body": "<p>I have code set up like this:</p>\n\n<pre><code>class User(models.Model):\n   email = models.EmailField(_(u'email address'), max_length=255, unique=True, db_index=True, blank=True)\n\nclass Verification(models.Model):\n   created_by = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='verifications')\n   category = models.CharField(choices=constants.VERIFICATION_CATEGORY_CHOICES, default=None, max_length=255)\n   status = models.CharField(_(u'verification status'), max_length=255, default=constants.STATUS_PENDING, blank=True, null=True)\n</code></pre>\n\n<p>Now I need to get a list of users who has \"ID\"(category) verification and verification status is \"APPROVED\". How can I achieve that?</p>\n"}