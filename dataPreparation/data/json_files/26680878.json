{"tags": ["c#", "regex", "excel", "text"], "comments": [{"score": 0, "creation_date": 1414778905, "post_id": 26680878, "comment_id": 41960521, "body": "I&#39;m a little confused...what&#39;s happening when you use <code>substring</code> in the second example?"}, {"score": 0, "creation_date": 1414779026, "post_id": 26680878, "comment_id": 41960582, "body": "explore and try to understand the basic of programming, it is a very basic thing ..."}, {"score": 0, "creation_date": 1414779055, "post_id": 26680878, "comment_id": 41960596, "body": "column formation line 2 is not satisfied, and using substring or regex, it is ignored and the time to write to excel it writes like a white line."}, {"score": 0, "creation_date": 1414779147, "post_id": 26680878, "comment_id": 41960644, "body": "When you say &quot;fixed&quot;, do you mean fixed width? As in the training column begins at position 11 and is 15 characters long? or do you mean, I have a file with space delimited columns?"}, {"score": 3, "creation_date": 1414779268, "post_id": 26680878, "comment_id": 41960705, "body": "The correct approach is probably <code>substring</code>.  Please show us some code.  We can&#39;t tell you what you&#39;re doing wrong unless we see it."}, {"score": 0, "creation_date": 1414779453, "post_id": 26680878, "comment_id": 41960811, "body": "jac, that&#39;s right, it is a fixed column, example column formation begins at 11 and ends at position 21, then the column will have 10 characters, but if it has a null value, that line and ignored."}, {"score": 0, "creation_date": 1414779504, "post_id": 26680878, "comment_id": 41960837, "body": "@MeuChapeu I think you forgot to translate..."}, {"score": 0, "creation_date": 1414779532, "post_id": 26680878, "comment_id": 41960852, "body": "cabecalho[i] += linCabecalho.Linha.Substring(numAnterior, (_listas.ListaNumerosSubstring[i] - numAnterior));"}, {"score": 0, "creation_date": 1414779789, "post_id": 26680878, "comment_id": 41960980, "body": "You need to show how you are writing to Excel.  Maybe we can suggest some <a href=\"http://msdn.microsoft.com/en-us/library/kc12ydtf%28v=vs.110%29.aspx\" rel=\"nofollow noreferrer\">alternative methods</a> that don&#39;t require creating lots of temp substrings."}, {"score": 0, "creation_date": 1414779818, "post_id": 26680878, "comment_id": 41960989, "body": "@MeuChapeu Can you put the code in your question?  It&#39;d be helpful to see some of the surrounding code such as the loop."}, {"score": 0, "creation_date": 1414779889, "post_id": 26680878, "comment_id": 41961025, "body": "Are you seriously telling us that every single name in your entire database now and in perpetuity is going to be exactly the same length? If even one person named Bob gets put in your database, it ruins your entire system."}, {"score": 0, "creation_date": 1414781815, "post_id": 26680878, "comment_id": 41961935, "body": "No is the name that will have the same size, is the space to be completed with the name, if the header has 35 characters, the space to write the name will be 35 characters, however, when I have  a empty name field, it ignores the whole line."}, {"score": 0, "creation_date": 1443818820, "post_id": 26680878, "comment_id": 53659060, "body": "@MeuChapeu, you can find <a href=\"https://github.com/rafapereirabr/Brazilian_Census_2010\" rel=\"nofollow noreferrer\">here</a> a related code that might help you in your question. It&#39;s more applied to the 2010 Brazilian Census but you may find it useful as it uses the new package <code>readr</code>, which is based on <code>C++</code> to read fixed columns."}], "answers": [{"comments": [{"score": 0, "creation_date": 1414779887, "post_id": 26681067, "comment_id": 41961024, "body": "I could be that this <i>really</i> is coming from a system that uses fixed width columns.  I imagine the real file has more than 4 spaces for the name."}, {"score": 0, "creation_date": 1414780023, "post_id": 26681067, "comment_id": 41961086, "body": "@MikeH Yeah, maybe I&#39;m assuming too much (namely that the example he posted looks like what he actually wants to deal with), but even so, what if even a single space padding disappears? My feeling is generally that smaller assumptions are better."}, {"score": 0, "creation_date": 1414780962, "post_id": 26681067, "comment_id": 41961540, "body": "@furkle, I have not explained myself right, I edited the question by putting another example, in the second example the first line is not satisfied with the city."}, {"score": 0, "creation_date": 1414782362, "post_id": 26681067, "comment_id": 41962176, "body": "@MeuChapeu I understand better now - I&#39;ve updated my response to match what you&#39;re looking for re: empty city columns."}, {"score": 0, "creation_date": 1414870034, "post_id": 26681067, "comment_id": 41980252, "body": "@furkle Thank you . I go testing here !"}], "score": 1, "last_activity_date": 1414782341, "last_edit_date": 1414782341, "answer_id": 26681067, "question_id": 26680878, "body": "<p>Assuming you mean \"fixed columns\" extremely literally, and every single non-terminal column is exactly the same width, each column is separated by exactly one space, yes, you can get away with using neither regex or substring. If that's the case - and bear in mind that's also suggesting that <em>every single person</em> in the database has a name that's exactly four letters long - then you can just read the file in by lines. Id would be <code>line[0].ToString()</code>, name would be <code>new string(new char[] { line[2], line[3], line[4], line[5])</code>, etc.</p>\n\n<p>Or, for any given value:</p>\n\n<pre><code>var str = new StringBuilder();\nfor (int i = firstIndex; i &lt; lastIndex; i++)\n{\n    str.Append(line[i]);\n}\n</code></pre>\n\n<p>But this is basically just performing the exact function of Substring. Substring isn't your problem - handling empty values in the first (city) column is. So, for any given line, you need to check whether the line is empty:</p>\n\n<pre><code>foreach (line in yourLines)\n{\n    if (line.Substring(cityStartIndex, cityEndIndex).IsNullOrWhitespace) == \"\")\n    {\n        continue;\n    }\n}\n</code></pre>\n\n<p>Alternately, if you're sure the city name will always be at the very first index of the line:</p>\n\n<pre><code>foreach (line in yourLines)\n{\n    if (line[0] == ' ') { continue; }\n}\n</code></pre>\n\n<p>And if the value you got from the city cell was valid, you'd store that value and continue on to using Substring with the indices of the rest of the values in the row.</p>\n"}, {"score": 1, "last_activity_date": 1414779857, "answer_id": 26681168, "question_id": 26680878, "body": "<p>If for whatever reason you don't want to use a regular expression or Substring(), you have a couple of other options:</p>\n\n<ol>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/b873y76a%28v=vs.110%29.aspx\" rel=\"nofollow\">String.Split</a>, e.g. <code>var columns = line.Split(' ');</code></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/system.string.chars%28v=vs.110%29.aspx\" rel=\"nofollow\">String.Chars</a>, using the known widths of each column to build your output;</li>\n</ol>\n"}, {"score": 1, "last_activity_date": 1414780509, "answer_id": 26681305, "question_id": 26680878, "body": "<p>Why not just use <code>string.Split()</code>?</p>\n\n<p>Something like:</p>\n\n<pre><code>using (StreamReader stream = new StreamReader(file)) {\n  while (!stream.EndOfStream) {\n    string line = stream.ReadLine();\n    if (string.IsNullOrWhitespace(line))\n      continue;\n    string[] fields = line.Split((char[])null, StringSplitOptions.RemoveEmptyEntries);\n    int ID = -1, age = -1;\n    string name = null, training = null;\n    ID = int.Parse(fields[0]);\n    if (fields.Length &gt; 1)\n      name = fields[1];\n    if (fields.Length &gt; 2)\n      age = int.Parse(fields[2]);\n    if (fields.Length &gt; 3)\n      training = fields[3];\n    // do stuff\n  }\n}\n</code></pre>\n\n<p>Only downside to this is that it will allow fields of arbitrary length.  And spaces in fields will break the fields.</p>\n\n<p>As for regular expressions being ignored in the last case, try something like:</p>\n\n<pre><code>Match m = Regex.Match(line, @\"^(.{2}) (.{4}) (.{2})( +.+?)?$\");\n</code></pre>\n"}, {"score": 1, "last_activity_date": 1414781100, "answer_id": 26681446, "question_id": 26680878, "body": "<p>First - define a variable for each column in the file. Then go through the file line by line and assign each column to the correct variable. Substitute the correct start positions and lengths. This should be enough information to get you started parsing your file.</p>\n\n<pre><code>private string id;\nprivate string name;\nprivate string age;\nprivate string training;\n\nwhile((line = file.ReadLine()) != null)\n{\n    id = line.Substring(0, 3)\n    name = line.Substring(3, 10)\n    age = line.Substring(12, 2)\n    training = line.Substring(14, 10)\n    ...\n    if (string.IsNullOrWhiteSpace(name))\n    {\n        // ignore this line if the name is blank\n    }\n    else\n    {\n        // do something useful\n    }\n    counter++;\n}\n</code></pre>\n"}], "is_answered": true, "answer_count": 4, "score": 0, "last_activity_date": 1416418289, "creation_date": 1414778761, "question_id": 26680878, "title": "Eead text file with fixed columns in C#", "body": "<p>is there any way to read text files with fixed columns in C # without using regex and substring? </p>\n\n<p>I want to read a file with fixed columns and transfer the column to an excel file (.xlsx) </p>\n\n<p>example 1 </p>\n\n<pre>\n                                       POPULACAO \nMUNICIPIO                           UF CENSO 2010 \n\n                                    AC     78.507\n                                    AC     15.100\nRio Branco                          AC    336.038\nSena Madureira                      AC     38.029 \n</pre>\n\n<p>example 2 </p>\n\n<pre>\n                                       POPULACAO \nMUNICIPIO                           UF CENSO 2010 \n\n                                    AC     78.507\nEpitaciol\u00e2ndia                      AC     15.100\nRio Branco                          AC    336.038\nSena Madureira                      AC     38.029\n</pre>\n\n<p>remembering that I have a case as in the second example where a column is blank, I can get the columns and the values \u200b\u200busing regex and / or substring, but if it appears as a file in Example 2, with the regex line of the file is ignored, so does substring.</p>\n"}